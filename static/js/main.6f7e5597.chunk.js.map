{"version":3,"sources":["assets/trash1600.png","constants.js","actions.js","components/HomeButton.js","components/MissionsButton.js","components/TasksButton.js","components/InboxButton.js","components/StatsButton.js","functions.js","containers/NavBar.js","components/ListItem.js","components/Scroll.js","components/List.js","components/NewItemButton.js","classes.js","components/DatePicker.js","components/NewTask.js","components/NewMission.js","components/NewReference.js","components/NewEvent.js","components/NewItem.js","components/QuestionAndOptions.js","components/QuestionAndInput.js","ReferenceList.js","components/TaskControls.js","containers/Processor.js","components/PrevItemButton.js","components/NextItemButton.js","components/ItemDetails.js","components/Timer.js","components/TaskDetails.js","components/MissionDetails.js","components/BackButton.js","components/ReferenceDetails.js","components/TrashButton.js","components/CompletedItemDetails.js","components/TrashedItemDetails.js","components/EventDetails.js","containers/Details.js","components/ActiveTaskTimer.js","components/SyncStatusDot.js","components/StatsOverview.js","components/TasksOverview.js","components/MissionsOverview.js","components/InboxOverview.js","components/NewItemTile.js","components/TodaysMission.js","containers/Home.js","containers/Stats.js","containers/Main.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","MISSIONS","TASKS","INBOX","MISSION","TASK","REFERENCES","EVENTS","SOMEDAY","TRASH","ASAP","LIST","DETAILS","NEW","ADD","UPDATE","PROCESSED","DONE","DAILY","ChangeNav","navObj","type","payload","selectTitle","title","selectItem","itemID","selectView","view","UpdateExp","exp","expTimestamp","Date","getTime","RestorePreviousState","previousState","UpdateTaskStatus","status","SetActiveTask","task","FetchItems","record","dispatch","RequestItems","fetch","serverLink","then","response","json","console","log","items","receivedAt","now","ReceiveItems","catch","error","setTimeout","CreateAlert","msg","timeStamp","message","ShipItems","agent","PackItems","method","mode","headers","body","JSON","stringify","deliveredAt","DeliverItems","successMessage","HomeButton","touchFunction","className","data-view","onClick","MissionsButton","TasksButton","InboxButton","StatsButton","setNavValues","e","navChanger","state","navTitle","navID","navView","targ","target","checkForTitle","t","parentNode","checkForID","id","checkForView","getAttribute","parseInt","nav","ID","displayDays","dueDate","days","Math","ceil","abs","pushChanges","action","item","list","shippingFunction","pushDate","amendList","db","expObj","dbList","localList","itemndx","indexOf","splice","unshift","connect","values","changeNav","props","handleEvent","nextTitle","isTrashed","name","taskList","length","date","toDateString","processedDate","entryDate","toLocaleString","trashedDate","Scroll","style","overflowY","overflowX","children","changeItemID","content","filteredContent","filter","entry","toISOString","substr","frequency","listItems","map","i","key","useState","sortedContent","setSortedContent","sort","setSort","swapOrder","direction","order","a","b","changeView","Item","d","this","description","Task","outcome","requiredContext","associatedMissionID","random","priority","outcomeRecordID","note","timeRequired","requirements","details","timeSpent","activeSince","doneDate","Mission","purpose","vision","principles","toDo","skillsRequired","infoRequired","abilityRequired","backStory","outputRef","outputRecordUrl","Reference","Event","time","location","previousView","UpdateExpReducer","UpdateTaskStatusReducer","taskStatus","activeTask","SetActiveTaskReducer","updateExp","shipItems","dateValue","updateFunc","setDate","changeDate","setChangeDate","isASAP","setIsASAP","isSomeday","setIsSomeday","useEffect","autoFocus","defaultValue","onChange","value","onBlur","onTouch","TaskList","Tasks","setName","setOutcome","setRequiredContext","setDetails","setDueDate","setAgent","setFrequency","setRequirements","onSubmit","event","projID","proj","Missions","addToMissionTasks","changeNavigation","preventDefault","placeholder","DatePicker","disabled","MissionsList","setPurpose","setPriority","m","trim","today","References","r","Events","setTime","setLocation","setNote","htmlFor","min","changeTitle","submitFunction","submitNewItem","Inbox","displayTypeForm","QuestionAndOptions","question","yes","no","QuestionandInput","answer","setAnswer","timerOn","updateTaskStatus","setActiveTask","position","startTimer","updateTask","prevTimeSpent","pauseTask","dateNow","markAsDone","undefined","nextItemID","itemIndex","InboxItems","MissionList","SomedayList","Someday","isActionable","setIsActionable","isMultistep","setIsMultistep","isDoneInFive","setIsDoneInFive","isDelegatable","setIsDelegatable","step","setStep","nextID","setNextID","isDoneInaYear","setIsDoneInaYear","newMissionID","setNewMissionID","setNewTaskID","newMission","setNewMission","newTask","setNewTask","assignedAgent","setAssignedAgent","trashed","incubated","setIncubated","referenced","setReferenced","newReference","setNewReference","refDetails","setRefDetails","newEvent","setNewEvent","makeNewTask","asProjID","theOutcome","updateStatus","processNextItem","proceed","ref","makeNewReference","ev","makeNewEvent","rows","cols","viewNewEvent","makeNewMission","PrevItemButton","selectAnother","prevID","currentID","NextItemButton","indx","readyToProcess","setReadyToProcess","timeNow","s","secs","mins","hrs","seconds","setSeconds","minutes","setminutes","hours","sethours","isActive","setIsActive","isUpdated","setIsUpdated","interval","setInterval","clearInterval","minimumIntegerDigits","relevantList","tasks","concat","associatedMission","setrequiredContext","setoutcome","setdueDate","setnote","lastUpdated","updateDB","obj","property","newVal","wrap","TaskControls","RestorePreviousStateReducer","restorePreviousState","mission","Completed","passKey","getTasks","j","push","missionTasks","setVision","setPrinciples","setToDo","setSkillsRequired","setInfoRequired","setAbilityRequired","setBackStory","setOutputRef","setOutputRecordUrl","setTimeRequired","setTimeSpent","openPlanner","setOpenPlanner","setLastUpdated","showTasks","setShowTasks","setStatus","setTaskList","saveDate","listOfTasks","taskNames","split","currentTaskListNames","newTaskNames","forEach","element","nt","createTasks","missionID","previousTitle","previousItemID","reference","currentList","currentItem","src","trashCan","alt","trashItem","calculateTime","x","getMission","prev","next","BackButton","TrashButton","TaskDetails","ReferenceDetails","EventDetails","missions","stopPropagation","isShipping","latestUpdate","color","StatsOverview","SyncStatusDot","ActiveTaskTimer","TaskOverview","MissionsOverview","InboxOverview","inbox","NewItemTile","TodaysMission","somedayContent","dailyEx","gotoItem","openList","recordState","isFetching","alerts","createAlert","activeTasks","Boolean","window","hostname","match","initialState","didInvalidate","initialActiveTask","rootReducer","combineReducers","lists","Object","assign","newXP","newTimestamp","expTimeStamp","SelectRecordReducer","records","updateAcknowledged","alertArray","notAlerted","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f7e5597.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash1600.4a1c4989.png\";","// Actions\r\nexport const SELECT_VIEW = 'SELECT_VIEW';\r\nexport const SELECT_TITLE = 'SELECT_TITLE';\r\nexport const UPDATE_EXP = 'UPDATE_EXP';\r\nexport const SELECT_MISSION = 'SELECT_MISSION';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const RESTORE_PREVIOUS_STATE = 'RESTORE_PREVIOUS_STATE';\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS';\r\nexport const SET_ACTIVE_TASK = 'SET_ACTIVE_TASK';\r\nexport const RETRIEVE_DB = 'RETRIEVE_DB';\r\nexport const REFRESH_DB = 'REFRESH_DB';\r\nexport const CHANGE_NAV = 'CHANGE_NAV';\r\n\r\n//\r\nexport const HOME = 'HOME';\r\nexport const MISSIONS = 'MISSIONS';\r\nexport const TODAY = 'TODAY';\r\nexport const STATS = 'STATS';\r\nexport const SKILLS = 'SKILLS';\r\nexport const TASKS = 'TASKS';\r\nexport const INBOX = 'INBOX';\r\nexport const MISSION = 'MISSION';\r\nexport const EVENT = 'EVENT';\r\nexport const TASK = 'TASK';\r\nexport const INBOX_ITEM = 'INBOX_ITEM';\r\nexport const NEW_ITEM = 'NEW_ITEM';\r\nexport const REFERENCES = 'REFERENCES';\r\nexport const REFERENCE = 'REFERENCE';\r\nexport const CALENDAR = 'CALENDAR';\r\nexport const EVENTS = 'EVENTS';\r\nexport const SOMEDAY = 'SOMEDAY';\r\nexport const TRASH = 'TRASH';\r\nexport const COMPLETED = 'COMPLETED';\r\nexport const WAITING_FOR = 'WAITING_FOR';\r\nexport const ASAP = 'ASAP';\r\nexport const MISSION_TASKS = 'MISSION_TASKS';\r\n\r\n\r\n//VIEWS\r\nexport const OVERVIEW = 'OVERVIEW';\r\nexport const LIST = 'LIST';\r\nexport const DETAILS = 'DETAILS';\r\nexport const NEW = 'NEW';\r\n\r\n//TITLES\r\n// export const INBOX = 'INBOX';\r\n// export const TASKS = 'TASKS';\r\n\r\n//Actions to push\r\nexport const ADD = 'ADD';\r\nexport const REMOVE = 'REMOVE';\r\nexport const UPDATE = 'UPDATE';\r\n\r\n\r\n// Status constants\r\n//STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\nexport const UNPLANNED = 'UNPLANNED';\r\nexport const UNPROCESSED = 'UNPROCESSED';\r\nexport const PROCESSED = 'PROCESSED';\r\nexport const PENDING = 'PENDING';\r\nexport const DELEGATION_PENDING = 'DELEGATION_PENDING';\r\nexport const STARTED = 'STARTED';\r\nexport const DONE = 'DONE';\r\nexport const ONGOING = 'ONGOING';\r\nexport const COMPLETE = 'COMPLETE';\r\nexport const PAUSED = 'PAUSED';\r\nexport const ACTIVE = 'ACTIVE';\r\n//\r\n\r\nexport const LOW = 'LOW';\r\nexport const MEDIUM = 'MEDIUM';\r\nexport const HIGH = 'HIGH';\r\n\r\n\r\n\r\n//For frequency/recurring\r\nexport const NONE = 'NONE';\r\nexport const DAILY = 'DAILY';\r\nexport const WEEKLY = 'WEEKLY';\r\nexport const MONTHLY = 'MONTHLY';\r\nexport const FORTHNIGHTLY = 'FORTHNIGHTLY';\r\nexport const THREE_MONTHS = 'THREE_MONTHS';\r\nexport const SIX_MONTHS = 'SIX_MONTHS';\r\nexport const YEARLY = 'YEARLY';\r\n//","import { \r\n    SELECT_VIEW, SELECT_MISSION, SELECT_TASK, SELECT_TITLE, SELECT_ITEM, \r\n    UPDATE_EXP, RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, \r\n    SET_ACTIVE_TASK, RETRIEVE_DB, REFRESH_DB, CHANGE_NAV\r\n  } from './constants';\r\n\r\nexport const ChangeNav = (navObj) => {\r\n  return {\r\n    type: CHANGE_NAV,\r\n    payload: navObj\r\n  }\r\n}\r\nexport const selectTitle = (title) => {\r\n  return {\r\n  type: SELECT_TITLE,\r\n  payload: title\r\n}};\r\n\r\nexport const selectItem = (itemID) => {\r\n  return {\r\n  type: SELECT_ITEM,\r\n  payload: itemID\r\n}};\r\n\r\nexport const selectView = (view) => {\r\n  return {\r\n  type: SELECT_VIEW,\r\n  payload: view\r\n}};\r\n\r\nexport const selectMission = (missionID) => {\r\n    return {\r\n    type: SELECT_MISSION,\r\n    payload: missionID\r\n}};\r\n\r\nexport const selectTask = (taskID) => {\r\n    return {\r\n    type: SELECT_TASK,\r\n    payload: taskID\r\n}};\r\n\r\nexport const UpdateExp = (exp) => {\r\n    return {\r\n    type: UPDATE_EXP,\r\n    payload: exp,\r\n    expTimestamp: new Date().getTime()\r\n}};\r\n\r\nexport const RestorePreviousState = (previousState) => {\r\n    return {\r\n    type: RESTORE_PREVIOUS_STATE,\r\n    payload: previousState\r\n}};\r\n\r\nexport const UpdateTaskStatus = (status) => {\r\n    return {\r\n    type: UPDATE_TASK_STATUS,\r\n    payload: status\r\n}};\r\n\r\nexport const SetActiveTask = (task) => {\r\n    return {\r\n    type: SET_ACTIVE_TASK,\r\n    payload: task\r\n}};\r\n\r\nexport const RetrieveDB = (database) => {\r\n    return {\r\n        type: RETRIEVE_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\nexport const RefreshDB = (database) => {\r\n    return {\r\n        type: REFRESH_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\n////////////////////\r\n\r\n// ASYNC REQUESTS\r\n\r\nexport const SELECT_RECORD = 'SELECT_RECORD';\r\n\r\nexport function SelectRecord(record) {\r\n  return {\r\n    type: SELECT_RECORD,\r\n    payload: record\r\n  }\r\n}\r\n\r\nexport const INVALIDATE_RECORD = 'INVALIDATE_RECORD';\r\n\r\nexport function InvalidateRecord(record) {\r\n  return {\r\n    type: INVALIDATE_RECORD,\r\n    record\r\n  }\r\n}\r\n\r\nexport const REQUEST_ITEMS = 'REQUEST_ITEMS';\r\n\r\nexport function RequestItems(record) {\r\n  return {\r\n    type: REQUEST_ITEMS,\r\n    record\r\n  }\r\n}\r\n\r\nexport const RECEIVE_ITEMS = 'RECEIVE_ITEMS';\r\n\r\nexport function ReceiveItems(record, json) {\r\n  return {\r\n    type: RECEIVE_ITEMS,\r\n    record,\r\n    items: json,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n\r\n//import fetch from 'cross-fetch'\r\n\r\n\r\n\r\nexport function FetchItems(record) {\r\n  return dispatch => {\r\n    dispatch(RequestItems(record))\r\n    return fetch(serverLink) //https://secret-citadel-16777.herokuapp.com/\r\n      .then(response => response.json())\r\n      .then(json => { console.log(json); dispatch(ReceiveItems(record, json))})\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        //Repeat fetch every 5 seconds until successful\r\n        setTimeout(dispatch(FetchItems(record)), 5000);\r\n      })\r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  // Note that the function also receives getState()\r\n  // which lets you choose what to dispatch next.\r\n\r\n  // This is useful for avoiding a network request if\r\n  // a cached value is already available.\r\n\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      // Dispatch a thunk from thunk!\r\n      return dispatch(FetchItems(subreddit))\r\n    } else {\r\n      // Let the calling code know there's nothing to wait for.\r\n      return Promise.resolve()\r\n    }\r\n  }\r\n}\r\n\r\n////////////////////////////////////\r\n\r\nexport const PACK_ITEMS = 'PACK_ITEMS';\r\n\r\nexport function PackItems(items) {\r\n  return {\r\n    type: PACK_ITEMS,\r\n    payload: items\r\n  }\r\n}\r\n\r\nexport const DELIVER_ITEMS = 'DELIVER_ITEMS';\r\n\r\nexport function DeliverItems(agent, json) { // record/agent/destination\r\n  \r\n  return {\r\n    type: DELIVER_ITEMS,\r\n    agent,\r\n    payload: json,\r\n    deliveredAt: Date.now()\r\n  }\r\n}\r\n\r\nexport const CREATE_ALERT = \"CREATE_ALERT\"\r\n\r\nexport function CreateAlert(msg) {\r\n  return {\r\n    type: CREATE_ALERT,\r\n    payload: {\r\n      timeStamp: Date.now(),\r\n      message: msg,\r\n    }\r\n  }\r\n}\r\n\r\nexport const CLOSE_ALERT = \"CLOSE_ALERT\"\r\n\r\nexport function CloseAlert(msg, timeStamp) {\r\n  return {\r\n    type: CLOSE_ALERT,\r\n    payload: {\r\n      timeStamp,\r\n      msg,\r\n    },\r\n    closedAt: Date.now()\r\n  }\r\n}\r\n// const testItem = {\r\n//   content: \"this is a test item fom the front end\"\r\n// }\r\n\r\nconst agent1 = \"amen\"\r\n\r\n\r\nexport function ShipItems(items, agent, record) {\r\n  return dispatch => {\r\n    dispatch(PackItems(items))\r\n    console.log(\"packed items: \", items)\r\n    return fetch(`${serverLink}${agent1}`, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(items)\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        dispatch(DeliverItems(agent, json));\r\n        dispatch(CreateAlert(items.successMessage)) \r\n        dispatch(UpdateExp(json.exp));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        //Repeat the update every 5 seconds till it succeeds\r\n        setTimeout(ShipItems(items, agent), 5000);\r\n      })\r\n  }\r\n}\r\n\r\nconst serverLink = \"https://secret-citadel-16777.herokuapp.com/\";\r\n//const serverLink2 = \"http://localhost:5000/\";","import React from 'react';\r\nimport { HOME, OVERVIEW } from '../constants';\r\n\r\nexport default function HomeButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={OVERVIEW}  title={HOME} onClick={touchFunction}>\r\n            <h3 className='tc'>H</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST, MISSIONS } from '../constants';\r\n\r\nexport default function MissionsButton({touchFunction}) {\r\n    return (\r\n        <div className='w-20 center bg-white ba b--black-10 flex items-center justify-center' data-view={LIST}  title={MISSIONS} onClick={touchFunction}>\r\n            <h3 className='tc'>M</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function TasksButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={LIST} title=\"TASKS\" onClick={touchFunction}>\r\n            <h3 className='tc'>T</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function InboxButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={LIST}  title=\"INBOX\" onClick={touchFunction}>\r\n            <h3 className='tc'>I</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { OVERVIEW } from '../constants';\r\n\r\nexport default function StatsButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={OVERVIEW} title=\"STATS\" onClick={touchFunction}>\r\n            <h3 className='tc'>S</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","/// For all the extra functions required in multiple places\r\n\r\nimport { ShipItems } from \"./actions\";\r\nimport { ADD, ASAP, COMPLETED, INBOX, PROCESSED, MISSIONS, REFERENCES, EVENTS, REMOVE, SOMEDAY, TASKS, TRASH, UPDATE } from \"./constants\";\r\n\r\n\r\n\r\nexport function passTitleAndID(e, ChangeTitleFunction, changeIDFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            changeIDFunction(t.id);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n}\r\n\r\nexport function setNavValues(e, navChanger, state){\r\n    let targ = e.target;\r\n    let navTitle;\r\n    checkForTitle(targ);\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            navTitle = t.title;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    let navID;\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            navID = t.id;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n    let navView;\r\n    checkForView(targ);\r\n    function checkForView (t) {\r\n        //console.log(\"target name: \", t.tagName)\r\n        if (t.getAttribute('data-view')) {\r\n            navView = t.getAttribute('data-view');\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForView (t);   \r\n        }\r\n    }\r\n   \r\n    !(parseInt(navID) >= 0) ? navID = 0 : console.log(\"\");\r\n\r\n    const nav = {\r\n        title: navTitle,\r\n        view: navView,\r\n        ID: navID\r\n    }\r\n    console.log(nav)\r\n    navChanger(nav);\r\n}\r\n\r\nexport function calculateTime(timeSpent){\r\n\r\n    //CALCULATE TIME SPENT from timeSpent in seconds\r\n    console.log(\"timespent from calcTime: \", timeSpent)\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let seconds = s % 60;\r\n    s = (s - seconds) / 60;\r\n    let minutes = s % 60;\r\n    let hours = (s - minutes) / 60;\r\n    return `${hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})}` \r\n}\r\n\r\n\r\nexport function convertDateToMilliseconds(d) {\r\n    let m,y;\r\n    [y, m, d] = d.split(\"-\"); //Split the string\r\n     ;\r\n     return new Date(...[y, m - 1, d]).getTime() //Return as an array with y,m,d sequence\r\n  }\r\n\r\n\r\nexport function displayDays(dueDate){\r\n    if (dueDate === ASAP) {\r\n        return ASAP;\r\n    } else {\r\n        dueDate = new Date(dueDate).getTime()\r\n        let days = Math.ceil((dueDate - new Date().getTime()) / (1000*60*60*24));\r\n        switch(true){\r\n            case days <= -1:\r\n                return `Due ${Math.abs(days)} days ago`;\r\n            case days > 1:\r\n                return `${days} Days remaining`;\r\n            case days === 1:\r\n                return `${days} Day remaining`;\r\n            case Math.abs(days) === 0:\r\n                return `DUE TODAY `;\r\n            default:\r\n                return `${days} Days remaining`;\r\n        }\r\n    }\r\n}\r\n\r\nexport function pushChanges(action, item, list, shippingFunction, exp = 10){\r\n\r\n    let successMessage = '';\r\n    switch(action){\r\n        case ADD:\r\n            successMessage = `New ${list} added`;\r\n        break;\r\n        case REMOVE:\r\n            successMessage = `A ${list} was deleted`;\r\n        break;\r\n        case UPDATE:\r\n            successMessage = `A ${list} was updated`;\r\n        break;\r\n        default:      \r\n    }\r\n    let state = {\r\n        action: action,\r\n        list: list,\r\n        item: item,\r\n        pushDate: (new Date()).getTime(),\r\n        exp,\r\n        successMessage\r\n    }\r\n    shippingFunction(state);\r\n}\r\n\r\n\r\nexport function amendList(db, list, item, action, shippingFunction, expObj){\r\n    // lists = [ MISSIONS, TASKS, INBOX, REFERENCES, EVENTS, SOMEDAY, COMPLETED, PROCESSED, TRASH ]\r\n    \r\n    let dbList;\r\n    switch (list) {\r\n        case MISSIONS:\r\n            dbList = \"Missions\"\r\n        break;\r\n        case INBOX:\r\n            dbList = \"Inbox\"\r\n        break;\r\n        case REFERENCES:\r\n            dbList = \"References\"\r\n        break;\r\n        case EVENTS:\r\n            dbList = \"Events\"\r\n        break;\r\n        case TASKS:\r\n            dbList = \"Tasks\"\r\n        break;\r\n        case SOMEDAY:\r\n            dbList = \"Someday\"\r\n        break;\r\n        case PROCESSED:\r\n            dbList = \"Processed\"\r\n        break;\r\n        case TRASH:\r\n            dbList = \"Trash\"\r\n        break;\r\n        default:\r\n    }\r\n\r\n    let localList = db[dbList];\r\n    let itemndx = localList.indexOf(item);\r\n\r\n    console.log(\"local list = \", localList)\r\n    console.log(\"ammendment action = \", action)\r\n    console.log(\"index of item = \", itemndx)\r\n    switch (action) {\r\n        case REMOVE:\r\n            localList.splice(itemndx, 1);\r\n            //pushChanges(REMOVE, item, dbList, shippingFunction);\r\n        break;\r\n        case ADD:\r\n            localList.unshift(item);\r\n            pushChanges(ADD, item, dbList, shippingFunction);\r\n        break;\r\n        case UPDATE:\r\n            localList[itemndx] = item;\r\n            pushChanges(UPDATE, item, dbList, shippingFunction);\r\n        break;\r\n        default:\r\n    }\r\n\r\n    console.log(\"local list post ammendment = \", localList)\r\n}\r\n/* \r\n\r\nfunction changeNavigation(id, navChanger){\r\n    let nav;\r\n    if(title === MISSIONS) {\r\n        nav = {\r\n            title: MISSIONS,\r\n            view: \"DETAILS\",\r\n            ID: itemID\r\n        }\r\n    } else {\r\n        nav = {\r\n            title: title,\r\n            view: \"DETAILS\",\r\n            ID: id\r\n        }\r\n    }\r\n    changeNav(nav);\r\n}\r\n\r\n*/\r\n\r\n// export function passTitle(e, ChangeTitleFunction) {\r\n//     let targ = e.target;\r\n//     checkForTitle(targ)\r\n//     function checkForTitle (t) {\r\n//         if (t.title) {\r\n//             ChangeTitleFunction(t.title);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForTitle (t);   \r\n//         }\r\n//     }\r\n// }\r\n\r\n// function passKey(e, changeIDFunction) {\r\n//     //Takes the events target and checks for title attribute \r\n//     //If no title attribute, check parent node for title attribute\r\n//     //If not found, repeat step 2\r\n//     let targ = e.target;\r\n//     checkForID(targ);\r\n//     function checkForID (t) {\r\n//         if (t.id) {\r\n//             changeIDFunction(t.id);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForID (t);   \r\n//         }\r\n//     }\r\n// }","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeButton from '../components/HomeButton';\r\nimport MissionsButton from '../components/MissionsButton';\r\nimport TasksButton from '../components/TasksButton';\r\nimport InboxButton from '../components/InboxButton';\r\nimport StatsButton from '../components/StatsButton';\r\nimport { ChangeNav } from '../actions';\r\nimport { setNavValues } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { changeNav, state } = props;\r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='navbar center flex'>\r\n            <HomeButton touchFunction={handleEvent} />\r\n            <InboxButton touchFunction={handleEvent} />\r\n            <TasksButton touchFunction={handleEvent} />\r\n            <MissionsButton touchFunction={handleEvent} />\r\n            <StatsButton touchFunction={handleEvent} />\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MISSION, TASK, INBOX_ITEM, TASKS, DONE, COMPLETED, DETAILS, MISSIONS, INBOX, TRASH, CALENDAR, MISSION_TASKS, SOMEDAY, EVENT, EVENTS, REFERENCES, REFERENCE, PROCESSED } from '../constants';\r\nimport { displayDays } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nfunction ListItem( { touchFunction, item, title }){\r\n    \r\n    let nextTitle;\r\n\r\n    \r\n\r\n    switch(true){\r\n        case item.type === MISSION && !item.isTrashed:\r\n            console.log(\"trash log  \",item)\r\n            title === SOMEDAY ? nextTitle = SOMEDAY : nextTitle = MISSIONS;\r\n            //let days = parseInt(Math.floor(total_hours / 24));\r\n            //let days = (item.dueDate / (1000*60*60*24)) % 7;\r\n            //console.log('days: ', days);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' title={item.isTrashed ? TRASH : nextTitle} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80 '>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        <p className='fw3 white'>{displayDays(item.dueDate)}, Tasks: {item.taskList.length}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === TASK && !item.isTrashed:\r\n            item.status === DONE ? nextTitle = COMPLETED : nextTitle = TASKS;\r\n            if(title === MISSIONS){nextTitle = MISSION_TASKS};\r\n            if(title === SOMEDAY){\r\n                nextTitle = SOMEDAY;\r\n                return (\r\n                    <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                        <div className='w-80'>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        {/* <p className='fw3 white'>{title === CALENDAR ? new Date(item.dueDate).toDateString() : item.requiredContext}</p> */}\r\n                        <p className='fw3 white'>NO DATE SET</p>\r\n                        </div>\r\n                        <div>\r\n                            <p className='gold fw7 b'>{item.status}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                        <div className='w-80'>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        {/* <p className='fw3 white'>{title === CALENDAR ? new Date(item.dueDate).toDateString() : item.requiredContext}</p> */}\r\n                        <p className='fw3 white'>{displayDays(item.dueDate)}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p className='gold fw7 b'>{item.status}</p>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        case item.type === EVENT && !item.isTrashed:\r\n            nextTitle = EVENTS;\r\n            console.log(nextTitle);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{new Date(item.date).toDateString()}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>REM</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === REFERENCE && !item.isTrashed:\r\n        nextTitle = REFERENCES;\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    {/* <p className='fw3 white'>{new Date(item.dueDate).toDateString()}</p> */}\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>REF</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.status === PROCESSED && !item.isTrashed:\r\n        nextTitle = PROCESSED;\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{new Date(item.processedDate).toDateString()}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>PROCESSED</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === INBOX_ITEM && !item.isTrashed:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' \r\n                title={item.isTrashed ? TRASH : INBOX} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>Entered: {(new Date(item.entryDate)).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>PROCESS</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.isTrashed:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' \r\n                title={TRASH} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>DELETED: {(new Date(item.trashedDate)).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>{item.type}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='bb' title='new item' onClick={touchFunction}>\r\n                    <h3>Enter New Item</h3>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem);\r\n\r\n","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='h-100' style={{overflowY: 'scroll', overflowX: 'hidden'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, ChangeNav } from '../actions';\r\nimport ListItem from './ListItem';\r\nimport Scroll from './Scroll';\r\nimport { TASK, TASKS, MISSIONS, MISSION, INBOX_ITEM, TODAY, DAILY, DONE, REFERENCE, REFERENCES, COMPLETED, INBOX, ASAP, CALENDAR, TRASH, EVENT, PROCESSED, SOMEDAY, DETAILS } from '../constants';\r\nimport { setNavValues  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values,\r\n        view: state.values.view\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction List({ content, changeItemID, title, view, state, changeNav }) {\r\n\r\n    //console.log(\"first content: \", content)\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    let missionTasks, dueToday, todaysTasks, dailyEx, dailyTasks;\r\n    \r\n    \r\n\r\n    // useEffect(() => {\r\n    //     setSort(false)\r\n    // }) \r\n    \r\n    \r\n\r\n\r\n    // Mission, Task, Inbox, Event and Reference Lists \r\n    let type = '';\r\n    let status;\r\n    let filteredContent = []\r\n    //console.log(\"content \", content);\r\n    switch(title){\r\n        case INBOX:\r\n            filteredContent = content.filter((entry) => (entry.type === INBOX_ITEM && entry.isTrashed === false) && entry.status !== PROCESSED );\r\n        break;\r\n        case TRASH:\r\n            filteredContent = content.filter((entry) => (entry.isTrashed === true));\r\n        break;\r\n        case TODAY:\r\n            type = TASK;\r\n            filteredContent = content.filter((entry) => ((entry.type === type) && (entry.dueDate !== ASAP) && ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ));\r\n        break;\r\n        case DAILY:\r\n            type = TASK;\r\n            // Daily exercises\r\n            filteredContent = content.filter((entry) => (entry.type === type && entry.frequency === DAILY ) && (entry.isTrashed === false));\r\n            // console.log(\"filtered content\", filteredContent)\r\n            // dailyTasks = filteredContent.map((entry, i) => {\r\n            //     return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n            // })\r\n        break;\r\n        default:\r\n            filteredContent = content.filter((entry) => (entry.isTrashed === false));\r\n    }\r\n\r\n    const listItems = filteredContent.map((entry,i) => {\r\n        return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n    const [ sortedContent, setSortedContent ] = useState(filteredContent);\r\n    const [ sort, setSort ] = useState(false);\r\n\r\n    function swapOrder(list, i, direction){\r\n        console.log(\"changing order\")\r\n        if (direction === \"UP\" && list[i].order !== 0){\r\n            console.log(list[i])\r\n            list[i-1].order++;\r\n            list[i].order--;\r\n        } else if (direction === \"DOWN\" && list[i].order !== list.length - 1){\r\n            console.log(list[i])\r\n            list[i+1].order--;\r\n            list[i].order++;\r\n        }\r\n        filteredContent = filteredContent.sort((a,b) => a.order - b.order)\r\n        setSortedContent(filteredContent)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setSortedContent(filteredContent);\r\n    // })\r\n\r\n\r\n    switch(title){\r\n        // case TODAY:\r\n        //     return (\r\n        //         <Scroll>\r\n        //             {todaysTasks}\r\n        //         </Scroll>\r\n        //     )\r\n        // case DAILY:\r\n        //     return (\r\n        //         <Scroll>\r\n        //             {dailyTasks}\r\n        //         </Scroll>\r\n        //     )\r\n        case MISSIONS:\r\n            if (view === DETAILS){\r\n                if (sort === true){\r\n                    return (\r\n                        <div>\r\n                            <button className='pb2' onClick={()=>{setSort(false)}}>SAVE ORDER</button>\r\n                            <Scroll>\r\n                                {filteredContent.map((entry,i) => {\r\n                                    return (\r\n                                        <div className='pb2'>\r\n                                            <p className='white fw7 b tc' onClick={()=> swapOrder(sortedContent, i, \"UP\") }>^</p>\r\n                                            <ListItem item={sortedContent[i]} touchFunction={handleEvent} key={sortedContent[i].id}/>\r\n                                            <p className='white fw5 tc' onClick={()=> swapOrder(sortedContent, i, \"DOWN\") }>v</p>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </Scroll>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div>\r\n                            <button className='pb2' onClick={()=>{setSort(true)}}>CHANGE ORDER</button>\r\n                            <Scroll>\r\n                                {listItems}\r\n                            </Scroll>\r\n                        </div>\r\n                    )\r\n                }\r\n            } else {\r\n                return (\r\n                    <div>\r\n                        <Scroll>\r\n                            {listItems}\r\n                        </Scroll>\r\n                    </div>\r\n                )\r\n            }\r\n        default:\r\n            return (\r\n                <Scroll>\r\n                    {listItems}\r\n                </Scroll>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from '../actions';\r\nimport { NEW } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeView: (view) => {\r\n            return dispatch(selectView(view))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItemButton({ changeView }) {\r\n\r\n    return (\r\n        <div className='whiteB w2 h2 flex items-center justify-center' data-view={NEW} onClick={ () => changeView(NEW)}>\r\n            <h1 className=' white b f8 fw9 ma0'>+</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItemButton);","import {TASK, PENDING, MISSION, UNPLANNED, ASAP, UNPROCESSED, INBOX_ITEM, EVENT, REFERENCE, SOMEDAY } from './constants';\r\n\r\nexport class Item{\r\n    constructor(name,description='None') {\r\n        const d= new Date();\r\n\r\n        this.type = INBOX_ITEM;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.description = '';\r\n        this.status = UNPROCESSED;\r\n        this.exp = 5;\r\n        this.isTrashed = false;\r\n        this.trashedDate = \"\";\r\n        this.processedDate = \"\";\r\n\r\n    }\r\n}\r\n\r\nexport class Task{\r\n    constructor(name,outcome, requiredContext, associatedMissionID = 0, dueDate = SOMEDAY, order = 0) {\r\n        const d = new Date();\r\n        this.type = TASK;\r\n        this.id = d.getTime()+Math.ceil(Math.random()*1000);\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.priority = 'NONE';\r\n        this.frequency = 'NONE';\r\n        this.outcomeRecordID = 0;\r\n        this.name = name;\r\n        this.outcome = outcome;\r\n        this.requiredContext = requiredContext;\r\n        this.note = '';\r\n        this.dueDate = dueDate//(new Date()).toISOString().substr(0, 10);\r\n        this.timeRequired = 0;\r\n        this.requirements = '';\r\n        this.associatedMissionID = associatedMissionID;\r\n        this.exp = 20;\r\n        this.details = '';\r\n        this.isTrashed = false;\r\n        this.trashedDate = \"N/A\";\r\n        this.timeSpent = 0;\r\n        this.activeSince = 0;\r\n        this.doneDate = \"N/A\";\r\n        this.order = order;\r\n    }\r\n}\r\n\r\nexport class Mission{\r\n    constructor(outcome ='', purpose ='', dueDate = ASAP, requirements = '', priority, frequency = '' ) {\r\n        const d = new Date();\r\n        this.type = MISSION;        \r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = UNPLANNED;\r\n\r\n        this.name = outcome;\r\n        this.purpose = purpose;\r\n        this.vision = '';\r\n        this.principles = '';\r\n        this.toDo = \"\";\r\n        this.skillsRequired = \"\";\r\n        this.infoRequired = \"\";\r\n        this.abilityRequired = \"\";\r\n        this.dueDate = dueDate //(new Date(parseInt((d.getTime() + 7776000000)))).toISOString().substr(0, 10); // 3 months from the date the MISSION is planned \r\n        this.taskList = [];\r\n\r\n        this.backStory = \"\"\r\n        this.outputRef = 0;\r\n        this.outputRecordUrl = \"\"\r\n        \r\n        this.timeRequired = 7776000000;\r\n        this.timeSpent = 0;\r\n        \r\n        this.requirements = requirements;\r\n        this.priority = priority;\r\n        this.frequency = frequency;\r\n        this.note = '';\r\n        \r\n        this.isTrashed = false;\r\n        this.trashedDate = \"\";\r\n        this.doneDate = \"\";\r\n\r\n        this.exp = 100;\r\n    }\r\n}\r\n\r\nexport class Reference{\r\n    constructor(name, details='') {\r\n        const d= new Date();\r\n        this.type = REFERENCE;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.details = details;\r\n        this.exp = 5;\r\n        this.isTrashed = false;\r\n    }\r\n}\r\n\r\nexport class Event{\r\n    constructor(name, date = new Date().toISOString().substr(0, 10), time = \"\", location ='', frequency = \"\") {\r\n        const d= new Date();\r\n        this.type = EVENT;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.date = date;\r\n        this.time = time;\r\n        this.location = \"\";\r\n        this.frequency = frequency;\r\n        this.exp = 5;\r\n        this.note = \"\";\r\n        this.isTrashed = false;\r\n        this.trashedDate = \"\";\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { ASAP, MISSIONS, NEW, SOMEDAY } from '../constants';\r\nimport { convertDateToMilliseconds, pushChanges } from '../functions';\r\nimport {UpdateExp, ShipItems,ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DatePicker);\r\n\r\nfunction DatePicker({ item, dueDate, db, title, updateFunc, view }){\r\n\r\n    let DbList = ''\r\n    switch (title) {\r\n        case MISSIONS:\r\n\r\n    }\r\n\r\n    // REASSIGN DUE DATE TO FIX \"ASAP\" DATE FORMAT ISSUES\r\n    let dateValue;\r\n    //dueDate === ASAP ? dateValue = new Date().getTime() : dateValue = dueDate;\r\n    dueDate === ASAP ? dateValue = new Date().toISOString().substr(0, 10) : dateValue = dueDate;\r\n\r\n    // CONVERT DATE STRING TO MILLISECONDS\r\n    //const [ date, setDate ] = useState((new Date(dateValue)).toISOString().substr(0, 10));\r\n    const [ date, setDate ] = useState((dateValue));\r\n    const [ changeDate, setChangeDate ] = useState(false);\r\n    const [ isASAP, setIsASAP ] = useState(false);\r\n    const [ isSomeday, setIsSomeday ] = useState(false);\r\n    \r\n    //   let str = \"2020-10-26\";\r\n    //   console.log(prepareDate(str));\r\n\r\n    useEffect(() => {\r\n        //view === NEW ? setChangeDate(true) : setChangeDate(false) ;\r\n        setChangeDate(false)\r\n        // setDate((new Date(dateValue)).toISOString().substr(0, 10));\r\n        setDate((dateValue));\r\n        // setChangeDate(false);\r\n        if (dueDate === ASAP){\r\n            setIsASAP(true)\r\n        } else {\r\n            setIsASAP(false)\r\n        }\r\n    }, [dueDate, ASAP])\r\n\r\n    switch(changeDate){\r\n        case true:\r\n            console.log(\"Current task \", item)\r\n            console.log(\"Current task.dueDate \", dueDate)\r\n            console.log(\"Current date: \", date)\r\n            console.log(\"Current dateValue: \", dateValue)\r\n            return (\r\n                <div>\r\n                    <input type='date' className='fw3 white bn bg-transparent' autoFocus\r\n                    defaultValue={date}\r\n                    onChange={(e)=> {console.log(e.target.value);setDate(e.target.value);} } \r\n                    onBlur={() =>{}} \r\n                    />\r\n                    <div>\r\n                        <button className=\"button\" onClick={() => { \r\n                            updateFunc(ASAP); setIsASAP(true); \r\n                            setChangeDate(false) \r\n                        }}>A.S.A.P</button>\r\n                        <button className=\"button\" onClick={() => { \r\n                            updateFunc(SOMEDAY);\r\n                            setChangeDate(false); setIsSomeday(true) \r\n                        }}>SOMEDAY</button>\r\n                        <button className=\"button\" onClick={() => { \r\n                            //updateFunc(convertDateToMilliseconds(date));\r\n                            updateFunc(date);\r\n                            setChangeDate(false); setIsASAP(false) \r\n                        }}>Save</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            if (isASAP){\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw4 white' onClick={() => setChangeDate(true)}>ASAP</h5>\r\n                    </div>\r\n                    )\r\n            } else if (isSomeday) {\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw4 white' onClick={() => setChangeDate(true)}>SOMEDAY</h5>\r\n                    </div>\r\n                    )\r\n            } else {\r\n                return (\r\n                    <h5 className='fw4 white' onClick={() => setChangeDate(true)}>{date}</h5>\r\n                )\r\n            }\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, TASK, MEDIUM, HIGH, MISSIONS, ADD, DAILY, NONE, SOMEDAY } from '../constants';\r\nimport { selectView, selectItem, ShipItems, ChangeNav, } from '../actions';\r\nimport { Task } from '../classes';\r\nimport { pushChanges } from '../functions';\r\nimport DatePicker from './DatePicker';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewTask({ changeItemID, updateExp, shipItems, itemID, db, changeNav, title }) {\r\n\r\n    const TaskList = db.Tasks;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ details, setDetails ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(SOMEDAY);\r\n    const [ agent, setAgent ] = useState('');\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState('NONE');\r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ associatedMissionID, setAssociatedMissionID ] = useState(itemID);\r\n\r\n    function submitNewItem(event) {\r\n        let t = new Task(name, outcome, requiredContext, associatedMissionID, dueDate);\r\n        console.log(t);\r\n        t.frequency = frequency;\r\n        t.details = details;\r\n        updateExp(5);\r\n        TaskList.unshift(t);\r\n        pushChanges(ADD, t, \"Tasks\", shipItems);\r\n        if(title === MISSIONS){\r\n           addToMissionTasks(t, associatedMissionID);\r\n        }\r\n        //changeItemID(t.id);\r\n        changeNavigation(t.id)\r\n        event.preventDefault();\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav;\r\n        if(title === MISSIONS) {\r\n            nav = {\r\n                title: MISSIONS,\r\n                view: \"DETAILS\",\r\n                ID: itemID\r\n            }\r\n        } else {\r\n            nav = {\r\n                title: title,\r\n                view: \"DETAILS\",\r\n                ID: id\r\n            }\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function addToMissionTasks(task, projID){\r\n        let id = parseInt(projID);\r\n        let content = db.Missions;\r\n        let proj;\r\n        for (let i=0; i<content.length; i++){\r\n            console.log(content[i].id)\r\n            if (content[i].id === id){\r\n                console.log(content[i].id)\r\n\r\n                proj = content[i];\r\n                proj.taskList.unshift(task.id);\r\n\r\n                pushChanges(\"UPDATE\", proj, \"Missions\", shipItems);\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW TASK</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={TASK}>\r\n                <input className='pa2 mb1' type='text' autoFocus placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input  className='pa2 mb1'type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea  className='pa2 mb1' placeholder='Details' value={details} onChange={(e) => setDetails(e.target.value)} />\r\n                <textarea  className='pa2 mb1' placeholder='Required Context' value={requiredContext} onChange={(e) => setRequiredContext(e.target.value)} />\r\n                {/* <label className='fw4 white' htmlFor=\"due date\" >Due Date:</label> */}\r\n                <DatePicker item={{}} dueDate={dueDate} updateFunc={setDueDate} />\r\n                {/* <input className='pa2 mb1' id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} /> */}\r\n                <select className='pa2 mb1' id=\"priority\" value={frequency} onChange={(e)=> setFrequency(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Frequency</option>\r\n                    <option value={NONE}>ONE-TIME</option>\r\n                    <option value={DAILY}>DAILY</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                <input className='pa2 mb1' type='text' placeholder='Assigned Agent' value={agent} onChange={(e)=> setAgent(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated Mission name' value={associatedMission} onChange={(e) => setAssociatedMission(e.target.value)} /> */}\r\n                <input className='pa2 mb1' type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, MEDIUM, HIGH, MISSION, ADD, MISSIONS, DETAILS, SOMEDAY } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { Mission } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\nimport DatePicker from './DatePicker';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewMission({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const MissionsList = db.Missions;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ purpose, setPurpose ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ details, setDetails ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(SOMEDAY);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ requirements, setRequirements ] = useState('');\r\n\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let m = new Mission(outcome.trim(), purpose, dueDate, requirements, priority);\r\n        console.log(m);\r\n        MissionsList.unshift(m);\r\n        pushChanges(ADD, m, \"Missions\", shipItems);\r\n        updateExp(5);\r\n        event.preventDefault();\r\n        //console.log(m)\r\n\r\n        const nav = {\r\n            title: MISSIONS,\r\n            view: DETAILS,\r\n            ID: m.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW MISSION</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={MISSION}>\r\n                {/* <input className='pa2 mb1' autoFocus type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} /> */}\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea className='pa2 mb1' placeholder='Details' value={details} onChange={(e) => setDetails(e.target.value)} />\r\n                <textarea className='pa2 mb1' placeholder='What is the purpose of the mission?' value={purpose} onChange={(e) => setPurpose(e.target.value)} />\r\n                {/* <label className='fw4 white' htmlFor=\"due date\" >Due Date:</label>\r\n                <input className='pa2 mb1' id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} /> */}\r\n                <DatePicker item={{}} dueDate={dueDate} updateFunc={setDueDate} />\r\n                <select className='pa2 mb1' id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated MISSION name' value={associatedMISSION} onChange={(e) => setAssociatedMISSION(e.target.value)} /> */}\r\n                <input className='pa2 mb1'type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMission);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ADD, DETAILS, REFERENCES, REFERENCE } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { Reference } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewReference({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const References = db.References;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ details, setDetails ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let r = new Reference(name, details );\r\n        console.log(r);\r\n        //References.unshift(r);\r\n        pushChanges(ADD, r, \"References\", shipItems);\r\n        updateExp(5);\r\n        event.preventDefault();\r\n\r\n        const nav = {\r\n            title: REFERENCES,\r\n            view: DETAILS,\r\n            ID: r.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW REFERENCE</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={REFERENCE}>\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Name' value={name} onChange={(e) => setName(e.target.value)} />\r\n                <textarea className='pa2 mb1' placeholder='Details' value={details} onChange={(e) => setDetails(e.target.value)} />\r\n                <input className='pa2 mb1'type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewReference);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ADD, DAILY, DETAILS, EVENTS, MONTHLY, NONE, WEEKLY, YEARLY } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport {  Event } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewEvent({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const Events = db.Events;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ date, setDate ] = useState(today);\r\n    const [ time, setTime ] = useState(\"\");\r\n    const [ location, setLocation ] = useState(\"\");\r\n    const [ frequency, setFrequency ] = useState(\"\");\r\n    const [ note, setNote ] = useState('');\r\n\r\n\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let e = new Event( name, date, time, location, frequency );\r\n        console.log(e);\r\n        //Events.unshift(e);\r\n        pushChanges(ADD, e, \"Events\", shipItems);\r\n        updateExp(5);\r\n        event.preventDefault();\r\n\r\n        const nav = {\r\n            title: EVENTS,\r\n            view: DETAILS,\r\n            ID: e.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW EVENT</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={EVENTS}>\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Name' value={name} onChange={(e) => setName(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"date\" >Date:</label>\r\n                <input className='pa2 mb1' id='date' type='date' min={today} value={date} onChange={(e) => setDate(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"time\" >Time:</label>\r\n                <input className='pa2 mb1' id='time' type='time' value={time} onChange={(e) => {setTime(e.target.value); console.log(time)}} />\r\n                <label className='fw4 white' htmlFor=\"location\" >Location:</label>\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Location' value={location} onChange={(e) => setLocation(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"frequency\" >Frequency:</label>\r\n                <select className='pa2 mb1' id=\"priority\" value={frequency} onChange={(e)=> setFrequency(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Frequency</option>\r\n                    <option value={NONE}>ONE-TIME</option>\r\n                    <option value={DAILY}>DAILY</option>\r\n                    <option value={WEEKLY}>WEEKLY</option>\r\n                    <option value={MONTHLY}>MONTHLY</option>\r\n                    <option value={YEARLY}>YEARLY</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <input className='pa2 mb1'type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewEvent);","import React, { useState } from 'react';\r\nimport { INBOX, MISSIONS, TASKS, DETAILS, REFERENCES, EVENTS, REFERENCE, ADD, CALENDAR } from '../constants';\r\nimport { Item } from '../classes';\r\nimport NewTask from './NewTask';\r\nimport NewMission from './NewMission';\r\nimport { selectItem, ShipItems, selectTitle, ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport NewReference from './NewReference';\r\nimport NewEvent from './NewEvent';\r\nimport { amendList } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        exp: state.UpdateExpReducer.exp\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItem({ submitFunction, title, updateExp, changeItemID, shipItems, db, changeTitle, itemID, changeNav, exp }) {\r\n\r\n    // const [ type, setType ] = useState(title);\r\n    const [ name, setName ] = useState('Enter item name');\r\n    \r\n    const InboxItems = db.Inbox;\r\n    //console.log(InboxItems);\r\n\r\n    function reset(){\r\n        //changeTitle(INBOX);\r\n        setName('Enter item name');\r\n        // setDescription('');\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        if(name !== 'Enter item name' && name !== '' ){\r\n            let i = new Item(name);\r\n            // InboxItems.unshift(i);\r\n            // pushChanges(\"ADD\", i, \"Inbox\");\r\n            updateExp(5);\r\n            amendList(db, INBOX, i, ADD, shipItems)\r\n            changeNavigation(i.id);\r\n            //submitFunction(event);\r\n            reset();\r\n            event.preventDefault();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav = {\r\n                title: INBOX,\r\n                view: DETAILS,\r\n                ID: id\r\n            }\r\n        changeNav(nav);\r\n    }\r\n    \r\n    function displayTypeForm(){\r\n        switch(true) {\r\n            case title === TASKS:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === MISSIONS && parseInt(itemID) === 0:\r\n                return <NewMission updateExp={updateExp} />\r\n            case title === MISSIONS && parseInt(itemID) !== 0:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === REFERENCES:\r\n                return <NewReference updateExp={updateExp} />\r\n            case title === CALENDAR:\r\n                return <NewEvent updateExp={updateExp} />\r\n            case title === EVENTS:\r\n                return <NewEvent updateExp={updateExp} />\r\n            default:\r\n                return (\r\n                    <div className='h-100 w-100 center ba b--black-10 '>\r\n                        <h1 className='tc gold b'>NEW ITEM</h1>\r\n                        <form onSubmit={submitNewItem} className='flex flex-column' title={INBOX}>\r\n                            <input className='pa2 mb2' type='text' autoFocus onChange={(e)=> setName(e.target.value)} placeholder='Enter item name...'  />\r\n                            {/* <textarea value={description} onChange={(e) => setDescription(e.target.value)} /> */}\r\n                            <input className='pa2 mb1' type='submit' value='submit' />\r\n                        </form>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='pa1 w-100'>\r\n            <div className='pa1 w-100 flex justify-center'>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(INBOX)}>INBOX</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(TASKS)}>TASK</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(MISSIONS)}>MISSION</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(REFERENCES)}>REFERENCE</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(EVENTS)}>EVENT</button>\r\n                {/* <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>REF</button>\r\n                <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>FINANCE</button> */}\r\n            </div>\r\n                {displayTypeForm()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);","import React from 'react';\r\n\r\nexport default function QuestionAndOptions({ question, yes, no }) {\r\n    return (\r\n        <div className='h-100 w-100 br1 pa3 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <div>\r\n                <button className=\"button\" onClick={yes}>YES</button>\r\n                <button className=\"button\" onClick={no} >NO</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function QuestionandInput({ question, submitFunction }) {\r\n\r\n    const [ answer, setAnswer ] = useState('');\r\n\r\n    function submit(event) {\r\n\r\n        if(answer !==''){\r\n            submitFunction(answer);\r\n            setAnswer('');\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <form onSubmit={submit}>\r\n                <input type='text'  autoFocus value={answer} onChange={(e)=> setAnswer(e.target.value)} />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}","export const ReferenceList = []","import React from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, UpdateTaskStatus, SetActiveTask, ShipItems, ChangeNav } from '../actions';\r\nimport { DONE, ACTIVE, PAUSED, PENDING, UPDATE, ADD, REMOVE, COMPLETED } from '../constants';\r\nimport { pushChanges  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timerOn: state.SetActiveTaskReducer.timerOn,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskControls);\r\n\r\nfunction TaskControls({ task, position, changeNav, updateExp, changeItemID, setActiveTask, activeSince, activeTask, shipItems, db, timerOn }){\r\n\r\n    if( task.status === ACTIVE && timerOn === false){\r\n        startTimer();\r\n        console.log(\"Timer is off\")\r\n    }\r\n\r\n    function updateTask(){\r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n    }\r\n    \r\n    let prevTimeSpent = parseInt(task.timeSpent);\r\n    //console.log(\"on entering task cont, prevtime: \", prevTimeSpent)\r\n    function startTimer(){\r\n        task.status = ACTIVE;\r\n        if (task.activeSince === 0 ){\r\n            task.activeSince = new Date().getTime();\r\n        }\r\n        setActiveTask(task);\r\n        updateTask();\r\n    }\r\n\r\n    function pauseTask(){\r\n        const dateNow = new Date().getTime();\r\n        task.timeSpent = prevTimeSpent + (dateNow - parseInt(activeSince));\r\n        setActiveTask({});\r\n        task.status = PAUSED;\r\n        task.activeSince = 0;\r\n        timerOn = false;\r\n        updateTask();\r\n        //console.log(\"previos time spent:, \", prevTimeSpent)\r\n        //console.log(\"time spent:, \", task.timeSpent)\r\n    }\r\n\r\n    function markAsDone(){\r\n        const dateNow = new Date().toISOString().substr(0, 10);\r\n        task.doneDate = dateNow;\r\n        if (task.status === ACTIVE) {\r\n            pauseTask();\r\n        }\r\n        task.status = DONE;\r\n        //console.log(\"timespent from task controls: \", prevTimeSpent)\r\n        //parseInt(prevTimeSpent) === 0 ? task.timeSpent = 0 : task.timeSpent = prevTimeSpent + (dateNow - parseInt(activeSince));\r\n        //console.log(\"timespent from task controls after: \", task.timeSpent)\r\n        setActiveTask({});\r\n        updateExp(task.exp);\r\n        updateTask();\r\n        //db.Completed.unshift(task);\r\n        //pushChanges(ADD, task, \"Completed\", shipItems);\r\n        //db.Tasks.splice(position,1);\r\n        //pushChanges(REMOVE, task, \"Tasks\", shipItems);\r\n        const nav = {\r\n            title: COMPLETED,\r\n            view: \"DETAILS\",\r\n            ID: task.id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    \r\n\r\n    switch(task.status){\r\n        case ACTIVE:\r\n            //console.log(activeTask.id === true)\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={pauseTask}>PAUSE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PAUSED:\r\n            if (activeTask.id === undefined){\r\n\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>CONTINUE</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            }\r\n        case PENDING:\r\n            //console.log(typeof activeTask)\r\n            //console.log(activeTask.id)\r\n            if(activeTask.id === undefined) {\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                    </div>)\r\n            }   \r\n        default:\r\n            return <div></div>\r\n    }\r\n    // Different controls are displayed based on if a task is ongoing\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport QuestionAndOptions from '../components/QuestionAndOptions';\r\nimport QuestionandInput from '../components/QuestionAndInput';\r\nimport { Task, Mission, Reference, Event } from '../classes';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport {  PROCESSED, TASK, PENDING, UNPROCESSED, REFERENCE, ADD, UPDATE, REMOVE, REFERENCES, SOMEDAY, MISSIONS, TASKS, DETAILS, EVENTS, INBOX } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport DatePicker from '../components/DatePicker';\r\nimport { pushChanges  } from '../functions';\r\nimport TaskControls from '../components/TaskControls';\r\n\r\n\r\n//shipItems(items, agent, record)\r\n//\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Processor({ nextItemID, item, touchFunction, changeItemID, itemIndex, db, shipItems, changeNav }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const MissionList = db.Missions;\r\n    const TaskList = db.Tasks;\r\n    const SomedayList = db.Someday;\r\n    const References = db.References;\r\n    const Events = db.Events;\r\n\r\n    \r\n\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ isActionable, setIsActionable ] = useState(null);\r\n    const [ isMultistep, setIsMultistep ] = useState(null);\r\n    const [ isDoneInFive, setIsDoneInFive ] = useState(null);\r\n    const [ isDelegatable, setIsDelegatable ] = useState(null);\r\n    const [ step, setStep ] = useState(0);\r\n    const [ nextID, setNextID ] = useState(0);\r\n    const [ isDoneInaYear, setIsDoneInaYear ] = useState(null);\r\n    const [ newMissionID, setNewMissionID ] = useState(0);\r\n    const [ newTaskID, setNewTaskID ] = useState(0);\r\n    const [ newMission, setNewMission ] = useState(null);\r\n    const [ newTask, setNewTask ] = useState(null);\r\n    const [ assignedAgent, setAssignedAgent ] = useState(null);\r\n    const [ dueDate, setDueDate ] = useState(null);\r\n    const [ trashed, setTrashed ] = useState(false);\r\n    const [ incubated, setIncubated ] = useState(false);\r\n    const [ referenced, setReferenced ] = useState(false);\r\n    const [ newReference, setNewReference ] = useState(null);\r\n    const [ refDetails, setRefDetails ] = useState('');\r\n    const [ newEvent, setNewEvent ] = useState(null);\r\n\r\n\r\n    function makeNewMission(){\r\n        let proj = new Mission( outcome );\r\n        setNewMission(proj);\r\n        setNewMissionID(proj.id);\r\n        //MissionList.unshift(proj);\r\n        // pushChanges(ADD, proj, \"Missions\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(proj.id);\r\n    }\r\n\r\n    function makeNewTask(name){\r\n        let asProjID;\r\n        let theOutcome = outcome;\r\n        if (isMultistep === true) {\r\n            theOutcome = '';\r\n            asProjID = newMissionID;\r\n        }\r\n\r\n        let task = new Task(name, theOutcome, requiredContext, asProjID);\r\n        setNewTask(task);\r\n        console.log(\"new task = \",task);\r\n        updateStatus();\r\n        setNextID(task.id);  \r\n\r\n        //ADD TASK TO TASK LIST AND \r\n        //TaskList.unshift(task);\r\n        //pushChanges(ADD, task, \"Tasks\", shipItems);\r\n\r\n        // InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNewTaskID(task.id);  \r\n    }\r\n\r\n    function makeNewReference(name){ \r\n\r\n        let ref = new Reference(name);\r\n        setNewReference(ref);\r\n        console.log(\"new ref = \", ref);\r\n        setNextID(ref.id); \r\n\r\n    }\r\n\r\n    function makeNewEvent(name){ \r\n\r\n        let ev = new Event(name);\r\n        setNewEvent(ev);\r\n        console.log(\"new event = \", ev);\r\n        setNextID(ev.id); \r\n\r\n    }\r\n\r\n    function amendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case MissionList:\r\n                dbList = \"Missions\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case References:\r\n                dbList = \"References\"\r\n            break;\r\n            case Events:\r\n                dbList = \"Events\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                //list.splice(itemndx, 1);\r\n                //pushChanges(REMOVE, item, dbList, shipItems);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                //pushChanges(ADD, item, dbList, shipItems);\r\n            break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    function updateStatus() {\r\n        item.status = PROCESSED;\r\n        item.processedDate = new Date().toISOString().substr(0, 10);\r\n        pushChanges(UPDATE, item, \"Inbox\", shipItems);\r\n    }\r\n    \r\n    function processNextItem(e){\r\n        setStep(0);\r\n        //touchFunction(e);\r\n        let nav = { \r\n            title: INBOX,\r\n            view: DETAILS,\r\n            ID: nextItemID\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    function proceed() {\r\n        setStep((step+1));\r\n    }\r\n\r\n    function refresh(){\r\n        changeItemID(item.id);\r\n    }\r\n\r\n    \r\n    if (item.status === UNPROCESSED && step === 0){\r\n        proceed();\r\n    }\r\n\r\n    let nav;\r\n    if (isMultistep){\r\n        nav = {\r\n            title: MISSIONS,\r\n            view: DETAILS,\r\n            ID: newMission.id\r\n        }\r\n    } else if(isMultistep === false && step >4){\r\n        nav = {\r\n            title: TASKS,\r\n            view: DETAILS,\r\n            ID: newTask.id\r\n        }\r\n    }\r\n\r\n    function viewNewReference(id) {\r\n        nav = {\r\n            title: REFERENCES,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function viewNewEvent(id) {\r\n        nav = {\r\n            title: EVENTS,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    function saveDate(date){\r\n        //updateDB( mission, \"dueDate\", date )\r\n\r\n    }\r\n\r\n    switch(true) {\r\n        case ( step === 1 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Is this Actionable?' \r\n                    yes={() => { setIsActionable(true); proceed() }} \r\n                    no={() => { setIsActionable(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={() => { setReferenced(true); makeNewReference(item.name); proceed() }} >ADD TO REFERENCES</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => { setIncubated(true); makeNewEvent(item.name); proceed() }} >ADD TO EVENTS</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => { setTrashed(true); trashItem(); proceed() }} >TRASH</button> */}\r\n                </div>\r\n            )\r\n        case ( trashed === true && step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>Item has been trashed</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 3 && referenced === true ):\r\n            //\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n                    <h2 className='white tc pb2'>Any details to add?</h2>\r\n                    <form onSubmit={(e) => { \r\n                        newReference.details = refDetails; \r\n                        console.log(newReference); \r\n                        pushChanges(UPDATE, newReference, \"References\", shipItems);\r\n                        updateStatus(); \r\n                        e.preventDefault(); \r\n                        proceed() \r\n                    }}>\r\n                        <textarea rows=\"4\" cols=\"45\" autoFocus value={refDetails} onChange={(e)=> setRefDetails(e.target.value)} />\r\n                        <input type='submit' value='submit' />\r\n                    </form>\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 3 && incubated === true ):\r\n            function saveEventDate(date){\r\n                newEvent.date = date;\r\n            }\r\n        \r\n        return (\r\n            <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n                <h2 className='white tc pb2'>Date of Event?</h2>\r\n                <DatePicker item={newEvent} dueDate={newEvent.date} updateFunc={saveEventDate}/>\r\n                <div>\r\n                    <button className=\"button\" onClick={() => { \r\n                        pushChanges(ADD, newEvent, \"Events\", shipItems);\r\n                        amendList(ADD, Events, newEvent, 0); \r\n                        updateStatus(); \r\n                        proceed(); \r\n                    }} >CONTINUE</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n        case ( isActionable === false && step === 4 ):\r\n            if (referenced === true ) {}\r\n            if (incubated === true ) {;}\r\n            // Added to references\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>Item has been processed</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => {\r\n                        referenced === true ? viewNewReference(nextID) : viewNewEvent(nextID)\r\n                    }} >VIEW ITEM</button>\r\n                </div>\r\n            )\r\n        case ( isActionable === true && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the desired outcome?\" submitFunction={(answer) => { setOutcome(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the outcome be reached with just one task?' \r\n                    yes={() => { setIsMultistep(false); proceed(); } } \r\n                    no={() => { setIsMultistep(true); proceed();  makeNewMission(); }} />\r\n                </div>\r\n            )\r\n            \r\n        case ( isMultistep === false && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the task?\" \r\n                    submitFunction={(answer) => {\r\n                        makeNewTask(answer);\r\n                        proceed(); \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the first task?\" \r\n                    submitFunction={(answer) => { \r\n                        makeNewTask(answer); \r\n                        proceed(); \r\n                        }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { \r\n                        setIsDoneInaYear(true); \r\n                        newMission.taskList.unshift(newTask.id);\r\n                        pushChanges(ADD, newMission, \"Missions\", shipItems);\r\n                        amendList(ADD, MissionList, newMission, 0); proceed() \r\n                    }} \r\n                    no={() => { \r\n                        newMission.taskList.unshift(newTask.id); \r\n                        amendList(ADD, SomedayList, newMission, 0);\r\n                        setIsDoneInaYear(false); \r\n                        updateStatus(); \r\n                        proceed();\r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 5 ):\r\n            // console.log(\"step 5. new task: \", newTask);\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { setIsDoneInaYear(true); proceed() }} \r\n                    no={() => { amendList(ADD, SomedayList, newTask, 0); setIsDoneInaYear(false); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === true ):\r\n            // New mission was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW MISSION</button>\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === false ):\r\n            // New mission was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW MISSION</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === false ):\r\n            // New mission was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Task has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW MISSION</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === true ):\r\n            console.log(\"step 5. new task: \", newTask);\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can it be done now in 5 minutes or less?' \r\n                    yes={() => { setIsDoneInFive(true); pushChanges(ADD, newTask, \"Tasks\", shipItems); amendList(ADD, TaskList, newTask, 0); proceed() }} \r\n                    no={() => { setIsDoneInFive(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case (isDoneInFive === true && step === 7):\r\n            console.log(\"new tasklKST:\", TaskList)\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h2 className='fw8 b white pb2'>LET'S DO IT!</h2>\r\n                    <div className='w-100 pa2 pb3' >\r\n                        <h3 className='fw7 b white pb2'>{newTask.name}</h3>\r\n                    </div>\r\n                    <button className=\"button\" onClick={() => { updateStatus();  changeNav(nav) }} >GO TO TASK </button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button> */}\r\n                </div>\r\n            )\r\n        case ( isDoneInFive === false && step === 7 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can this task be delegated?' \r\n                    yes={() => { setIsDelegatable(true); proceed(); }} \r\n                    no={() => { setIsDelegatable(false); proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === true && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Who would you like to assign this task to?\" \r\n                    submitFunction={(answer) => { setAssignedAgent(answer); newTask.agent = assignedAgent; proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 8 ):\r\n            function saveTaskDate(date){\r\n                //updateDB( mission, \"dueDate\", date )\r\n                newTask.dueDate = date;\r\n            }\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h2 className='fw4 white'>By when should this task to be done</h2>\r\n                    <DatePicker item={newTask} dueDate={newTask.dueDate} updateFunc={saveTaskDate} />\r\n                    <div>\r\n                        {/* <button className=\"button\" onClick={() => { setDueDate(\"ASAP\"); console.log(newTask); proceed(); }}>ASAP</button> */}\r\n                        <button className=\"button\" onClick={() => { setDueDate(newTask.dueDate); console.log(newTask); proceed(); }} >CONTINUE</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 9 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Where should this task be done?\" \r\n                    submitFunction={(answer) => { \r\n                        setRequiredContext(answer); \r\n                        newTask.requiredContext = answer;\r\n                        pushChanges(ADD, newTask, \"Tasks\", shipItems)\r\n                        amendList(ADD, TaskList, newTask, 0);\r\n                        \r\n                        proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( step === 10 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show flex items-center flex-column' >\r\n                    <h3 className='white tc pb2'>A new Task has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={ processNextItem } >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Processor);","import React from 'react';\r\n\r\nexport default function PrevItemButton({ selectAnother, prevID, currentID }){\r\n\r\n    if(parseInt(currentID) !== prevID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(prevID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NextItemButton({ selectAnother, nextID, currentID }){\r\n    \r\n    if(parseInt(currentID) !== nextID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(nextID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Processor from '../containers/Processor'\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport NewItemButton from '../components/NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        db: state.items.record.items//state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nfunction ItemDetails({ id, touchFunction, selectAnother, prevID, nextID, db }) {\r\n\r\n\r\n    // NOTE: PREV AND NEXT BUTTONS INCLUDED HERE SO THEY ARE HIDDEN DURING PROCESSING\r\n    const InboxItems = db.Inbox\r\n\r\n    const [ readyToProcess, setReadyToProcess ] = useState(false);\r\n\r\n    let item = {};\r\n    let nextItemID = null;\r\n    let indx;\r\n    for (let i=0; i<InboxItems.length; i++){\r\n\r\n        if (InboxItems[i].id === id){\r\n           item = InboxItems[i];\r\n           indx = i;\r\n           if (InboxItems[i+1]) {\r\n               nextItemID = InboxItems[i+1].id;\r\n           } else {\r\n            nextItemID = 0;\r\n           }\r\n           break;\r\n        }    \r\n    }\r\n\r\n    console.log(item);\r\n\r\n    if (item.name) {\r\n        switch(readyToProcess){\r\n        case false:\r\n            return (\r\n                <div className='h-100' >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                        <button onClick={()=> setReadyToProcess(true)} >PROCESS THIS</button>\r\n                    </div>\r\n                    <NewItemButton />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prevID} currentID={id} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={nextID} currentID={id} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    <br />\r\n                    <Processor item={item} nextItemID={nextItemID} touchFunction={touchFunction} itemIndex={indx} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n\r\nfunction Timer({ timeSpent, task, activeTask, activeSince, timeNow }){\r\n\r\n\r\n    if (task.id === parseInt(activeTask.id) ){\r\n        const dateNow = (new Date()).getTime();\r\n        timeSpent = timeSpent + (dateNow - activeSince);\r\n    }\r\n    //console.log('time spent = '+timeSpent)\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n    \r\n\r\n    // let totalTimeSpent = (seconds*1000)+(minutes*60*1000)+(hours*3600*1000); //Time spent in milliseconds\r\n\r\n\r\n\r\n    // function reset() {\r\n    //     setSeconds(0);\r\n    //     setminutes(0);\r\n    //     sethours(0);\r\n    //     setIsActive(false);\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        setSeconds(secs);\r\n        setminutes(mins);\r\n        sethours(hrs);\r\n        if (task.id !== parseInt(activeTask.id) ){\r\n            setIsUpdated(false);\r\n            setIsActive(false)\r\n        }\r\n    },[ secs, mins, hrs, activeTask.timeSpent, activeTask.id, activeSince, task.id ])\r\n\r\n\r\n    if( (task.id === parseInt(activeTask.id)) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive && (task.id === parseInt(activeTask.id)) ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        \r\n        return () => clearInterval(interval);\r\n        \r\n    }, [ isActive, seconds, minutes, hours, isUpdated, activeTask.id, task.id ]);\r\n\r\n\r\n    switch(task.id){\r\n        case activeTask.id:\r\n            return (\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: \r\n                        <span className='fw3 yellow b'> {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} \r\n                        </span>\r\n                    </h5>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h5>\r\n                </div>\r\n                {/* <div className=\"\">\r\n                    <button className='' onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n                    <button className='' onClick={reset}>Reset</button>\r\n                </div> */}\r\n                </div>\r\n            );\r\n    }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, UpdateTaskStatus, ShipItems,ChangeNav } from '../actions';\r\nimport DatePicker from './DatePicker';\r\nimport Timer from './Timer';\r\nimport TaskControls from './TaskControls';\r\nimport { amendList  } from '../functions';\r\nimport { COMPLETED, DETAILS, DONE, MISSIONS, SOMEDAY, TASKS, UPDATE } from '../constants';\r\nimport Scroll from './Scroll';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);\r\n\r\n\r\nfunction TaskDetails({ id , title, updateExp, activeSince, activeTask, db, shipItems, changeNav, exp }) {\r\n\r\n    const MissionsList = db.Missions;\r\n    const tasks = db.Tasks;\r\n    let task = {};\r\n    let position, relevantList;\r\n\r\n    title === SOMEDAY ? relevantList = db.Tasks.concat(db.Missions) : relevantList = tasks;\r\n\r\n    for (let i=0; i<relevantList.length; i++){\r\n\r\n        if (relevantList[i].id === id){\r\n           task = relevantList[i];\r\n           position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n    let associatedMission = {};\r\n    if(task.associatedMissionID === 0){\r\n        associatedMission.name = \"Getting Things Done\";\r\n    } else if (task.associatedMissionID > 0){\r\n        for(let i=0; i<MissionsList.length; i++){\r\n            if(parseInt(task.associatedMissionID) === parseInt(MissionsList[i].id)){\r\n                associatedMission = MissionsList[i];\r\n                //console.log('associated project name: ', associatedMission.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const [ name, setName ] = useState(task.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(task.requiredContext);\r\n    const [ outcome, setoutcome ] = useState(task.outcome);\r\n    const [ dueDate, setdueDate ] = useState(task.dueDate);\r\n  //  const [ timeRequired, settimeRequired ] = useState(task.timeRequired);\r\n    const [ note, setnote ] = useState(task.note);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n\r\n    useEffect(() => {\r\n        setName(task.name);\r\n        setrequiredContext(task.requiredContext);\r\n        setoutcome(task.outcome);\r\n        setnote(task.note);\r\n        setdueDate(task.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [task.name, task.requiredContext, task.outcome, task.note, task.dueDate, task.timeSpent, activeSince, activeTask, task.id, db.lastUpdated ])\r\n\r\n\r\n    \r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, TASKS, task, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n    \r\n    }\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n\r\n    function saveDate(date){\r\n        updateDB( task, \"dueDate\", date )\r\n    }\r\n\r\n    switch (title){\r\n        case COMPLETED:\r\n            \r\n        default:\r\n            //console.log(\"From task details: \", task)\r\n            return (\r\n                <div className='h-100' >\r\n                    <Scroll>\r\n                        <div className='w-100 pb3' >\r\n                            {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                            <h4 className='fw1 white'>{task.requiredContext}</h4> */}\r\n        \r\n                            <textarea rows=\"2\" cols=\"30\" wrap='hard' \r\n                            onChange={(e)=> {setName(e.target.value);} } \r\n                            onBlur={() => { updateDB(task, \"name\", name ) } } \r\n                            value={name} className='bn fw9 b white bg-transparent pa1' />\r\n        \r\n                            <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(task, \"requiredContext\", requiredContext ) }} \r\n                                value={requiredContext} className='fw1 white bn bg-transparent' />\r\n                            \r\n                        </div>\r\n        \r\n                        <div className='w-100 pb3'>\r\n                            <h5 className='fw3 white'>Mission: </h5>\r\n                            <h4 className='fw5 white' onClick={() => {\r\n                                if(task.associatedMissionID != 0){changeNavigation(task.associatedMissionID, MISSIONS)}}} >{associatedMission.name}</h4>\r\n                        </div>\r\n        \r\n                        <div className='w-100 pb3'>\r\n                            <h5 className='fw3 white'>Outcome: </h5>\r\n                            {/* <h5 className='fw3 white'>{task.outcome} </h5> */}\r\n                            <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setoutcome(e.target.value);} } onBlur={() =>{ updateDB(task, \"outcome\", outcome ) }} value={outcome} className='w-80 fw3 white bn bg-transparent' />\r\n                        </div>\r\n                        <div className='w-100 pb3 flex justify-between'>\r\n                            <Timer timeSpent={task.timeSpent} task={task} />\r\n                            {/* <input type='date' defaultValue={dueDate} onChange={(e)=> {setdueDate(e.target.value);} } onBlur={() =>task.dueDate=dueDate} className='fw3 white bn bg-transparent' /> */}\r\n                        </div>\r\n                        <h5 className='fw3 white'>DUE:</h5>\r\n                        <DatePicker item={task} dueDate={dueDate} updateFunc={saveDate} />\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>                    \r\n                            {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                            <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                        </div>\r\n                        <div className='pb2'>\r\n                            <h5 className='bb b--white pb2 fw3 white b' >NOTE</h5>\r\n                            <div className='pa2'>\r\n                                {/* <p className='fw3 white'>{task.note}</p> */}\r\n                                <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setnote(e.target.value);} } onBlur={ () =>{ updateDB(task, \"note\", note )}} value={note} className='fw3 white bn bg-transparent' />\r\n                            </div>\r\n                        </div>\r\n                        <h5 className='fw3 white'>Status: {task.status}</h5>\r\n                    </Scroll>\r\n                        <TaskControls task={task} position={position} />\r\n                </div>\r\n            );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport List from './List';\r\nimport { ADD, ASAP, MISSION, MISSIONS, TASKS, UNPLANNED, PENDING } from '../constants';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, RestorePreviousState, ShipItems } from '../actions';\r\nimport { displayDays, amendList, pushChanges  } from '../functions';\r\nimport { UPDATE } from '../constants';\r\nimport DatePicker from './DatePicker';\r\nimport NewItemButton from './NewItemButton';\r\nimport Scroll from './Scroll';\r\nimport { Task } from '../classes';\r\nimport { set } from 'mongoose';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nfunction MissionDetails({ mission, view, changeItemID, db, shipItems, exp }) {\r\n\r\n    const TaskList = db.Tasks.concat(db.Completed);\r\n    let tasks = [];\r\n\r\n    function passKey(e) {\r\n        //Takes the events target and checks for title attribute \r\n        //If no title attribute, check parent node for title attribute\r\n        //If not found, repeat step 2\r\n        let targ = e.target;\r\n        checkForID(targ);\r\n        function checkForID (t) {\r\n            if (t.id) {\r\n                changeItemID(t.id);\r\n            } else {\r\n                t = t.parentNode;\r\n                checkForID (t);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTasks(){\r\n        \r\n        //console.log(\"from get tasks \", mission)\r\n        if(mission.taskList !== []){\r\n            for(let i=0; i<mission.taskList.length; i++){\r\n                for(let j=0; j<TaskList.length; j++){\r\n                    if(mission.taskList[i] === TaskList[j].id ){\r\n                        tasks.push(TaskList[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //console.log(tasks);\r\n        return tasks.sort((a,b) => a.order - b.order);\r\n    }\r\n\r\n    const missionTasks = getTasks();\r\n\r\n    const [ name, setName ] = useState(mission.name);\r\n    const [ purpose, setPurpose ] = useState(mission.purpose);\r\n    const [ vision, setVision ] = useState(mission.vision);\r\n    const [ principles, setPrinciples ] = useState(mission.principles);\r\n    const [ toDo, setToDo ] = useState(mission.toDo);\r\n    const [ skillsRequired, setSkillsRequired ] = useState(mission.skillsRequired);\r\n    const [ infoRequired, setInfoRequired ] = useState(mission.infoRequired);\r\n    const [ abilityRequired, setAbilityRequired ] = useState(mission.abilityRequired);\r\n    const [ dueDate, setDueDate ] = useState(mission.dueDate);\r\n    \r\n    const [ backStory, setBackStory ] = useState(mission.backStory);\r\n    const [ outputRef, setOutputRef ] = useState(mission.outputRef);\r\n    const [ outputRecordUrl, setOutputRecordUrl ] = useState(mission.outputRecordUrl);\r\n\r\n    const [ timeRequired, setTimeRequired ] = useState(mission.timeRequired);\r\n    const [ timeSpent, setTimeSpent] = useState(db.timeSpent);\r\n    \r\n    \r\n    const [ requirements, setRequirements ] = useState(mission.requirements);\r\n    const [ priority, setPriority ] = useState(mission.priority);\r\n    const [ frequency, setFrequency ] = useState(mission.frequency);\r\n    const [ note, setDetails ] = useState(mission.note);    \r\n    \r\n    const [ openPlanner, setOpenPlanner ] = useState(false);\r\n    const [ lastUpdated, setLastUpdated ] = useState(db.lastUpdated);\r\n    const [ showTasks, setShowTasks ] = useState(false);\r\n\r\n    const [ status, setStatus ] = useState(mission.status);\r\n\r\n    const [ taskList, setTaskList ] = useState(mission.taskList);\r\n\r\n\r\n    //purpose, principles, description, components, skillsRequired, infoRequired, abilityRequired, timeRequired, tasks\r\n\r\n    useEffect(() => {\r\n        setName(mission.name);\r\n        setPurpose(mission.purpose);\r\n        setVision(mission.vision);\r\n        setPrinciples(mission.principles);\r\n        setToDo(mission.toDo);\r\n        setSkillsRequired(mission.skillsRequired);\r\n        setInfoRequired(mission.infoRequired);\r\n        setAbilityRequired(mission.abilityRequired);\r\n        setDueDate(mission.dueDate);\r\n        setBackStory(mission.backStory);\r\n        setOutputRef(mission.outputRef);\r\n        setOutputRecordUrl(mission.outputRecordUrl);\r\n\r\n        setTimeRequired(mission.timeRequired);\r\n        setLastUpdated(db.lastUpdated);\r\n        \r\n        setRequirements(mission.requirements);\r\n        setPriority(mission.priority);\r\n        setFrequency(mission.frequency);\r\n        setDetails(mission.note);    \r\n\r\n        setTimeSpent(mission.timeSpent);\r\n        //setShowTasks(false);\r\n        setTaskList(mission.taskList);\r\n        setStatus(mission.status)\r\n    }, [mission.name, mission.purpose, mission.vision, mission.principles, mission.timeRequired, \r\n        mission.toDo, mission.skillsRequired, mission.infoRequired, mission.abilityRequired,\r\n        mission.dueDate, mission.backStory, mission.outputRef, mission.outputRecordUrl, \r\n        mission.timeRequired, db.lastUpdated, mission.requirements, mission.priority,\r\n        mission.frequency, mission.note, mission.timeSpent, mission.taskList, mission.status])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, MISSIONS, mission, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    function saveDate(date){\r\n        updateDB( mission, \"dueDate\", date )\r\n    }\r\n\r\n    function createTasks(listOfTasks){\r\n        let taskNames = listOfTasks.split(\",\").map(t =>  t.trim());\r\n        console.log(\"task names\", taskNames);\r\n        \r\n        let currentTaskListNames = tasks.map( t => t.name);\r\n\r\n        console.log(\"Current Tasks\", currentTaskListNames)\r\n\r\n        let newTaskNames = taskNames.filter(t => currentTaskListNames.indexOf(t) === -1)\r\n        console.log(\"new Tasks\", newTaskNames);\r\n\r\n        if (newTaskNames.length > 0){\r\n            newTaskNames.forEach((element, i) => {\r\n                let nt = new Task(element.trim(), mission.name,\"\", mission.id, ASAP, i);\r\n                db.Tasks.unshift(nt)\r\n                pushChanges(ADD, nt, \"Tasks\", shipItems)\r\n                mission.taskList.unshift(nt.id);\r\n                mission.status = PENDING;\r\n                pushChanges(UPDATE, mission, \"Missions\", shipItems);\r\n                //updateDB( mission, \"taskList\", newTL )\r\n            });\r\n        }\r\n        console.log(\"All Tasks\", db.Tasks);\r\n        getTasks();\r\n    }\r\n\r\n    switch (true){\r\n        case mission.status === UNPLANNED && openPlanner === false:\r\n            return (\r\n                <div className='h-100'>\r\n                    <Scroll>\r\n                        <div className='h-20 w-100 pa2 pb2' >\r\n                            <input type='text' \r\n                            className='bn fw7 b white bg-transparent'\r\n                            value={name} \r\n                            onChange={(e)=> {setName(e.target.value);} } \r\n                            onBlur={() => {updateDB(mission, \"name\", name )} }  \r\n                            />\r\n                            <h4 className='fw1 white'>{displayDays(mission.dueDate)}</h4>\r\n                        </div>\r\n                        <div className='h-70'>\r\n                            <div className='w-100 pl2 pb2'>\r\n                                {/* <h5 className='fw3 white'>Due: {mission.dueDate} </h5> */}\r\n                                <DatePicker item={mission} dueDate={dueDate} updateFunc={saveDate} />\r\n                                {/* <h5 className='fw3 white'>Time Required: {mission.timeRequired}</h5> */}\r\n                            </div>\r\n                            <div className='w-100 pl2 pb2'>\r\n                                <h5 className='fw3 white'>Status: {status}</h5>\r\n                                {/* <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                            </div>\r\n                            <div className='w-100 pl2 pt3'>\r\n                                <h5 className='fw3 white'>Back Story: </h5>\r\n                                <textarea rows=\"2\" cols=\"30\" wrap='hard' \r\n                                className='w-80 fw3 white bn bg-transparent' \r\n                                value={backStory} \r\n                                onChange={(e)=> {setBackStory(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(mission, \"backStory\", backStory ) }} \r\n                                />\r\n                            </div>\r\n                \r\n                            <div className='w-100 flex items-center flex-column ' >\r\n                                <button onClick={() => setOpenPlanner(true)}>PLAN</button>\r\n                            </div>\r\n                \r\n                            <div className='flex justify-between items-center'>\r\n                                <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n                                <NewItemButton />\r\n                            </div> \r\n                            <div className='pa2'>\r\n                                <List content={missionTasks} filter={MISSION} touchFunction={passKey} />\r\n                            </div>\r\n                        </div>\r\n                    </Scroll>                    \r\n                </div>\r\n            );\r\n        case openPlanner === false && mission.status !== UNPLANNED: //False\r\n            return (\r\n                <div className='h-100'>\r\n                    <Scroll>\r\n                        <div className='w-100 h-20 pa2 pb3' >\r\n            \r\n                            <textarea rows=\"2\" cols=\"100\"\r\n                            className='bn fw7 b white bg-transparent'\r\n                            value={name} \r\n                            onChange={(e)=> {setName(e.target.value);} } \r\n                            onBlur={() => {updateDB(mission, \"name\", name )} }  \r\n                            />\r\n\r\n                            <h4 className='fw1 white'>DUE: {displayDays(mission.dueDate)}</h4>\r\n                        </div>\r\n                        <div className='h-70'>\r\n                            <div className='w-100 pt2 pl2 pb1'>\r\n                                <h5 className='fw3 white'>Back Story: </h5>\r\n                                <textarea rows=\"2\" cols=\"100\" \r\n                                className='w-80 fw3 white bn bg-transparent' \r\n                                value={backStory} \r\n                                onChange={(e)=> {setBackStory(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(mission, \"backStory\", backStory ) }} \r\n                                />\r\n                            </div>\r\n                            <div className='w-100 pl2 pb2'>\r\n                                <h5 className='fw3 white'>Purpose: </h5>\r\n                                <textarea rows=\"2\" cols=\"30\" wrap='hard' \r\n                                className='bn fw3 b white bg-transparent' \r\n                                value={purpose} \r\n                                onChange={(e)=> {setPurpose(e.target.value);} } \r\n                                onBlur={() => {updateDB(mission, \"purpose\", purpose )} } \r\n                                />\r\n\r\n                            </div>\r\n                            <div className='w-100 pl2 pb2 flex justify-between'>\r\n                                {/* <h5 className='fw3 white'>Due: {mission.dueDate} </h5> */}\r\n                                <DatePicker item={mission} dueDate={dueDate} updateFunc={saveDate} />\r\n                                {/* <h5 className='fw3 white'>Time Required: {mission.timeRequired}</h5> */}\r\n                            </div>\r\n                            <div className='w-100pl2 pl2 pb3 flex justify-between'>\r\n                                <h5 className='fw3 white'>Status: {mission.status}</h5>\r\n                                {/* <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                            </div>\r\n\r\n                            <div className='w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                                <button onClick={() => setOpenPlanner(true)}>PLANS</button>\r\n                            </div>\r\n\r\n                            <div className='flex justify-between items-center'>\r\n                                <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n                                <NewItemButton />\r\n                            </div> \r\n                            <div className='pa2 h-30'>\r\n                                <List content={missionTasks} filter={MISSION} touchFunction={passKey} />\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        case openPlanner: //True\r\n                if (showTasks){\r\n                    return (\r\n                    <div className='pa2 h-100'>\r\n                        <button onClick={()=> setShowTasks(false)}>CLOSE TASKS</button>\r\n                        <Scroll>\r\n                            <List content={missionTasks} filter={MISSION} touchFunction={passKey} />\r\n                        </Scroll>\r\n                    </div>)\r\n                } else {\r\n                    return (\r\n                        <div className=' h-100 '>\r\n                            <Scroll>\r\n                            <div className=' w-100 center br1 ba b--black-10 '>\r\n                                <h1 className='b white f3'>PLAN</h1>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>What's the desired Outcome?</h5>\r\n                                    <input type='text' \r\n                                        className='bn fw7 b pa1'\r\n                                        value={name} \r\n                                        onChange={(e)=> {setName(e.target.value);} } \r\n                                        onBlur={() => {updateDB(mission, \"name\", name )} }  \r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>What's the Purpose?</h5>\r\n                                    <textarea rows=\"4\" cols=\"30\" wrap='hard'\r\n                                    className='pb2 w-80 fw3 bn pa2' \r\n                                    value={purpose} \r\n                                    onChange={(e)=> {setPurpose(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"purpose\", purpose ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Vision: Describe what you see:</h5>\r\n                                    <textarea rows=\"4\" cols=\"30\" wrap='hard'  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={vision} \r\n                                    onChange={(e)=> {setVision(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"vision\", vision ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Principles/Criteria/Specifications:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\"  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={principles} \r\n                                    onChange={(e)=> {setPrinciples(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"principles\", principles ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>To do / Next Actions (Brainstorming Output):</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\" \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={toDo} \r\n                                    onChange={(e)=> {setToDo(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"toDo\", toDo ) }} \r\n                                    />\r\n                                    <button onClick={()=> createTasks(toDo)}>CREATE TASKS</button>\r\n                                    <button onClick={()=> setShowTasks(true)}>SHOW TASKS</button>\r\n                                    <button onClick={()=>updateDB(mission, \"taskList\", [] ) }>Clear Task list</button>\r\n                                </div>\r\n                                <h5 className='fw3 white bb b--grey bw2 pb2'>OPTIONAL</h5>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Skills Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\"  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={skillsRequired} \r\n                                    onChange={(e)=> {setSkillsRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"skillsRequired\", skillsRequired ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Knowledge/Information Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\"  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={infoRequired} \r\n                                    onChange={(e)=> {setInfoRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"infoRequired\", infoRequired ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Ability Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\" \r\n                                    className='w-80 fw3 bn' \r\n                                    value={abilityRequired} \r\n                                    onChange={(e)=> {setAbilityRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"abilityRequired\", abilityRequired ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Time Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\" \r\n                                    className='w-80 fw3 bn'\r\n                                    value={timeRequired} \r\n                                    onChange={(e)=> {setTimeRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"timeRequired\", timeRequired ) }} \r\n                                    />\r\n                                </div>\r\n        \r\n                                <button onClick={()=> {\r\n                                    setStatus(PENDING); mission.status = PENDING; \r\n                                    pushChanges(UPDATE, mission, \"Missions\", shipItems) \r\n                                    }} >MARK AS PLANNED</button>\r\n        \r\n                                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                                    <button onClick={() => setOpenPlanner(false)}>CLOSE PLANNER</button>\r\n                                </div>\r\n                            </div>\r\n                        </Scroll>\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n            \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MissionDetails);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, RestorePreviousState, ChangeNav } from '../actions';\r\nimport { DETAILS, LIST, MISSION_TASKS, MISSIONS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        missionID: state.values.missionID,\r\n        previousTitle: state.values.previousTitle,\r\n        previousView: state.values.previousView,\r\n        previousItemID: state.values.previousItemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BackButton);\r\n\r\n\r\n\r\nfunction BackButton({ changeItemID, changeNav, missionID, title, previousTitle, previousView, previousItemID }) {\r\n\r\n    function goBack(){\r\n\r\n        let navID = 0;\r\n        let navView = LIST;\r\n\r\n        if(title === MISSION_TASKS) {\r\n            title = MISSIONS;\r\n            navID = missionID;\r\n            navView = DETAILS;\r\n        };\r\n\r\n        let nav = {\r\n            title: title,\r\n            view: navView,\r\n            ID: navID\r\n        }\r\n        //changeItemID(id);\r\n        changeNav(nav);\r\n        \r\n    }\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={goBack}>\r\n            <h1 className=' white b f8 fw9 ma0'>&lt;</h1>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, ShipItems } from '../actions';\r\nimport { REFERENCES, UPDATE } from '../constants';\r\nimport { amendList  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReferenceDetails);\r\n\r\n\r\nfunction ReferenceDetails({ id , changeItemID, updateExp, db, shipItems, reference, exp }) {\r\n\r\n    const ReferenceList = db.Reference;\r\n    // let reference = {};\r\n    //let position;\r\n\r\n    // for (let i=0; i<ReferenceList.length; i++){\r\n\r\n    //     if (ReferenceList[i].id === id){\r\n    //        reference = ReferenceList[i];\r\n    //        //position = i;\r\n    //        break;\r\n    //     }\r\n    // }\r\n\r\n    console.log(\"reference: \", reference)\r\n\r\n    const [ name, setName ] = useState(reference.name);\r\n    const [ details, setDetails ] = useState(reference.details);\r\n\r\n    useEffect(() => {\r\n        setName(reference.name);\r\n        setDetails(reference.details);\r\n        \r\n    }, [ reference.name, reference.details])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, REFERENCES, reference, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{reference.name}</h3> */}\r\n                    <input type='text' \r\n                    className='bn fw7 b white bg-transparent'\r\n                    value={name} \r\n                    onChange={(e)=> {setName(e.target.value);} } \r\n                    onBlur={() => {updateDB(reference, \"name\", name )} }  \r\n                    />\r\n                    <h5 className='fw3 white'>{reference.type}</h5>\r\n                </div>\r\n                <div className='pa2'>\r\n                    <textarea rows=\"4\" cols=\"45\" \r\n                    onChange={(e)=> {setDetails(e.target.value);} } \r\n                    onBlur={ () =>{ updateDB(reference, \"details\", details ) }} \r\n                    value={details} \r\n                    className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\nimport trashCan from '../assets/trash1600.png';\r\nimport { INBOX, MISSIONS, REMOVE, TASKS, REFERENCES, SOMEDAY, ADD, PROCESSED, COMPLETED, MISSION_TASKS, EVENTS, UPDATE, DONE, PAUSED, TASK, MISSION, EVENT } from '../constants';\r\nimport { pushChanges } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashButton);\r\n\r\n\r\nfunction TrashButton({ shipItems, changeNav, db, title, ID }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const MissionsList = db.Missions;\r\n    const TaskList = db.Tasks;\r\n    const References = db.References;\r\n    const Events = db.Events;\r\n    const SomedayList = db.Tasks.concat(db.Missions)\r\n    const ProcessedList = db.Inbox;\r\n    const Completed = db.Tasks.concat(db.Missions).filter( e => e.status === DONE)\r\n\r\n    \r\n\r\n    let currentList, indx, currentItem, list;\r\n\r\n    switch(title) {\r\n        case MISSIONS:\r\n            currentList = MissionsList;\r\n            list = \"Missions\";\r\n        break;\r\n        case TASKS:\r\n            currentList = TaskList;\r\n            list = \"Tasks\";\r\n        break;\r\n        case INBOX:\r\n            currentList = InboxItems;\r\n            list = \"Inbox\";\r\n        break;\r\n        case REFERENCES:\r\n            currentList = References;\r\n            list = \"References\";\r\n        break;\r\n        case EVENTS:\r\n            currentList = Events;\r\n            list = \"Events\";\r\n        break;\r\n        case SOMEDAY:\r\n            currentList = SomedayList;\r\n        break;\r\n        case PROCESSED:\r\n            currentList = TaskList;\r\n            list = \"Tasks\";\r\n        break;\r\n        case COMPLETED:\r\n            currentList = Completed;\r\n        break;\r\n        case MISSION_TASKS:\r\n            currentList = TaskList;\r\n            list = \"Tasks\";\r\n        break;\r\n        default:\r\n    }\r\n\r\n    for (let i=0; i<currentList.length; i++){\r\n\r\n        if (currentList[i].id === parseInt(ID)){\r\n            currentItem = currentList[i];\r\n            indx = i;\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    //Change Nav to List\r\n    const nav = {\r\n        title: title,\r\n        view: \"LIST\",\r\n        ID: 0\r\n    }\r\n\r\n    function trashItem() {\r\n        console.log('trash button clicked');\r\n        console.log(\"current trash item: \", currentItem)\r\n        if (currentItem.status === \"ACTIVE\"){currentItem.status = PAUSED }\r\n        switch (currentItem.type){\r\n            case TASK:\r\n                list = \"Tasks\";\r\n            break;\r\n            case MISSION:\r\n                list = \"Missions\";\r\n            break;\r\n            case EVENT:\r\n                list = \"Events\";\r\n            break;\r\n            default:\r\n        }\r\n        currentItem.isTrashed = true;\r\n        currentItem.trashedDate = new Date().toISOString().substr(0, 10);;\r\n\r\n        //amendList(REMOVE, currentList, currentItem, indx);\r\n        //Trash.unshift(currentItem);\r\n        pushChanges(UPDATE, currentItem, list, shipItems);\r\n        // amendList(ADD, Trash, currentItem, indx);\r\n        changeNav(nav);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img src={trashCan} alt='trash icon' className='h2' onClick={() => {trashItem()}} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { ASAP, DETAILS, MISSIONS } from '../constants';\r\nimport { calculateTime } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction CompletedItemDetails({ MissionsList, changeNav,  item }) {\r\n\r\n    //GET THE ASSOCIATED Mission NAME\r\n    console.log(\"reached completed stage\");\r\n    let associatedMission = {}\r\n    if(item.associatedMissionID === 0){\r\n        associatedMission.name = \"Getting Things Done\";\r\n    } else if (item.associatedMissionID > 0){\r\n        for(let i=0; i<MissionsList.length; i++){\r\n            if(parseInt(item.associatedMissionID) === parseInt(MissionsList[i].id)){\r\n                associatedMission = MissionsList[i];\r\n                console.log('associated Mission name: ', associatedMission.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n\r\n    console.log(\"completed\" ,item)\r\n    \r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                    <h4 className='fw1 white'>{item.requiredContext}</h4>\r\n                    \r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Mission: </h5>\r\n                    <h4 className='fw5 white' onClick={() => {\r\n                        if(item.associatedMissionID !== 0){changeNavigation(item.associatedMissionID, MISSIONS)}}}>{associatedMission.name}</h4>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Outcome: </h5>\r\n                    <h5 className='fw3 white'>{item.outcome} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    <h5 className='fw3 white'>Time Spent: {calculateTime(item.timeSpent)}</h5>\r\n                    <h5 className='fw3 white'>Due Date: {item.dueDate === ASAP ? ASAP : item.dueDate} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    <h5 className='fw3 white'>COMPLETED: {(item.doneDate)} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>           \r\n                    {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                    <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                </div>\r\n                <h5 className='fw3 white'>Status: {item.status}</h5>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    <p className='fw3 white'>{item.note}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedItemDetails);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { DETAILS, INBOX_ITEM, MISSION, REFERENCE, EVENT, REMOVE, TASK, ADD, INBOX, TASKS, MISSIONS, REFERENCES, EVENTS, UPDATE, LIST, TRASH } from '../constants';\r\nimport { calculateTime, pushChanges } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction TrashedItemDetails({ changeNav, item, db, shipItems }) {\r\n\r\n    function restore(){\r\n        let list, dbList, title;\r\n        switch(item.type){\r\n            case INBOX_ITEM:\r\n                list = db.Inbox;\r\n                dbList = \"Inbox\";\r\n                title = INBOX;\r\n            break;\r\n            case TASK:\r\n                list = db.Tasks;\r\n                dbList = \"Tasks\";\r\n                title = TASKS;\r\n            break;\r\n            case MISSION:\r\n                list = db.Missions;\r\n                dbList = \"Missions\";\r\n                title = MISSIONS;\r\n            break;\r\n            case REFERENCE:\r\n                list = db.References;\r\n                dbList = \"References\";\r\n                title = REFERENCES;\r\n            break;\r\n            case EVENT:\r\n                list = db.Events;\r\n                dbList = \"Events\";\r\n                title = EVENTS;\r\n            break;\r\n            default:\r\n        }\r\n        item.isTrashed = false;\r\n        item.trashedDate = 0;\r\n        // const itemIndex = db.Trash.indexOf(item.id);\r\n        // db.Trash.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Trash\", shipItems);\r\n        //list.unshift(item);\r\n        pushChanges(UPDATE, item, dbList, shipItems)\r\n        changeNavigation(item.id, title)\r\n    }\r\n\r\n    function deleteFromDB(){\r\n        console.log(\"Deleting item\")\r\n        let list, dbList, title;\r\n        switch(item.type){\r\n            case INBOX_ITEM:\r\n                list = db.Inbox;\r\n                dbList = \"Inbox\";\r\n                title = INBOX;\r\n            break;\r\n            case TASK:\r\n                list = db.Tasks;\r\n                dbList = \"Tasks\";\r\n                title = TASKS;\r\n            break;\r\n            case MISSION:\r\n                list = db.Missions;\r\n                dbList = \"Missions\";\r\n                title = MISSIONS;\r\n            break;\r\n            case REFERENCE:\r\n                list = db.References;\r\n                dbList = \"References\";\r\n                title = REFERENCES;\r\n            break;\r\n            case EVENT:\r\n                list = db.Events;\r\n                dbList = \"Events\";\r\n                title = EVENTS;\r\n            break;\r\n            default:\r\n        }\r\n        const itemIndex = list.map( e => e.id).indexOf(item.id);\r\n        console.log(\"Trash details item index: \", itemIndex)\r\n        list.splice(itemIndex,1);\r\n        console.log(\"List from trash : \", itemIndex)\r\n        // pushChanges(REMOVE, item, \"Trash\", shipItems);\r\n        //list.unshift(item);\r\n        pushChanges(REMOVE, item, dbList, shipItems)\r\n        changeNavigation(0, TRASH, LIST);\r\n\r\n    }\r\n\r\n\r\n    function changeNavigation(id, title, view){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className='w-100 pa2 pb3' >\r\n                <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                <h4 className='fw1 white'>{item.type}</h4>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Trashed Date: {new Date((item.trashedDate)).toLocaleString()}</h5>\r\n            </div>\r\n            <div className='w-100 ba bw1 b--white tc pb2'>\r\n                <h5 className='fw3 white' onClick={restore}>RESTORE</h5>\r\n            </div>\r\n            <div className='w-100 ba bw1 b--white tc pb2'>\r\n                <h5 className='fw3 white' onClick={deleteFromDB}>DELETE</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashedItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { DAILY, EVENTS, MONTHLY, NONE, UPDATE, WEEKLY, YEARLY } from '../constants';\r\nimport { amendList } from '../functions';\r\nimport DatePicker from './DatePicker';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EventDetails);\r\n\r\n\r\nfunction EventDetails({ changeNav,  item, shipItems, db, exp }) {\r\n\r\n    const [ name, setName ] = useState(item.name);\r\n    const [ date, setDate ] = useState(item.date);\r\n    const [ time, setTime ] = useState(item.time);\r\n    const [ location, setLocation ] = useState(item.location);\r\n    const [ frequency, setFrequency ] = useState(item.frequency);\r\n    const [ note, setNote ] = useState(item.note);\r\n\r\n    useEffect(() => {\r\n        setName(item.name);\r\n        setDate(item.date);\r\n        setTime(item.time);\r\n        setLocation(item.location);\r\n        setFrequency(item.frequency);\r\n        setNote(item.note);\r\n        \r\n    }, [ item.name, item.date, item.time, item.location, item.frequency, item.note])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, EVENTS, item, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    function saveDate(date){\r\n        updateDB( item, \"date\", date )\r\n    }\r\n\r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                    <h4 className='fw1 white'>{task.location}</h4> */}\r\n\r\n                    <input type='text' onChange={(e)=> {setName(e.target.value);} } onBlur={() => { updateDB(item, \"name\", name ) } } \r\n                    value={name} className='bn fw9 b white bg-transparent' />\r\n\r\n                <div className='w-100 pb3 flex justify-between'>\r\n                    <DatePicker item={item} dueDate={date} updateFunc={saveDate} />\r\n                 </div>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <input type='text' onChange={(e)=> {setLocation(e.target.value);} } \r\n                        onBlur={() =>{ updateDB(item, \"location\", location ) }} \r\n                        value={location} className='fw1 white bn bg-transparent' />\r\n                    {/* <h5 className='fw3 white'>Mission: </h5>\r\n                    <h4 className='fw5 white' onClick={() => {\r\n                        if(task.associatedMissionID != 0){changeNavigation(task.associatedMissionID, MISSIONS)}}} >{associatedMission.name}</h4> */}\r\n                </div>\r\n                    <input className=' fw4 white bg-transparent pa2 mb1' id='time' type='time' value={time} onChange={(e) => {setTime(e.target.value); console.log(time)}} onBlur={() => { updateDB(item, \"time\", time ) } }/>\r\n                <div className='w-100 pl2 pb3'>\r\n                {/* <label className='fw4 white' htmlFor=\"frequency\" >Frequency:</label> */}\r\n                <select className=' fw4 white bg-transparent mb1' id=\"priority\" value={frequency} onChange={(e)=> setFrequency(e.target.value)} onBlur={() => { updateDB(item, \"frequency\", frequency ) } }>\r\n                    <option value={frequency} disabled>{frequency}</option>\r\n                    <option value={NONE}>ONE-TIME</option>\r\n                    <option value={DAILY}>DAILY</option>\r\n                    <option value={WEEKLY}>WEEKLY</option>\r\n                    <option value={MONTHLY}>MONTHLY</option>\r\n                    <option value={YEARLY}>YEARLY</option>\r\n                </select>\r\n                </div>\r\n                <div className='pa2'>\r\n                    {/* <p className='fw3 white'>{task.note}</p> */}\r\n                    <textarea rows=\"4\" cols=\"45\" onChange={(e)=> {setNote(e.target.value);} } onBlur={ () =>{ updateDB(item, \"note\", note )}} value={note} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{item.name}</h3> */}\r\n                    <input type='text' \r\n                    className='bn fw7 b white bg-transparent'\r\n                    value={name} \r\n                    onChange={(e)=> {setName(e.target.value);} } \r\n                    onBlur={() => {updateDB(item, \"name\", name )} }  \r\n                    />\r\n                    <h4 className='fw1 white'>{item.type}</h4>\r\n                </div>\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Date: </h5>\r\n                    <DatePicker item={item} dueDate={item.date} updateFunc={saveDate}/>\r\n                </div>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    <textarea rows=\"4\" cols=\"45\" \r\n                    onChange={(e)=> {setNote(e.target.value);} } \r\n                    onBlur={ () =>{ updateDB(item, \"note\", note )}} \r\n                    value={note} \r\n                    className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { REFERENCE, COMPLETED, PROCESSED, INBOX, TRASH, REFERENCES, MISSIONS, TASKS, CALENDAR, SOMEDAY, WAITING_FOR, EVENTS, TODAY, ASAP, MISSION_TASKS, TASK, MISSION, EVENT } from '../constants';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport ItemDetails from '../components/ItemDetails';\r\nimport TaskDetails from '../components/TaskDetails';\r\nimport MissionDetails from '../components/MissionDetails';\r\nimport BackButton from '../components/BackButton';\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport ReferenceDetails from '../components/ReferenceDetails';\r\nimport { selectItem } from '../actions';\r\nimport TrashButton from '../components/TrashButton';\r\nimport CompletedItemDetails from '../components/CompletedItemDetails';\r\nimport TrashedItemDetails from '../components/TrashedItemDetails';\r\nimport EventDetails from '../components/EventDetails';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        missionID: state.values.missionID,\r\n        previousItemID: state.values.previousItemID,\r\n        previousTitle: state.values.previousTitle,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction Details( { content, db, itemID, touchFunction, updateExp, selectAnother, title, changeItemID, previousItemID, previousTitle, missionID  }){\r\n    \r\n    //SPECIAL CONDITION FOR MISSION'S LIST\r\n    if(title === MISSION_TASKS) {\r\n\r\n        content = getTasks(getMission(parseInt(missionID)), db.Tasks);\r\n\r\n        function getMission(projID){\r\n            console.log(\"proj id: \", projID)\r\n            let proj = {};\r\n            for (let x=0; x < db.Missions.length; x++){\r\n                if (db.Missions[x].id === projID){\r\n                    proj = db.Missions[x];\r\n                }\r\n            }\r\n            console.log(\"proj = \", proj)\r\n            return proj;\r\n            \r\n        }\r\n        function getTasks(mission, TaskList){\r\n            console.log(\"proj tasks: \", mission.taskList)\r\n            let tasks = [];\r\n            if(mission.taskList !== []){\r\n                for(let i=0; i<mission.taskList.length; i++){\r\n                    for(let j=0; j<TaskList.length; j++){\r\n                        if(mission.taskList[i] === TaskList[j].id ){\r\n                            tasks.push(TaskList[j]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            console.log(tasks);\r\n            return tasks;\r\n        }\r\n    }\r\n\r\n    //console.log(\"content list from details: \", content)\r\n\r\n    // FIND ITEM\r\n    let item = {};\r\n    let prev;\r\n    let next;\r\n    const id = parseInt(itemID);\r\n    for (let i=0; i<content.length; i++){\r\n        //console.log(\"entering loop. Iteration: \", i)\r\n        \r\n        if (parseInt(content[i].id) === id){\r\n            item = content[i];\r\n            //console.log(\"item from loop: \", item)\r\n\r\n            // ASSIGN THE PREV AND NEXT ITEM IDS\r\n            i === 0 ? prev = content[i].id : prev = content[i-1].id;\r\n            i === (content.length-1) ? next = content[i].id : next = content[i+1].id;\r\n        }\r\n\r\n    }\r\n\r\n    // CHOOSE DETAILS FORMAT FOR DIFFERENT LIST OR ITEM TYPES\r\n    switch(title) {\r\n        case MISSIONS:\r\n            return (\r\n                <div className='w-100 h-100 center br1 pa2 bw2 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>MISSION</h2>\r\n                    <div className='h-70'>\r\n                        <MissionDetails mission={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                    </div>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>TASK</h2>\r\n                    <div className='h-70'>\r\n                        <TaskDetails id={parseInt(itemID)} />\r\n                    </div>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case MISSION_TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>MISSION TASKS</h2>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Inbox Item</h2>\r\n                    <div className='h-60'>\r\n                        <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                    </div>\r\n                </div>        \r\n            )\r\n        case PROCESSED:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>PROCESSED</h2>\r\n                        <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                        <h5 className='white pb2'>Processed: {(new Date(item.processedDate)).toLocaleString()} </h5>\r\n                        {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>        \r\n            )\r\n        case REFERENCES:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>REFERENCE</h1>\r\n                    <ReferenceDetails id={parseInt(itemID)} reference={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case EVENTS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>EVENT</h1>\r\n                    <EventDetails id={parseInt(itemID)} item={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case SOMEDAY:\r\n            if (item.type === TASK){\r\n                console.log(\"someday item is a task\")\r\n                return (\r\n                    <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                        <div className='flex justify-between items-center'>\r\n                            <BackButton id={0} />\r\n                            <TrashButton />\r\n                        </div>\r\n                        <h2 className='tc b gold f3'>TASK</h2>\r\n                        <TaskDetails id={parseInt(itemID)} />\r\n                        <div className='flex justify-between self-end'>\r\n                            <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                            <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (item.type === MISSION) {\r\n                console.log(\"someday item is this mission = \", item)\r\n                return (\r\n                    <div className='w-100 h-100 center br1 pa2 ba b--black-10'>\r\n                        <div className='flex justify-between items-center'>\r\n                            <BackButton id={0} />\r\n                            <TrashButton />\r\n                        </div>\r\n                        <h2 className='tc b gold f3'>MISSION</h2>\r\n                        <MissionDetails mission={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                        <div className='flex justify-between self-end'>\r\n                            <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                            <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n            }\r\n        case COMPLETED:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>COMPLETED</h2>\r\n                    <CompletedItemDetails item={item} MissionsList={db.missions}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        case TRASH:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between'>\r\n                        <BackButton id={0} />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>TRASHED</h2>\r\n                    <TrashedItemDetails item={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 pb2'>\r\n                    <BackButton />\r\n                    <h1 className='tc b white'>Error</h1>\r\n                    <p>Item Not Found</p>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask, selectItem, ChangeNav } from '../actions';\r\nimport { DETAILS, TASKS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTaskTimer);\r\n\r\nfunction ActiveTaskTimer({changeItemID, activeSince, activeTask, changeNav}) {\r\n    \r\n    const dateNow = (new Date()).getTime();\r\n    const timeSpent = parseInt(activeTask.timeSpent) + (dateNow - parseInt(activeSince));\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    if( (parseInt(activeTask.id) !== undefined) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [ isActive, seconds, minutes, hours ]);\r\n\r\n    function goToTask(event){\r\n        event.stopPropagation();\r\n        // changeItemID(activeTask.id)\r\n        let nav = {\r\n            title: TASKS,\r\n            view: DETAILS,\r\n            ID: activeTask.id\r\n        }\r\n        changeNav(nav);     \r\n    }\r\n\r\n    switch(activeTask.id){\r\n        case undefined:\r\n            return (\r\n                <div></div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className=\"\" onClick={goToTask} >\r\n                    <div className=\" pt3 \">\r\n                        <h2 className=\"pa1 \">CURRENT TASK</h2>\r\n                        <h2 className=\"pa1 red \">{activeTask.name}</h2>\r\n                        <h2 className='pa1 fw3 b red'>{hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h2>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        isShipping: state.items.latestUpdate.isShipping\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SyncStatusDot);\r\n\r\n\r\nfunction SyncStatusDot({ shipItems, changeNav, db, title, ID, isShipping }) {\r\n\r\n    let color;\r\n    if (isShipping) {\r\n        color = 'red'\r\n    } else {\r\n        color = 'green'\r\n    }\r\n    const style ={\r\n        color: color\r\n    }\r\n  \r\n    return (\r\n        <div className='flex justify-end'>\r\n            <h2 className='fw8 pa0 ma0' style={style}>.</h2>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { OVERVIEW } from '../constants';\r\nimport ActiveTaskTimer from './ActiveTaskTimer';\r\nimport SyncStatusDot from './SyncStatusDot';\r\n//import React, { useState, useEffect } from 'react';\r\n\r\n// import { connect } from 'react-redux';\r\n// import { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         activeTask: state.SetActiveTaskReducer.activeTask,\r\n//         status: state.UpdateTaskStatusReducer.taskStatus,\r\n//         activeSince: state.SetActiveTaskReducer.activeSince,\r\n//         timeNow: state.SetActiveTaskReducer.timeNow\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateTaskStatus: (status) => {\r\n//             return dispatch(UpdateTaskStatus(status))\r\n//         },\r\n//         setActiveTask: (task) => {\r\n//             return dispatch(SetActiveTask(task))\r\n//         },\r\n//         changeItemID: (id) => {\r\n//             return dispatch(selectItem(id))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(StatsOverview);\r\n\r\nexport default function StatsOverview({ touchFunction, exp }) {\r\n\r\n    return (\r\n        <article className=\"h-100 w-100 center bg-white pa2 \" data-view={OVERVIEW} title = \"STATS\" onClick={touchFunction}>\r\n            <SyncStatusDot />\r\n            <div className=\"tc w-100 h-100\">\r\n                <h1 className=\"f2 mb0 \">Amen Christ</h1>\r\n                <h3 className=\"f6 pa1 gray \">Engineer</h3>\r\n                <h4 className=\"f6 gray \">Exp: {exp}</h4>\r\n                <ActiveTaskTimer />\r\n            </div>\r\n        </article>  \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { DONE, LIST, SOMEDAY } from '../constants';\r\n\r\nexport default function TaskOverview({ touchFunction, tasks }) {\r\n\r\n    let content = tasks.filter((t) => (t.isTrashed === false && t.status !== DONE) && t.dueDate !== SOMEDAY);\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" data-view={LIST} title=\"TASKS\" onClick={touchFunction}> \r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Tasks</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">({ content.length })</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\nimport { DONE, LIST, MISSIONS, SOMEDAY } from '../constants';\r\n\r\nexport default function MissionsOverview({ touchFunction, missions }) {\r\n\r\n    let content = missions.filter((m) => (m.isTrashed === false && m.status !== DONE) && m.dueDate !== SOMEDAY);\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title={MISSIONS} data-view={LIST} onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Missions</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">({ content.length })</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { LIST, PROCESSED } from '../constants';\r\n\r\nexport default function InboxOverview({ touchFunction , inbox }) {\r\n\r\n    let content = inbox.filter((i) => (i.isTrashed === false && i.status !== PROCESSED));\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white br1 ba b--black-10\" data-view={LIST} title=\"INBOX\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">{ content.length }</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">Inbox</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NEW, NEW_ITEM } from '../constants'\r\n\r\nexport default function NewItemTile({ touchFunction }) {\r\n    return (\r\n        <div className='bg-white h-100 center w-100 flex items-center justify-center' data-view={NEW} title={NEW_ITEM} onClick={touchFunction}>\r\n            <div className='tc '>\r\n                <h3 className='' >Add New Item</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ASAP, DONE, LIST, TASK, TODAY } from '../constants';\r\n\r\nexport default function TodaysMission({ touchFunction, db }) {\r\n\r\n    let content = db.Tasks.filter((entry) => ((entry.type === TASK) && (entry.dueDate !== ASAP) && ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ));\r\n\r\n    return (\r\n        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={TODAY} onClick={touchFunction}>\r\n            <h2 className='tc'>Today's<br />Mission<br />({content.length})</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StatsOverview from '../components/StatsOverview';\r\nimport TaskOverview from '../components/TasksOverview';\r\nimport MissionsOverview from '../components/MissionsOverview';\r\nimport InboxOverview from '../components/InboxOverview';\r\nimport { ChangeNav } from '../actions';\r\nimport {  CALENDAR, DAILY, DONE, LIST, REFERENCES, SOMEDAY, STATS, TASK } from '../constants';\r\nimport './Home.css';\r\nimport NewItemTile from '../components/NewItemTile';\r\nimport TodaysMission from '../components/TodaysMission';\r\nimport { setNavValues  } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    \r\n    const { changeItemID, exp, db, changeNav, state } = props;\r\n\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    let somedayContent = db.Tasks.concat(db.Missions).filter((t) => (t.isTrashed === false && t.status !== DONE) && t.dueDate === SOMEDAY);\r\n\r\n    let dailyEx = db.Tasks.filter((entry) => (entry.type === TASK && entry.frequency === DAILY ) && (entry.isTrashed === false));\r\n            \r\n    return (\r\n        <div className='h-100 pa1' >\r\n            <div className='pa1 ph1 h-40 ba' title={STATS}>\r\n                <StatsOverview touchFunction={handleEvent} exp={exp} />\r\n            </div>\r\n            <div className=\"flex justify-center h-20 \">\r\n                <div className='w-50 pa1'>\r\n                    <MissionsOverview touchFunction={handleEvent} missions={db.Missions} />\r\n                </div>\r\n                <div className='w-50 pa1'>\r\n                    <TaskOverview touchFunction={handleEvent} tasks={db.Tasks}/>\r\n                </div>\r\n            </div>\r\n            <div className='flex w-100 h-10 pa1'>\r\n                <NewItemTile touchFunction={handleEvent} />\r\n            </div>\r\n            <div className=\"flex justify-center h-30\">\r\n                <div className='w-50 h-100 pa1'>\r\n                    <div className=' w-100 h-50 pb1'>\r\n                        <TodaysMission touchFunction={handleEvent} gotoItem={changeItemID} db={db}/>\r\n                    </div>\r\n                    <div className=' w-100 h-50 pt1'>\r\n                        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={DAILY} onClick={handleEvent}>\r\n                            <h2 className='tc'>Daily<br />Exercises<br />({dailyEx.length})</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=' w-50 h-100'>\r\n                    <div className=' w-100 h-50'>\r\n                        <div className=' h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' data-view={LIST} title={SOMEDAY} onClick={handleEvent} >\r\n                                <h4 className='tc'>Someday ({somedayContent.length})</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' data-view={LIST} title={REFERENCES} onClick={handleEvent}>\r\n                                <h4 className='tc'>References</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='w-100 h-50 flex'>\r\n                        <div className='w-50 h-100 pa1' >\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={CALENDAR} onClick={handleEvent}>\r\n                                <h4 className='tc'>Calendar</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='w-50 h-100 pa1'>\r\n                            <InboxOverview touchFunction={handleEvent} inbox={db.Inbox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ChangeNav } from '../actions';\r\nimport { COMPLETED, PROCESSED, TRASH } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Stats( { changeNav}) {\r\n\r\n    function openList(title){\r\n        const nav = {\r\n            title: title,\r\n            view: \"LIST\",\r\n            ID: 0\r\n        }\r\n\r\n            changeNav(nav);\r\n    }\r\n    return (\r\n        <div className='h-75 w-90 center pa3 pa4-ns ba b--black-10'>\r\n            <div className=' w-90 center bg-white br1 pa3 pa4-ns ba b--black-10'>\r\n                <h1 className='tc'>STATS</h1>\r\n            </div>\r\n            <div className=' pt2 '>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(COMPLETED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Completed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(PROCESSED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Processed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(TRASH)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Trash</h1>\r\n                </div>\r\n            </div>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stats);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, selectTitle,ChangeNav, CreateAlert, SetActiveTask } from '../actions';\r\nimport { MISSIONS, STATS, TASKS, INBOX, TASK, MISSION, DAILY, REFERENCES, TODAY, NEW, SOMEDAY, CALENDAR, DETAILS, PROCESSED, TRASH, COMPLETED, EVENTS, LIST, ACTIVE, DONE, ASAP, EVENT } from '../constants';\r\nimport List from '../components/List';\r\nimport './Home.css';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport NewItem from '../components/NewItem';\r\nimport Details from './Details';\r\nimport Home from './Home';\r\nimport Stats from './Stats';\r\nimport { setNavValues } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        recordState: state.items.record.isFetching,\r\n        db: state.items.record.items,\r\n        record: state.items.record,\r\n        state: state.values,\r\n        alerts: state.items.alerts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        changeNav: (navObj => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }),\r\n        createAlert: (msg) => {\r\n            return dispatch(CreateAlert(msg))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n    }\r\n}\r\n\r\nfunction Main(props) {\r\n\r\n    const { \r\n        state, title, view, itemID, changeItemID, previousView, \r\n        updateExp, exp, db, record, changeNav, createAlert, alerts, setActiveTask } = props;\r\n    \r\n    \r\n    //console.log(\"state from Main: \", state)\r\n    //console.log(state.items)\r\n    //console.log(alerts.length)\r\n    //console.log(\"alerting\")\r\n    if (alerts.length > 0 ){\r\n        //alert(alerts[0].message);\r\n        //alert(\"Something to Alert\")\r\n    }\r\n    let type;\r\n    switch(previousView) {\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case MISSIONS:\r\n            type = MISSION;\r\n        break;\r\n        case CALENDAR:\r\n            type = EVENT;\r\n        break;\r\n        default:\r\n    } \r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    console.log('Title: ', title)\r\n    console.log('Item ID: ', itemID)\r\n    console.log('View: ', view)\r\n\r\n    \r\n\r\n    if(record.isFetching){\r\n        return <div className=\"f5 fw4 white\">Loading...</div>;\r\n    } else {\r\n        console.log(db)\r\n        //STATS OVERVIEW TIMER TRIGGER ON REFRESH\r\n        let activeTasks = db.Tasks.filter((entry) => entry.status === ACTIVE);\r\n        //console.log(\"Active Task from Main: \", activeTasks);\r\n        if (activeTasks.length > 0){\r\n            setActiveTask(activeTasks[0])\r\n        }\r\n\r\n        //Distribute Content\r\n        let content, unsortedContent;\r\n        switch(title) {\r\n            case TASKS:\r\n                unsortedContent = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE && e.dueDate !== SOMEDAY);\r\n                content = unsortedContent.sort((a,b) => a.order - b.order)\r\n            break;\r\n            case MISSIONS:\r\n                content = db.Missions.filter( e => e.isTrashed === false && e.status !== DONE && e.dueDate !== SOMEDAY);\r\n            break;\r\n            case INBOX:\r\n                content = db.Inbox.filter((entry) => entry.isTrashed === false && entry.status !== PROCESSED );\r\n            break;\r\n            case CALENDAR:\r\n                content = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE && (e.dueDate !== ASAP && e.dueDate !== SOMEDAY)).concat(db.Events);\r\n            break;\r\n            case REFERENCES:\r\n                content = db.References.filter( e => e.isTrashed === false);\r\n            break;\r\n            case TODAY:\r\n                content = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE);\r\n            break;\r\n            case DAILY:\r\n                content = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE);\r\n            break;\r\n            case COMPLETED:\r\n                content = db.Tasks.concat(db.Missions).filter( e => e.isTrashed === false && e.status === DONE);\r\n            break;\r\n            case PROCESSED:\r\n                content = db.Inbox.filter( e => e.isTrashed === false && e.status === PROCESSED);\r\n            break;\r\n            case SOMEDAY:\r\n                content = db.Tasks.concat(db.Missions).filter( e => e.isTrashed === false && e.dueDate === SOMEDAY );\r\n            break;\r\n            case EVENTS:\r\n                content = db.Events.filter( e => e.isTrashed === false);\r\n            break;\r\n            case TRASH:\r\n                // content = db.Trash;\r\n                content = db.Inbox.concat(db.Tasks, db.Missions, db.Events, db.References)//.filter( e => e.isTrashed === true)\r\n            break;\r\n            default:\r\n                content = []\r\n        } \r\n\r\n        switch( true ) {\r\n            case (title === STATS):\r\n                return (\r\n                    <Stats />\r\n                )\r\n            case view === DETAILS && itemID !== 0:\r\n                return (\r\n                    <div className='h-100 pa2 '>\r\n                        <div className='h-10 ba b--black-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <Details content={content} db={db} selectAnother={changeItemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case view === LIST && parseInt(itemID) === 0:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className='h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <div className='h-100 w-100 center pa1'>\r\n                                <h1 className='tc b gold ma0 pb2'>{title}</h1>\r\n                                <div className=' h-80 '>\r\n                                    <List content={content} />\r\n                                </div>\r\n                                <div className='h-10 flex w-100 content-end pa2'>\r\n                                    <NewItemButton touchFunction={handleEvent} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>   \r\n                )\r\n            case view === NEW:\r\n                console.log(\"type: \", type)\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className=' h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90'>\r\n                            <NewItem submitFunction={\"\"} view={type} updateExp={updateExp} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <Home db={db} />\r\n                );\r\n        }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from './actions';\r\nimport NavBar from './containers/NavBar';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        }\r\n    }\r\n}\r\n\r\nfunction App2(props) {\r\n\r\n    const { onTouch } = props;\r\n\r\n    \r\n    return (\r\n        <div className='app'>\r\n            <div className='home-container'>\r\n                <Main />\r\n            </div>\r\n            <NavBar touchFunction={onTouch} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(App2);\r\n\r\n\r\n//https://cdn.internetmultimediaonline.org/241F21/loveworldlive/ixilrao9.m3u8","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SELECT_VIEW, OVERVIEW, SELECT_ITEM, UPDATE_EXP, TASKS, INBOX, REFERENCES, TODAY,\r\n    RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, SET_ACTIVE_TASK, HOME, SELECT_TITLE, \r\n    MISSIONS, LIST, NEW_ITEM, NEW, CHANGE_NAV, MISSION_TASKS, EVENTS, ACTIVE\r\n} from \"./constants\"\r\n\r\nimport { SELECT_RECORD, INVALIDATE_RECORD, REQUEST_ITEMS, RECEIVE_ITEMS, PACK_ITEMS, DELIVER_ITEMS, CREATE_ALERT, CLOSE_ALERT } from './actions';\r\n\r\nconst initialState = {\r\n    title: HOME, \r\n    itemID: 0,\r\n    view: OVERVIEW,\r\n    missionID: 0,\r\n    previousTitle: HOME,\r\n    previousItemID: 0,\r\n    previousView: OVERVIEW,\r\n    previousState: {},\r\n    taskStatus: '',\r\n    agent: '',\r\n    record: {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        receivedAt: 0,\r\n        items: {}\r\n    },\r\n    latestUpdate: {\r\n        items: {},\r\n        isShipping: false,\r\n        deliveredAt: 0\r\n    },\r\n    exp: 0,\r\n    expTimestamp: 0,\r\n    db: { lastUpdated: 0},\r\n    alerts: []\r\n}\r\n\r\n// const selectTitleReducer = (state=initialState, action={}) => {\r\n//     switch(action.type){\r\n//         case SELECT_TITLE:\r\n//             let lists = [ MISSIONS, TASKS, INBOX, REFERENCES, DUE_TODAY]\r\n//             let view = OVERVIEW;\r\n//             if (lists.indexOf(action.payload) !== -1) {\r\n//                 view = LIST;\r\n//             }\r\n//             return Object.assign({}, state, {title: action.payload, view: view, previousTitle: state.title, previousState: state});\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\nconst values = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SELECT_TITLE:\r\n            let lists = [ MISSIONS, TASKS, INBOX, REFERENCES, EVENTS, TODAY ]\r\n            let view = OVERVIEW;\r\n            let ID = 0;\r\n            if (lists.indexOf(action.payload) !== -1) {\r\n                view = LIST;\r\n            } \r\n            if (((lists.indexOf(action.payload) !== -1) && state.view === NEW) || (action.payload === NEW_ITEM) ) {\r\n                view = \"NEW\"\r\n            }\r\n            return Object.assign({}, state, {title: action.payload, view: view, itemID:ID, previousTitle: state.title, previousState: state});\r\n        case CHANGE_NAV:\r\n            if(action.payload.title === MISSIONS){state.missionID = action.payload.ID}\r\n            return Object.assign({}, state, {title: action.payload.title, view: action.payload.view, itemID:action.payload.ID, previousTitle: state.title, previousItemID: state.itemID, previousView: state.view, missionID : state.missionID, previousState: state});\r\n        case SELECT_ITEM:\r\n            //action.payload.title === MISSIONS ? state.missionID = action.payload.ID : state.missionID = 0;\r\n            return Object.assign({}, state, {itemID: action.payload, previousItemID: state.itemID, previousState: state});\r\n        case SELECT_VIEW:\r\n            //action.payload.title === MISSIONS ? state.missionID = action.payload.ID : state.missionID = 0;\r\n            return Object.assign({}, state, {view: action.payload, previousView: state.view, previousState: state});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst RestorePreviousStateReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case RESTORE_PREVIOUS_STATE:\r\n            if(state.previousState === {}) {\r\n                break;\r\n            } else {\r\n                return Object.assign({}, state.previousState );\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateExpReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_EXP:\r\n            console.log(action);\r\n            console.log(state);\r\n            let newXP, newTimestamp;\r\n            if (parseInt(action.expTimeStamp) === parseInt(state.expTimestamp)) {\r\n                newXP = 0;\r\n                newTimestamp = parseInt(state.expTimestamp);\r\n            } else {\r\n                newXP = parseInt(action.payload);\r\n                newTimestamp = parseInt(action.expTimestamp);\r\n                //console.log(\"new xp = \", newXP)\r\n            }\r\n            return Object.assign({}, state, {exp: (state.exp + newXP), expTimestamp: newTimestamp});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateTaskStatusReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_TASK_STATUS:\r\n            return Object.assign({}, state, {taskStatus: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialActiveTask = {\r\n    activeTask: {},\r\n    activeSince: 0,\r\n    timeNow: (new Date()).getTime(),\r\n    timerOn: false\r\n}\r\n\r\nconst SetActiveTaskReducer = (state=initialActiveTask, action={}) => {\r\n    switch(action.type){\r\n        case SET_ACTIVE_TASK:\r\n            let lastActive;\r\n            //action.payload.timeSpent === 0 ? lastActive = (new Date()).getTime() : lastActive = action.payload.activeSince;\r\n\r\n            console.log(\"from AT Reducer: \", state)\r\n            let timerOn;\r\n            action.payload.status === ACTIVE && state.timerOn === false ? timerOn = true : timerOn = false\r\n            return Object.assign({}, state, {activeTask: action.payload, activeSince: action.payload.activeSince, timerOn });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n//let serverLink = \"http://localhost:5000\";// \"https://secret-citadel-16777.herokuapp.com/\"\r\n\r\n\r\n//////////////////////////////////////////////// 17.10.2020 async app upgrade\r\n\r\n/// State shape\r\n\r\n\r\nfunction SelectRecordReducer(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_RECORD:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction items(\r\n  state = initialState,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_RECORD:\r\n      return Object.assign({}, state, { records: {didInvalidate: true} })\r\n    case REQUEST_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: true,\r\n          didInvalidate: false\r\n        }\r\n      })\r\n    case RECEIVE_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: false,\r\n          didInvalidate: false,\r\n          receivedAt: action.receivedAt,\r\n          items: action.items\r\n        }\r\n      })\r\n    case PACK_ITEMS:\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: true,\r\n                deliveredAt: 0\r\n            },\r\n        })\r\n    case DELIVER_ITEMS:\r\n        console.log(\"Special Delivery: \", action.payload)\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: false,\r\n                deliveredAt: action.deliveredAt,\r\n                updateAcknowledged: false\r\n            },\r\n        })\r\n    case CREATE_ALERT:\r\n        let alertArray = state.alerts\r\n        alertArray.unshift(action.payload)\r\n\r\n        // payload: {\r\n        //     timeStamp: Date.now(),\r\n        //     message: msg,\r\n        //   }\r\n\r\n        return Object.assign({}, state, {\r\n            alerts: alertArray\r\n        })\r\n    case CLOSE_ALERT:\r\n        alertArray = state.alerts\r\n        //alertArray.indexOf(action.payload)\r\n        function notAlerted(element){\r\n            return element !== action.payload\r\n        }\r\n        \r\n        return Object.assign({}, state, {\r\n            alerts: alertArray.filter(notAlerted)\r\n        })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({r\n    values, UpdateExpReducer, RestorePreviousStateReducer, \r\n    UpdateTaskStatusReducer, SetActiveTaskReducer, \r\n    SelectRecordReducer, items\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './tachyonBoost.css';\r\nimport rootReducer from './reducers';\r\nimport { SelectRecord, FetchItems } from './actions';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\n// store\r\n//   .dispatch(fetchPostsIfNeeded('reactjs'))\r\n//   .then(() => console.log(store.getState()))\r\n\r\nstore.dispatch(SelectRecord('reactjs')) ;\r\nstore.dispatch(FetchItems('reactjs'));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}