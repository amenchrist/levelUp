{"version":3,"sources":["assets/trash1600.png","constants.js","actions.js","components/HomeButton.js","components/ProjectsButton.js","components/TasksButton.js","components/InboxButton.js","components/StatsButton.js","functions.js","containers/NavBar.js","components/ListItem.js","components/Scroll.js","components/List.js","components/NewItemButton.js","classes.js","components/NewTask.js","components/NewMission.js","components/NewItem.js","components/QuestionAndOptions.js","components/QuestionAndInput.js","ReferenceList.js","components/DatePicker.js","components/TaskControls.js","containers/Processor.js","components/PrevItemButton.js","components/NextItemButton.js","components/ItemDetails.js","components/Timer.js","components/TaskDetails.js","components/ProjectDetails.js","components/BackButton.js","components/ReferenceDetails.js","components/TrashButton.js","components/CompletedItemDetails.js","components/TrashedItemDetails.js","components/ReminderDetails.js","containers/Details.js","components/ActiveTaskTimer.js","components/SyncStatusDot.js","components/StatsOverview.js","components/TasksOverview.js","components/ProjectsOverview.js","components/InboxOverview.js","components/NewItemTile.js","components/TodaysMission.js","containers/Home.js","containers/Stats.js","containers/Main.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","PROJECTS","TASKS","INBOX","TASK","REFERENCES","SOMEDAY","TRASH","ASAP","LIST","DETAILS","NEW","ADD","REMOVE","ChangeNav","navObj","type","payload","selectTitle","title","selectItem","itemID","selectView","view","UpdateExp","exp","RestorePreviousState","previousState","UpdateTaskStatus","status","SetActiveTask","task","FetchItems","record","dispatch","RequestItems","fetch","serverLink","then","response","json","console","log","items","receivedAt","Date","now","ReceiveItems","catch","error","setTimeout","ShipItems","agent","PackItems","method","mode","headers","body","JSON","stringify","deliveredAt","DeliverItems","HomeButton","touchFunction","className","data-view","onClick","ProjectsButton","TasksButton","InboxButton","StatsButton","setNavValues","e","navChanger","state","navTitle","navID","navView","targ","target","checkForTitle","t","parentNode","checkForID","id","checkForView","getAttribute","parseInt","nav","ID","pushChanges","action","item","list","shippingFunction","pushDate","getTime","convertDateToMilliseconds","d","m","y","split","displayDays","dueDate","days","Math","ceil","abs","ammendList","db","dbList","localList","itemndx","indexOf","splice","unshift","connect","values","changeNav","props","handleEvent","nextTitle","isTrashed","name","taskList","length","toDateString","requiredContext","date","processedDate","entryDate","toLocaleString","trashedDate","Scroll","style","overflowY","overflowX","children","changeItemID","dueToday","todaysTasks","dailyEx","dailyTasks","content","filteredContent","filter","entry","toISOString","substr","map","i","ListItem","key","frequency","ListItems","changeView","Item","this","description","Task","outcome","associatedProjectID","priority","timeSpent","outcomeRecordID","note","timeRequired","timeRemaining","requirements","Project","purpose","outputRecordID","setInterval","timeNow","nextAction","principles","Reference","details","Reminder","onTouch","shipItems","updateExp","TaskList","Tasks","today","useState","setName","setOutcome","setRequiredContext","setNote","setDueDate","setAgent","setPriority","setRequirements","onSubmit","event","projID","proj","Projects","addToProjectTasks","changeNavigation","preventDefault","autoFocus","placeholder","value","onChange","htmlFor","min","disabled","defaultValue","ProjectList","setPurpose","setDescription","Mission","changeTitle","submitFunction","InboxItems","Inbox","submitNewItem","displayTypeForm","QuestionAndOptions","question","yes","no","QuestionandInput","answer","setAnswer","previousView","UpdateExpReducer","UpdateTaskStatusReducer","taskStatus","activeTask","SetActiveTaskReducer","activeSince","dateValue","setdate","changeDate","setchangeDate","isASAP","setIsASAP","useEffect","onBlur","updateTaskStatus","setActiveTask","position","prevTimeSpent","startTimer","pauseTask","dateNow","markAsDone","doneDate","Completed","undefined","nextItemID","itemIndex","ProcessedItems","Processed","SomedayList","Someday","References","Reminders","Trash","isActionable","setIsActionable","isMultistep","setIsMultistep","isDoneInFive","setIsDoneInFive","isDelegatable","setIsDelegatable","step","setStep","nextID","setNextID","isDoneInaYear","setIsDoneInaYear","newProjectID","setNewProjectID","setNewTaskID","newProject","setNewProject","newTask","setNewTask","assignedAgent","setAssignedAgent","trashed","incubated","setIncubated","referenced","setReferenced","newReference","setNewReference","refDetails","setRefDetails","newReminder","setNewReminder","makeNewTask","asProjID","theOutcome","updateStatus","processNextItem","proceed","ref","makeNewReference","rem","makeNewReminder","rows","cols","DatePicker","viewNewReminder","makeNewProject","PrevItemButton","selectAnother","prevID","currentID","NextItemButton","indx","readyToProcess","setReadyToProcess","s","secs","mins","hrs","seconds","setSeconds","minutes","setminutes","hours","sethours","isActive","setIsActive","isUpdated","setIsUpdated","interval","clearInterval","minimumIntegerDigits","relevantList","associatedProject","setrequiredContext","setoutcome","setdueDate","setnote","lastUpdated","updateDB","obj","property","newVal","TaskControls","RestorePreviousStateReducer","restorePreviousState","project","concat","projectTasks","tasks","j","push","getTasks","setTimeRequired","missionID","previousTitle","previousItemID","reference","setDetails","currentlist","currentItem","ProcessedList","src","trashCan","alt","calculateTime","WaitingFor","x","getproject","prev","next","BackButton","TrashButton","ProjectDetails","TaskDetails","ReferenceDetails","ReminderDetails","CompletedItemDetails","TrashedItemDetails","stopPropagation","isShipping","latestUpdate","color","StatsOverview","SyncStatusDot","ActiveTaskTimer","TaskOverview","ProjectsOverview","projects","InboxOverview","inbox","NewItemTile","TodaysMission","gotoItem","openList","recordState","isFetching","NewItem","Boolean","window","location","hostname","match","initialState","didInvalidate","initialActiveTask","rootReducer","combineReducers","lists","Object","assign","SelectRecordReducer","records","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.566d23bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash1600.4a1c4989.png\";","// Actions\r\nexport const SELECT_VIEW = 'SELECT_VIEW';\r\nexport const SELECT_TITLE = 'SELECT_TITLE';\r\nexport const UPDATE_EXP = 'UPDATE_EXP';\r\nexport const SELECT_PROJECT = 'SELECT_PROJECT';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const RESTORE_PREVIOUS_STATE = 'RESTORE_PREVIOUS_STATE';\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS';\r\nexport const SET_ACTIVE_TASK = 'SET_ACTIVE_TASK';\r\nexport const RETRIEVE_DB = 'RETRIEVE_DB';\r\nexport const REFRESH_DB = 'REFRESH_DB';\r\nexport const CHANGE_NAV = 'CHANGE_NAV';\r\n\r\n//\r\nexport const HOME = 'HOME';\r\nexport const MISSIONS = 'MISSIONS';\r\nexport const PROJECTS = 'PROJECTS';\r\nexport const TODAY = 'TODAY';\r\nexport const STATS = 'STATS';\r\nexport const SKILLS = 'SKILLS';\r\nexport const TASKS = 'TASKS';\r\nexport const INBOX = 'INBOX';\r\nexport const PROJECT = 'PROJECT';\r\nexport const REMINDER = 'REMINDER';\r\nexport const TASK = 'TASK';\r\nexport const INBOX_ITEM = 'INBOX_ITEM';\r\nexport const NEW_ITEM = 'NEW_ITEM';\r\nexport const REFERENCES = 'REFERENCES';\r\nexport const REFERENCE = 'REFERENCE';\r\nexport const MISSION = 'MISSION';\r\nexport const CALENDAR = 'CALENDAR';\r\nexport const REMINDERS = 'REMINDERS';\r\nexport const SOMEDAY = 'SOMEDAY';\r\nexport const TRASH = 'TRASH';\r\nexport const COMPLETED = 'COMPLETED';\r\nexport const WAITING_FOR = 'WAITING_FOR';\r\nexport const ASAP = 'ASAP';\r\nexport const MISSION_TASKS = 'MISSION_TASKS';\r\n\r\n\r\n//VIEWS\r\nexport const OVERVIEW = 'OVERVIEW';\r\nexport const LIST = 'LIST';\r\nexport const DETAILS = 'DETAILS';\r\nexport const NEW = 'NEW';\r\n\r\n//TITLES\r\n// export const INBOX = 'INBOX';\r\n// export const TASKS = 'TASKS';\r\n\r\n//Actions to push\r\nexport const ADD = 'ADD';\r\nexport const REMOVE = 'REMOVE';\r\nexport const UPDATE = 'UPDATE';\r\n\r\n\r\n// Status constants\r\n//STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\nexport const UNPLANNED = 'UNPLANNED';\r\nexport const UNPROCESSED = 'UNPROCESSED';\r\nexport const PROCESSED = 'PROCESSED';\r\nexport const PENDING = 'PENDING';\r\nexport const DELEGATION_PENDING = 'DELEGATION_PENDING';\r\nexport const STARTED = 'STARTED';\r\nexport const DONE = 'DONE';\r\nexport const ONGOING = 'ONGOING';\r\nexport const COMPLETE = 'COMPLETE';\r\nexport const PAUSED = 'PAUSED';\r\nexport const ACTIVE = 'ACTIVE';\r\n//\r\n\r\nexport const LOW = 'LOW';\r\nexport const MEDIUM = 'MEDIUM';\r\nexport const HIGH = 'HIGH';\r\n\r\n\r\n\r\n//For frequency/recurring\r\nexport const NONE = 'NONE';\r\nexport const DAILY = 'DAILY';\r\nexport const WEEKLY = 'WEEKLY';\r\nexport const MONTHLY = 'MONTHLY';\r\nexport const FORTHNIGHTLY = 'FORTHNIGHTLY';\r\nexport const THREE_MONTHS = 'THREE_MONTHS';\r\nexport const SIX_MONTHS = 'SIX_MONTHS';\r\nexport const YEARLY = 'YEARLY';\r\n//","import { \r\n    SELECT_VIEW, SELECT_PROJECT, SELECT_TASK, SELECT_TITLE, SELECT_ITEM, \r\n    UPDATE_EXP, RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, \r\n    SET_ACTIVE_TASK, RETRIEVE_DB, REFRESH_DB, CHANGE_NAV\r\n  } from './constants';\r\n\r\nexport const ChangeNav = (navObj) => {\r\n  return {\r\n    type: CHANGE_NAV,\r\n    payload: navObj\r\n  }\r\n}\r\nexport const selectTitle = (title) => {\r\n  return {\r\n  type: SELECT_TITLE,\r\n  payload: title\r\n}};\r\n\r\nexport const selectItem = (itemID) => {\r\n  return {\r\n  type: SELECT_ITEM,\r\n  payload: itemID\r\n}};\r\n\r\nexport const selectView = (view) => {\r\n  return {\r\n  type: SELECT_VIEW,\r\n  payload: view\r\n}};\r\n\r\nexport const selectProject = (projectID) => {\r\n    return {\r\n    type: SELECT_PROJECT,\r\n    payload: projectID\r\n}};\r\n\r\nexport const selectTask = (taskID) => {\r\n    return {\r\n    type: SELECT_TASK,\r\n    payload: taskID\r\n}};\r\n\r\nexport const UpdateExp = (exp) => {\r\n    return {\r\n    type: UPDATE_EXP,\r\n    payload: exp\r\n}};\r\n\r\nexport const RestorePreviousState = (previousState) => {\r\n    return {\r\n    type: RESTORE_PREVIOUS_STATE,\r\n    payload: previousState\r\n}};\r\n\r\nexport const UpdateTaskStatus = (status) => {\r\n    return {\r\n    type: UPDATE_TASK_STATUS,\r\n    payload: status\r\n}};\r\n\r\nexport const SetActiveTask = (task) => {\r\n    return {\r\n    type: SET_ACTIVE_TASK,\r\n    payload: task\r\n}};\r\n\r\nexport const RetrieveDB = (database) => {\r\n    return {\r\n        type: RETRIEVE_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\nexport const RefreshDB = (database) => {\r\n    return {\r\n        type: REFRESH_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\n////////////////////\r\n\r\n// ASYNC REQUESTS\r\n\r\nexport const SELECT_RECORD = 'SELECT_RECORD';\r\n\r\nexport function SelectRecord(record) {\r\n  return {\r\n    type: SELECT_RECORD,\r\n    payload: record\r\n  }\r\n}\r\n\r\nexport const INVALIDATE_RECORD = 'INVALIDATE_RECORD';\r\n\r\nexport function InvalidateRecord(record) {\r\n  return {\r\n    type: INVALIDATE_RECORD,\r\n    record\r\n  }\r\n}\r\n\r\nexport const REQUEST_ITEMS = 'REQUEST_ITEMS';\r\n\r\nexport function RequestItems(record) {\r\n  return {\r\n    type: REQUEST_ITEMS,\r\n    record\r\n  }\r\n}\r\n\r\nexport const RECEIVE_ITEMS = 'RECEIVE_ITEMS';\r\n\r\nexport function ReceiveItems(record, json) {\r\n  return {\r\n    type: RECEIVE_ITEMS,\r\n    record,\r\n    items: json,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n\r\n//import fetch from 'cross-fetch'\r\n\r\n\r\n\r\nexport function FetchItems(record) {\r\n  return dispatch => {\r\n    dispatch(RequestItems(record))\r\n    return fetch(serverLink) //https://secret-citadel-16777.herokuapp.com/\r\n      .then(response => response.json())\r\n      .then(json => { console.log(json); dispatch(ReceiveItems(record, json))})\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        setTimeout(dispatch(FetchItems(record)), 5000);\r\n      })\r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  // Note that the function also receives getState()\r\n  // which lets you choose what to dispatch next.\r\n\r\n  // This is useful for avoiding a network request if\r\n  // a cached value is already available.\r\n\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      // Dispatch a thunk from thunk!\r\n      return dispatch(FetchItems(subreddit))\r\n    } else {\r\n      // Let the calling code know there's nothing to wait for.\r\n      return Promise.resolve()\r\n    }\r\n  }\r\n}\r\n\r\n////////////////////////////////////\r\n\r\nexport const PACK_ITEMS = 'PACK_ITEMS';\r\n\r\nexport function PackItems(items) {\r\n  return {\r\n    type: PACK_ITEMS,\r\n    payload: items\r\n  }\r\n}\r\n\r\nexport const DELIVER_ITEMS = 'DELIVER_ITEMS';\r\n\r\nexport function DeliverItems(agent, json) { // record/agent/destination\r\n  return {\r\n    type: DELIVER_ITEMS,\r\n    agent,\r\n    payload: json,\r\n    deliveredAt: Date.now()\r\n  }\r\n}\r\n\r\n// const testItem = {\r\n//   content: \"this is a test item fom the front end\"\r\n// }\r\n\r\nconst agent1 = \"amen\"\r\n\r\n\r\nexport function ShipItems(items, agent, record) {\r\n  return dispatch => {\r\n    dispatch(PackItems(items))\r\n    console.log(\"packed items: \", items)\r\n    return fetch(`${serverLink}${agent1}`, { \r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(items)\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => dispatch(DeliverItems(agent, json)))\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        setTimeout(ShipItems(items, agent), 5000);\r\n      })\r\n  }\r\n}\r\n\r\nconst serverLink = \"https://secret-citadel-16777.herokuapp.com/\";\r\n//const serverLink2 = \"http://localhost:5000/\";","import React from 'react';\r\nimport { HOME, OVERVIEW } from '../constants';\r\n\r\nexport default function HomeButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={OVERVIEW}  title={HOME} onClick={touchFunction}>\r\n            <h3 className='tc'>H</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function ProjectsButton({touchFunction}) {\r\n    return (\r\n        <div className='w-20 center bg-white ba b--black-10 flex items-center justify-center' data-view={LIST}  title=\"PROJECTS\" onClick={touchFunction}>\r\n            <h3 className='tc'>M</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function TasksButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={LIST} title=\"TASKS\" onClick={touchFunction}>\r\n            <h3 className='tc'>T</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function InboxButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={LIST}  title=\"INBOX\" onClick={touchFunction}>\r\n            <h3 className='tc'>I</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { OVERVIEW } from '../constants';\r\n\r\nexport default function StatsButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={OVERVIEW} title=\"STATS\" onClick={touchFunction}>\r\n            <h3 className='tc'>S</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","/// For all the extra functions required in multiple places\r\n\r\nimport { ShipItems } from \"./actions\";\r\nimport { ADD, ASAP, COMPLETED, INBOX, PROCESSED, PROJECTS, REFERENCES, REMINDERS, REMOVE, SOMEDAY, TASKS, TRASH, UPDATE } from \"./constants\";\r\n\r\n\r\n\r\nexport function passTitleAndID(e, ChangeTitleFunction, changeIDFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            changeIDFunction(t.id);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n}\r\n\r\nexport function setNavValues(e, navChanger, state){\r\n    let targ = e.target;\r\n    let navTitle;\r\n    checkForTitle(targ);\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            navTitle = t.title;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    let navID;\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            navID = t.id;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n    let navView;\r\n    checkForView(targ);\r\n    function checkForView (t) {\r\n        //console.log(\"target name: \", t.tagName)\r\n        if (t.getAttribute('data-view')) {\r\n            navView = t.getAttribute('data-view');\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForView (t);   \r\n        }\r\n    }\r\n   \r\n    !(parseInt(navID) >= 0) ? navID = 0 : console.log(\"\");\r\n\r\n    const nav = {\r\n        title: navTitle,\r\n        view: navView,\r\n        ID: navID\r\n    }\r\n    console.log(nav)\r\n    navChanger(nav);\r\n}\r\n\r\n\r\nexport function pushChanges(action, item, list, shippingFunction){\r\n    let state = {\r\n        action: action,\r\n        list: list,\r\n        item: item,\r\n        pushDate: (new Date()).getTime()\r\n    }\r\n    shippingFunction(state);\r\n}\r\n\r\n\r\n\r\nexport function calculateTime(timeSpent){\r\n\r\n    //CALCULATE TIME SPENT\r\n    console.log(\"timespent from calcTime: \", timeSpent)\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let seconds = s % 60;\r\n    s = (s - seconds) / 60;\r\n    let minutes = s % 60;\r\n    let hours = (s - minutes) / 60;\r\n    return `${hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})}` \r\n}\r\n\r\n\r\nexport function convertDateToMilliseconds(d) {\r\n    let m,y;\r\n    [y, m, d] = d.split(\"-\"); //Split the string\r\n     ;\r\n     return new Date(...[y, m - 1, d]).getTime() //Return as an array with y,m,d sequence\r\n  }\r\n\r\n\r\nexport function displayDays(dueDate){\r\n    if (dueDate === ASAP) {\r\n        return ASAP;\r\n    } else {\r\n        let days = Math.ceil((dueDate - new Date().getTime()) / (1000*60*60*24));\r\n        switch(true){\r\n            case days <= -1:\r\n                return `${Math.abs(days)} days ago`;\r\n            case days > 1:\r\n                return `${days} days `;\r\n            case days === 1:\r\n                return `${days} day `;\r\n            case Math.abs(days) === 0:\r\n                return `TODAY `;\r\n            default:\r\n                return `${days} days `;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function ammendList(db, list, item, action, shippingFunction){\r\n    // lists = [ PROJECTS, TASKS, INBOX, REFERENCES, REMINDERS, SOMEDAY, COMPLETED, PROCESSED, TRASH ]\r\n    \r\n    let dbList;\r\n    switch (list) {\r\n        case PROJECTS:\r\n            dbList = \"Projects\"\r\n        break;\r\n        case INBOX:\r\n            dbList = \"Inbox\"\r\n        break;\r\n        case REFERENCES:\r\n            dbList = \"References\"\r\n        break;\r\n        case REMINDERS:\r\n            dbList = \"Reminders\"\r\n        break;\r\n        case TASKS:\r\n            dbList = \"Tasks\"\r\n        break;\r\n        case SOMEDAY:\r\n            dbList = \"Someday\"\r\n        break;\r\n        case PROCESSED:\r\n            dbList = \"Processed\"\r\n        break;\r\n        case TRASH:\r\n            dbList = \"Trash\"\r\n        break;\r\n        default:\r\n    }\r\n\r\n    let localList = db[dbList];\r\n    let itemndx = localList.indexOf(item);\r\n\r\n    console.log(\"local list = \", localList)\r\n    console.log(\"ammendment action = \", action)\r\n    console.log(\"index of item = \", itemndx)\r\n    switch (action) {\r\n        case REMOVE:\r\n            localList.splice(itemndx, 1);\r\n            pushChanges(REMOVE, item, dbList, shippingFunction);\r\n        break;\r\n        case ADD:\r\n            localList.unshift(item);\r\n            pushChanges(ADD, item, dbList, shippingFunction);\r\n        break;\r\n        case UPDATE:\r\n            localList[itemndx] = item;\r\n            pushChanges(UPDATE, item, dbList, shippingFunction);\r\n        break;\r\n        default:\r\n    }\r\n\r\n    console.log(\"local list post ammendment = \", localList)\r\n}\r\n/* \r\n\r\nfunction changeNavigation(id, navChanger){\r\n    let nav;\r\n    if(title === PROJECTS) {\r\n        nav = {\r\n            title: PROJECTS,\r\n            view: \"DETAILS\",\r\n            ID: itemID\r\n        }\r\n    } else {\r\n        nav = {\r\n            title: title,\r\n            view: \"DETAILS\",\r\n            ID: id\r\n        }\r\n    }\r\n    changeNav(nav);\r\n}\r\n\r\n*/\r\n\r\n// export function passTitle(e, ChangeTitleFunction) {\r\n//     let targ = e.target;\r\n//     checkForTitle(targ)\r\n//     function checkForTitle (t) {\r\n//         if (t.title) {\r\n//             ChangeTitleFunction(t.title);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForTitle (t);   \r\n//         }\r\n//     }\r\n// }\r\n\r\n// function passKey(e, changeIDFunction) {\r\n//     //Takes the events target and checks for title attribute \r\n//     //If no title attribute, check parent node for title attribute\r\n//     //If not found, repeat step 2\r\n//     let targ = e.target;\r\n//     checkForID(targ);\r\n//     function checkForID (t) {\r\n//         if (t.id) {\r\n//             changeIDFunction(t.id);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForID (t);   \r\n//         }\r\n//     }\r\n// }","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeButton from '../components/HomeButton';\r\nimport ProjectsButton from '../components/ProjectsButton';\r\nimport TasksButton from '../components/TasksButton';\r\nimport InboxButton from '../components/InboxButton';\r\nimport StatsButton from '../components/StatsButton';\r\nimport { ChangeNav } from '../actions';\r\nimport { setNavValues } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { changeNav, state } = props;\r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='navbar center flex'>\r\n            <HomeButton touchFunction={handleEvent} />\r\n            <InboxButton touchFunction={handleEvent} />\r\n            <TasksButton touchFunction={handleEvent} />\r\n            <ProjectsButton touchFunction={handleEvent} />\r\n            <StatsButton touchFunction={handleEvent} />\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PROJECT, TASK, INBOX_ITEM, TASKS, DONE, COMPLETED, DETAILS, PROJECTS, INBOX, TRASH, CALENDAR, MISSION_TASKS, SOMEDAY, REMINDER, REMINDERS, REFERENCES, REFERENCE, PROCESSED } from '../constants';\r\nimport { displayDays } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem);\r\n\r\nfunction ListItem( { touchFunction, item, title }){\r\n    \r\n    let nextTitle;\r\n\r\n    switch(true){\r\n        case item.type === PROJECT && !item.isTrashed:\r\n            title === SOMEDAY ? nextTitle = SOMEDAY : nextTitle = PROJECTS;\r\n            //let days = parseInt(Math.floor(total_hours / 24));\r\n            let days = (item.dueDate / (1000*60*60*24)) % 7;\r\n            console.log('days: ', days);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' title={item.isTrashed ? TRASH : nextTitle} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80 '>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        <p className='fw3 white'>Due: {displayDays(item.dueDate)}, Tasks: {item.taskList.length}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === TASK && !item.isTrashed:\r\n            item.status === DONE ? nextTitle = COMPLETED : nextTitle = TASKS;\r\n            if(title === PROJECTS){nextTitle = MISSION_TASKS};\r\n            if(title === SOMEDAY){nextTitle = SOMEDAY};\r\n            console.log(nextTitle);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{title === CALENDAR ? new Date(item.dueDate).toDateString() : item.requiredContext}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>{item.status}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === REMINDER && !item.isTrashed:\r\n            nextTitle = REMINDERS;\r\n            console.log(nextTitle);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{new Date(item.date).toDateString()}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>REM</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === REFERENCE && !item.isTrashed:\r\n        nextTitle = REFERENCES;\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    {/* <p className='fw3 white'>{new Date(item.dueDate).toDateString()}</p> */}\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>REF</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.status === PROCESSED && !item.isTrashed:\r\n        nextTitle = PROCESSED;\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{new Date(item.processedDate).toDateString()}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>PROCESSED</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === INBOX_ITEM && !item.isTrashed:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' \r\n                title={item.isTrashed ? TRASH : INBOX} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>Entered: {(new Date(item.entryDate)).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>PROCESS</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.isTrashed:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' \r\n                title={TRASH} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>DELETED: {(new Date(item.trashedDate)).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>{item.type}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='bb' title='new item' onClick={touchFunction}>\r\n                    <h3>Enter New Item</h3>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='h-100' style={{overflowY: 'scroll', overflowX: 'hidden'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, ChangeNav } from '../actions';\r\nimport ListItem from './ListItem';\r\nimport Scroll from './Scroll';\r\nimport { TASK, TASKS, PROJECTS, PROJECT, INBOX_ITEM, TODAY, DAILY, DONE, REFERENCE, REFERENCES, COMPLETED, INBOX, ASAP, CALENDAR } from '../constants';\r\nimport { setNavValues  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/////////////////////////////////////////////////\r\n\r\n\r\nfunction List({ content, changeItemID, title, state, changeNav }) {\r\n\r\n    //console.log(\"first contetn: \", content)\r\n    function handleEvent(e ) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    let missionTasks, dueToday, todaysTasks, dailyEx, dailyTasks;\r\n    \r\n\r\n    \r\n    // Project, Task, Inbox and Reference Lists \r\n    let type = '';\r\n    let status;\r\n    let filteredContent = []\r\n    switch(title){\r\n        case TASKS:\r\n            type = TASK;\r\n            filteredContent = content\r\n        break;\r\n        case PROJECTS:\r\n            //type = PROJECT;\r\n            filteredContent = content;\r\n            //filteredContent = content.filter((entry) => (entry.type === type));\r\n            // A Mission's Tasklist\r\n            // missionTasks = content.map((entry,i ) => {\r\n            //     return <ListItem item={content[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n            // })\r\n        break;\r\n        case TODAY:\r\n            type = TASK;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n\r\n            // Today's Mission\r\n            dueToday = content.filter((entry) => ( \r\n                ((entry.dueDate != ASAP) && ( new Date(entry.dueDate).toISOString().substr(0, 10) === new Date().toISOString().substr(0, 10) )) && entry.status !== DONE ) );\r\n            \r\n            todaysTasks = dueToday.map((entry,i ) => {\r\n                return <ListItem item={dueToday[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n            })\r\n        break;\r\n        case DAILY:\r\n            type = TASK;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n            // Daily exercises\r\n            dailyEx = content.filter((entry) => (entry.frequency === DAILY ));\r\n            dailyTasks = dailyEx.map((entry, i) => {\r\n                return <ListItem item={dailyEx[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n            })\r\n        break;\r\n        case REFERENCES:\r\n            type = REFERENCE;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n        break;\r\n        case COMPLETED:\r\n            status = DONE;\r\n            filteredContent = content.filter((entry) => (entry.status === status));\r\n        break;\r\n        case INBOX:\r\n            type = INBOX_ITEM;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n        break;\r\n        case CALENDAR:\r\n            filteredContent = content.filter((entry) => (entry.dueDate !== ASAP));\r\n        break;\r\n        default:\r\n            filteredContent = content;\r\n    }\r\n\r\n    //console.log(\"filtered COntent: \", filteredContent);\r\n    //console.log(\"COntent: \", content);\r\n     \r\n\r\n    const ListItems = filteredContent.map((entry,i) => {\r\n        return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n\r\n    switch(title){\r\n        case TODAY:\r\n            return (\r\n                <Scroll>\r\n                    {todaysTasks}\r\n                </Scroll>\r\n            )\r\n        case DAILY:\r\n            return (\r\n                <Scroll>\r\n                    {dailyTasks}\r\n                </Scroll>\r\n            )\r\n        // case PROJECTS:\r\n        //     return (\r\n        //         <Scroll>\r\n        //             {missionTasks}\r\n        //         </Scroll>\r\n        //     )\r\n        default:\r\n            return (\r\n                <Scroll>\r\n                    {ListItems}\r\n                </Scroll>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from '../actions';\r\nimport { NEW } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeView: (view) => {\r\n            return dispatch(selectView(view))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItemButton({ changeView }) {\r\n\r\n    return (\r\n        <div className='whiteB w2 h2 flex items-center justify-center' data-view={NEW} onClick={ () => changeView(NEW)}>\r\n            <h1 className=' white b f8 fw9 ma0'>+</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItemButton);","import {TASK, PENDING, PROJECT, UNPLANNED, ASAP, UNPROCESSED, INBOX_ITEM, REMINDER, REFERENCE } from './constants';\r\n\r\nexport class Item{\r\n    constructor(name,description='None') {\r\n        const d= new Date();\r\n\r\n        this.type = INBOX_ITEM;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.description = '';\r\n        this.status = UNPROCESSED;\r\n\r\n    }\r\n}\r\n\r\nexport class Task{\r\n    constructor(name,outcome, requiredContext, associatedProjectID = 0, dueDate = ASAP) {\r\n        const d = new Date();\r\n        this.type = TASK;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.priority = 'NONE';\r\n        this.frequency = 0;\r\n        this.timeSpent = 0;\r\n        this.outcomeRecordID = 0;\r\n        this.name = name;\r\n        this.outcome = outcome;\r\n        this.requiredContext = requiredContext;\r\n        this.note = '';\r\n        this.dueDate = dueDate//(new Date()).toISOString().substr(0, 10);\r\n        this.timeRequired = 0;\r\n        this.timeRemaining = 0;\r\n        this.requirements = '';\r\n        this.associatedProjectID = associatedProjectID;\r\n        this.exp = 10;\r\n        this.description = '';\r\n        this.agent = '';\r\n        \r\n    }\r\n}\r\n\r\nexport class Project{\r\n    constructor(outcome ='', purpose ='', description = '', dueDate = ASAP, requirements = '', priority, frequency = '' ) {\r\n        const d = new Date();\r\n        this.type = PROJECT;        \r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = outcome;\r\n        this.description = description;\r\n        this.outputRecordID = null;\r\n        this.dueDate = dueDate //(new Date(parseInt((d.getTime() + 7776000000)))).toISOString().substr(0, 10); // 3 months from the date the project is planned \r\n        this.timeRequired = 7776000000;\r\n        this.timeSpent = 0;\r\n        this.timeRemaining = setInterval(()=> {\r\n            let timeNow = (new Date()).getTime();\r\n            return (this.dueDate - timeNow)\r\n        }, 1);\r\n        this.status = UNPLANNED;\r\n        this.nextAction = {};\r\n        this.taskList = [];\r\n        this.principles = '';\r\n        this.requirements = requirements;\r\n        this.exp = 50;\r\n        this.purpose = purpose;\r\n        this.priority = priority;\r\n        this.frequency = frequency;\r\n        this.note = '';\r\n    }\r\n}\r\n\r\nexport class Reference{\r\n    constructor(name, details='') {\r\n        const d= new Date();\r\n        this.type = REFERENCE;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nexport class Reminder{\r\n    constructor(name, date = new Date().getTime(), note ='') {\r\n        const d= new Date();\r\n        this.type = REMINDER;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.note = note;\r\n        this.date = date;\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, TASK, MEDIUM, HIGH, PROJECTS } from '../constants';\r\nimport { selectView, selectItem, ShipItems, ChangeNav } from '../actions';\r\nimport { Task, Project } from '../classes';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewTask({ changeItemID, updateExp, shipItems, itemID, db, changeNav, title }) {\r\n\r\n    const TaskList = db.Tasks;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState((new Date()).toISOString().substr(0, 10));\r\n    const [ agent, setAgent ] = useState('');\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ associatedProjectID, setAssociatedProjectID ] = useState(itemID);\r\n\r\n    // class Task{\r\n    //     constructor() {\r\n    //         const d= new Date();\r\n\r\n    //         setFrequency(0);\r\n    //         setAssociatedProject({});\r\n\r\n    //         this.type = TASK;\r\n    //         this.id = d.getTime();\r\n    //         this.entryDate = d.getTime();\r\n    //         this.status = PENDING;\r\n    //         this.priority = priority;\r\n    //         this.frequency = frequency;\r\n    //         this.timeSpent = 0;\r\n    //         this.outcomeRecordID = 0;\r\n    //         this.name = name;\r\n    //         this.outcome = outcome;\r\n    //         this.requiredContext = requiredContext;\r\n    //         this.note = note;\r\n    //         this.dueDate = dueDate;\r\n    //         this.timeRequired = 0;\r\n    //         this.requirements = requirements;\r\n    //         this.associatedProject = associatedProject;\r\n    //         this.exp = 10;\r\n    //     }\r\n    // }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        let t = new Task(name, outcome, requiredContext, associatedProjectID, dueDate);\r\n        console.log(t);\r\n        updateExp(5);\r\n        TaskList.unshift(t);\r\n        pushChanges(\"ADD\", t, \"Tasks\");\r\n        if(title === PROJECTS){\r\n           addToProjectTasks(t, associatedProjectID);\r\n        }\r\n        //changeItemID(t.id);\r\n        changeNavigation(t.id)\r\n        event.preventDefault();\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav;\r\n        if(title === PROJECTS) {\r\n            nav = {\r\n                title: PROJECTS,\r\n                view: \"DETAILS\",\r\n                ID: itemID\r\n            }\r\n        } else {\r\n            nav = {\r\n                title: title,\r\n                view: \"DETAILS\",\r\n                ID: id\r\n            }\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function addToProjectTasks(task, projID){\r\n        let id = parseInt(projID);\r\n        let content = db.Projects;\r\n        let proj;\r\n        for (let i=0; i<content.length; i++){\r\n            console.log(content[i].id)\r\n            if (content[i].id === id){\r\n                console.log(content[i].id)\r\n\r\n                proj = content[i];\r\n                proj.taskList.unshift(task.id);\r\n\r\n                pushChanges(\"UPDATE\", proj, \"Projects\");\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW TASK</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={TASK}>\r\n                <input className='pa2 mb1' type='text' autoFocus placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input  className='pa2 mb1'type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea  className='pa2 mb1' placeholder='Required Context' value={requiredContext} onChange={(e) => setRequiredContext(e.target.value)} />\r\n                <textarea  className='pa2 mb1' placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"due date\" >Due Date:</label>\r\n                <input className='pa2 mb1' id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select className='pa2 mb1' id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                <input className='pa2 mb1' type='text' placeholder='Assigned Agent' value={agent} onChange={(e)=> setAgent(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input className='pa2 mb1' type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, MEDIUM, HIGH, MISSION, PROJECT, ADD, PROJECTS, DETAILS } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { Project as Mission } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewMission({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const ProjectList = db.Projects;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ purpose, setPurpose ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ description, setDescription ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ requirements, setRequirements ] = useState('');\r\n\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let m = new Mission(outcome, purpose, description, convertDateToMilliseconds(dueDate), requirements, priority);\r\n        console.log(m);\r\n        ProjectList.unshift(m);\r\n        pushChanges(ADD, m, \"Projects\", shipItems);\r\n        updateExp(5);\r\n        event.preventDefault();\r\n\r\n        const nav = {\r\n            title: PROJECTS,\r\n            view: DETAILS,\r\n            ID: m.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW MISSION</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={MISSION}>\r\n                {/* <input className='pa2 mb1' autoFocus type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} /> */}\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea className='pa2 mb1' placeholder='Description' value={description} onChange={(e) => setDescription(e.target.value)} />\r\n                <textarea className='pa2 mb1' placeholder='What is the purpose of the mission?' value={purpose} onChange={(e) => setPurpose(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"due date\" >Due Date:</label>\r\n                <input className='pa2 mb1' id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select className='pa2 mb1' id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input className='pa2 mb1'type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMission);","import React, { useState } from 'react';\r\nimport { INBOX, PROJECTS, TASKS, DETAILS } from '../constants';\r\nimport { Item } from '../classes';\r\nimport NewTask from './NewTask';\r\nimport NewMission from './NewMission';\r\nimport { selectItem, ShipItems, selectTitle, ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);\r\n\r\n\r\nfunction NewItem({ submitFunction, title, updateExp, changeItemID, shipItems, db, changeTitle, itemID, changeNav }) {\r\n\r\n    // const [ type, setType ] = useState(title);\r\n    const [ name, setName ] = useState('Enter item name');\r\n    \r\n    const InboxItems = db.Inbox;\r\n    //console.log(InboxItems);\r\n\r\n    function reset(){\r\n        //changeTitle(INBOX);\r\n        setName('Enter item name');\r\n        // setDescription('');\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        if(name !== 'Enter item name' && name !== '' ){\r\n            //console.log('name is set')\r\n            let i = new Item(name);\r\n            console.log(i)\r\n            InboxItems.unshift(i);\r\n            pushChanges(\"ADD\", i, \"Inbox\");\r\n            console.log(\"new inbox: \", InboxItems)\r\n            updateExp(5);\r\n            changeNavigation(i.id);\r\n            //submitFunction(event);\r\n            reset();\r\n            event.preventDefault();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav = {\r\n                title: INBOX,\r\n                view: DETAILS,\r\n                ID: id\r\n            }\r\n        changeNav(nav);\r\n    }\r\n    \r\n    function displayTypeForm(){\r\n        switch(true) {\r\n            case title === TASKS:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === PROJECTS && parseInt(itemID) === 0:\r\n                return <NewMission updateExp={updateExp} />\r\n            case title === PROJECTS && parseInt(itemID) !== 0:\r\n                return <NewTask updateExp={updateExp} />\r\n            default:\r\n                return (\r\n                    <div className='h-100 w-100 center ba b--black-10 '>\r\n                        <h1 className='tc gold b'>NEW ITEM</h1>\r\n                        <form onSubmit={submitNewItem} className='flex flex-column' title={INBOX}>\r\n                            <input className='pa2 mb2' type='text' autoFocus onChange={(e)=> setName(e.target.value)} placeholder='Enter item name...'  />\r\n                            {/* <textarea value={description} onChange={(e) => setDescription(e.target.value)} /> */}\r\n                            <input className='pa2 mb1' type='submit' value='submit' />\r\n                        </form>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='pa1 w-100'>\r\n            <div className='pa1 w-100 flex justify-center'>\r\n                <button className=\"button w-30\" onClick={(e)=> changeTitle(INBOX)}>INBOX</button>\r\n                <button className=\"button w-30\" onClick={(e)=> changeTitle(TASKS)}>TASK</button>\r\n                <button className=\"button w-30\" onClick={(e)=> changeTitle(PROJECTS)}>MISSION</button>\r\n                {/* <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>REF</button>\r\n                <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>FINANCE</button> */}\r\n            </div>\r\n                {displayTypeForm()}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function QuestionAndOptions({ question, yes, no }) {\r\n    return (\r\n        <div className='h-100 w-100 br1 pa3 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <div>\r\n                <button className=\"button\" onClick={yes}>YES</button>\r\n                <button className=\"button\" onClick={no} >NO</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function QuestionandInput({ question, submitFunction }) {\r\n\r\n    const [ answer, setAnswer ] = useState('');\r\n\r\n    function submit(event) {\r\n\r\n        if(answer !==''){\r\n            submitFunction(answer);\r\n            setAnswer('');\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <form onSubmit={submit}>\r\n                <input type='text'  autoFocus value={answer} onChange={(e)=> setAnswer(e.target.value)} />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}","export const ReferenceList = []","import React, { useState, useEffect } from 'react';\r\nimport { ASAP, PROJECTS } from '../constants';\r\nimport { convertDateToMilliseconds, pushChanges } from '../functions';\r\nimport {UpdateExp, ShipItems,ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DatePicker);\r\n\r\nfunction DatePicker({ item, dueDate, db, shipItems, title }){\r\n\r\n    let DbList = ''\r\n    switch (title) {\r\n        case PROJECTS:\r\n\r\n    }\r\n\r\n    //pushChanges(UPDATE, item, \"Inbox\", shipItems);\r\n\r\n    // REASSIGN DUE DATE TO FIX \"ASAP\" DATE FORMAT ISSUES\r\n    let dateValue;\r\n    dueDate === ASAP ? dateValue = new Date().getTime() : dateValue = dueDate;\r\n\r\n    // CONVERT DATE STRING TO MILLISECONDS\r\n    const [ date, setdate ] = useState((new Date(dateValue)).toISOString().substr(0, 10));\r\n    const [ changeDate, setchangeDate ] = useState(false);\r\n    const [ isASAP, setIsASAP ] = useState(false);\r\n    \r\n    //   let str = \"2020-10-26\";\r\n    //   console.log(prepareDate(str));\r\n\r\n    useEffect(() => {\r\n        setdate((new Date(dateValue)).toISOString().substr(0, 10));\r\n        // setchangeDate(false);\r\n        if (dueDate === ASAP){\r\n            setIsASAP(true)\r\n        } else {\r\n            setIsASAP(false)\r\n        }\r\n    }, [dueDate, ASAP])\r\n\r\n    switch(changeDate){\r\n        case true:\r\n            return (\r\n                <div>\r\n                    <input type='date' className='fw3 white bn bg-transparent' autoFocus\r\n                    defaultValue={date}\r\n                    onChange={(e)=> {setdate(e.target.value);} } \r\n                    onBlur={() =>{}} \r\n                    />\r\n                    <div>\r\n                        <button className=\"button\" onClick={() => { \r\n                            item.dueDate = ASAP; setIsASAP(true); \r\n                            setchangeDate(false) \r\n                        }}>A.S.A.P</button>\r\n                        <button className=\"button\" onClick={() => { \r\n                            item.dueDate=convertDateToMilliseconds(date); \r\n                            setchangeDate(false); setIsASAP(false) \r\n                        }}>Save</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            if (isASAP){\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw4 white' onClick={() => setchangeDate(true)}>Due: ASAP</h5>\r\n                    </div>\r\n                    )\r\n            }\r\n            return (\r\n                <h5 className='fw4 white' onClick={() => setchangeDate(true)}>Due: {date} </h5>\r\n            )\r\n    }\r\n}","import React from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, UpdateTaskStatus, SetActiveTask, ShipItems, ChangeNav } from '../actions';\r\nimport { DONE, ACTIVE, PAUSED, PENDING, UPDATE, ADD, REMOVE, COMPLETED } from '../constants';\r\nimport { pushChanges  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskControls);\r\n\r\nfunction TaskControls({ task, position, changeNav, updateExp, changeItemID, setActiveTask, activeSince, activeTask, shipItems, db }){\r\n\r\n    let prevTimeSpent = task.timeSpent;\r\n    console.log(\"on entrering task cont, prevtime: \", prevTimeSpent)\r\n    function startTimer(){\r\n        setActiveTask(task);\r\n        task.status = ACTIVE;\r\n        \r\n    }\r\n\r\n    function pauseTask(){\r\n        const dateNow = (new Date()).getTime();\r\n        setActiveTask({});\r\n        task.status = PAUSED;\r\n        task.timeSpent = prevTimeSpent + (dateNow - parseInt(activeSince));\r\n        console.log(\"previos time spent:, \", prevTimeSpent)\r\n        console.log(\"time spent:, \", task.timeSpent)\r\n    }\r\n\r\n    function markAsDone(){\r\n        const dateNow = (new Date()).getTime();\r\n        task.doneDate = dateNow;\r\n        if (task.status === ACTIVE) {\r\n            pauseTask();\r\n        }\r\n        task.status = DONE;\r\n        console.log(\"timespent from task controls: \", prevTimeSpent)\r\n        //parseInt(prevTimeSpent) === 0 ? task.timeSpent = 0 : task.timeSpent = prevTimeSpent + (dateNow - parseInt(activeSince));\r\n        console.log(\"timespent from task controls after: \", task.timeSpent)\r\n        setActiveTask({});\r\n        updateExp(task.exp);\r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n        db.Completed.unshift(task);\r\n        pushChanges(ADD, task, \"Completed\", shipItems);\r\n        db.Tasks.splice(position,1);\r\n        pushChanges(REMOVE, task, \"Tasks\", shipItems);\r\n        const nav = {\r\n            title: COMPLETED,\r\n            view: \"DETAILS\",\r\n            ID: task.id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    switch(task.status){\r\n        case ACTIVE:\r\n            console.log(activeTask.id === true)\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={pauseTask}>PAUSE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PAUSED:\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={startTimer}>CONTINUE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PENDING:\r\n            console.log(typeof activeTask)\r\n            console.log(activeTask.id)\r\n            if(activeTask.id === undefined) {\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                    </div>)\r\n            }   \r\n        default:\r\n            return <div></div>\r\n    }\r\n    // Different controls are displayed based on if a task is ongoing\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport QuestionAndOptions from '../components/QuestionAndOptions';\r\nimport QuestionandInput from '../components/QuestionAndInput';\r\nimport { Task, Project, Reference, Reminder } from '../classes';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport {  PROCESSED, TASK, PENDING, UNPROCESSED, REFERENCE, ADD, UPDATE, REMOVE, REFERENCES, SOMEDAY, PROJECTS, TASKS, DETAILS, REMINDERS, INBOX } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport DatePicker from '../components/DatePicker';\r\nimport { pushChanges  } from '../functions';\r\nimport TaskControls from '../components/TaskControls';\r\n\r\n\r\n//shipItems(items, agent, record)\r\n//\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Processor({ nextItemID, item, touchFunction, changeItemID, itemIndex, db, shipItems, changeNav }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n    const ProcessedItems = db.Processed;\r\n    const SomedayList = db.Someday;\r\n    const References = db.References;\r\n    const Reminders = db.Reminders;\r\n    const Trash = db.Trash;\r\n\r\n    \r\n\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ isActionable, setIsActionable ] = useState(null);\r\n    const [ isMultistep, setIsMultistep ] = useState(null);\r\n    const [ isDoneInFive, setIsDoneInFive ] = useState(null);\r\n    const [ isDelegatable, setIsDelegatable ] = useState(null);\r\n    const [ step, setStep ] = useState(0);\r\n    const [ nextID, setNextID ] = useState(0);\r\n    const [ isDoneInaYear, setIsDoneInaYear ] = useState(null);\r\n    const [ newProjectID, setNewProjectID ] = useState(0);\r\n    const [ newTaskID, setNewTaskID ] = useState(0);\r\n    const [ newProject, setNewProject ] = useState(null);\r\n    const [ newTask, setNewTask ] = useState(null);\r\n    const [ assignedAgent, setAssignedAgent ] = useState(null);\r\n    const [ dueDate, setDueDate ] = useState(null);\r\n    const [ trashed, setTrashed ] = useState(false);\r\n    const [ incubated, setIncubated ] = useState(false);\r\n    const [ referenced, setReferenced ] = useState(false);\r\n    const [ newReference, setNewReference ] = useState(null);\r\n    const [ refDetails, setRefDetails ] = useState('');\r\n    const [ newReminder, setNewReminder ] = useState(null);\r\n\r\n\r\n    function makeNewProject(){\r\n        let proj = new Project( outcome );\r\n        setNewProject(proj);\r\n        setNewProjectID(proj.id);\r\n        //ProjectList.unshift(proj);\r\n        // pushChanges(ADD, proj, \"Projects\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(proj.id);\r\n    }\r\n\r\n    function makeNewTask(name){\r\n        let asProjID;\r\n        let theOutcome = outcome;\r\n        if (isMultistep === true) {\r\n            theOutcome = '';\r\n            asProjID = newProjectID;\r\n        }\r\n\r\n        let task = new Task(name, theOutcome, requiredContext, asProjID);\r\n        setNewTask(task);\r\n        console.log(\"new task = \",task);\r\n        updateStatus();\r\n        setNextID(task.id);  \r\n\r\n        //ADD TASK TO TASK LIST AND \r\n        //TaskList.unshift(task);\r\n        //pushChanges(ADD, task, \"Tasks\", shipItems);\r\n\r\n        // InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNewTaskID(task.id);  \r\n    }\r\n\r\n    function makeNewReference(name){ \r\n\r\n        let ref = new Reference(name);\r\n        setNewReference(ref);\r\n        console.log(\"new ref = \", ref);\r\n        setNextID(ref.id); \r\n\r\n    }\r\n\r\n    function makeNewReminder(name){ \r\n\r\n        let rem = new Reminder(name);\r\n        setNewReminder(rem);\r\n        console.log(\"new reminder = \", rem);\r\n        setNextID(rem.id); \r\n\r\n    }\r\n\r\n    function ammendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case ProjectList:\r\n                dbList = \"Projects\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case References:\r\n                dbList = \"References\"\r\n            break;\r\n            case Reminders:\r\n                dbList = \"Reminders\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            case SomedayList:\r\n                dbList = \"Someday\"\r\n            break;\r\n            case Trash:\r\n                dbList = \"Trash\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                list.splice(itemndx, 1);\r\n                pushChanges(REMOVE, item, dbList, shipItems);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                pushChanges(ADD, item, dbList, shipItems);\r\n            break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    function updateStatus() {\r\n        item.status = PROCESSED;\r\n        item.processedDate = new Date().getTime()\r\n        ProcessedItems.unshift(item);\r\n        InboxItems.splice(itemIndex,1);\r\n        pushChanges(UPDATE, item, \"Inbox\", shipItems);\r\n        pushChanges(ADD, item, \"Processed\", shipItems);\r\n        pushChanges(REMOVE, item, \"Inbox\", shipItems);\r\n    }\r\n    \r\n    function processNextItem(e){\r\n        setStep(0);\r\n        //touchFunction(e);\r\n        let nav = { \r\n            title: INBOX,\r\n            view: DETAILS,\r\n            ID: nextItemID\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    function proceed() {\r\n        setStep((step+1));\r\n    }\r\n\r\n    function refresh(){\r\n        changeItemID(item.id);\r\n    }\r\n\r\n    \r\n    if (item.status === UNPROCESSED && step === 0){\r\n        proceed();\r\n    }\r\n\r\n\r\n    // function trashItem() {\r\n    //     updateStatus();\r\n    //     ammendList(ADD, Trash, item, 0);\r\n    // }\r\n\r\n    let nav;\r\n    if (isMultistep){\r\n        nav = {\r\n            title: PROJECTS,\r\n            view: DETAILS,\r\n            ID: newProject.id\r\n        }\r\n    } else if(isMultistep === false && step >4){\r\n        nav = {\r\n            title: TASKS,\r\n            view: DETAILS,\r\n            ID: newTask.id\r\n        }\r\n    }\r\n\r\n    function viewNewReference(id) {\r\n        nav = {\r\n            title: REFERENCES,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function viewNewReminder(id) {\r\n        nav = {\r\n            title: REMINDERS,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    switch(true) {\r\n        case ( step === 1 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Is this Actionable?' \r\n                    yes={() => { setIsActionable(true); proceed() }} \r\n                    no={() => { setIsActionable(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={() => { setReferenced(true); makeNewReference(item.name); proceed() }} >ADD TO REFERENCES</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => { setIncubated(true); makeNewReminder(item.name); proceed() }} >ADD TO REMINDERS</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => { setTrashed(true); trashItem(); proceed() }} >TRASH</button> */}\r\n                </div>\r\n            )\r\n        case ( trashed === true && step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>Item has been trashed</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 3 && referenced === true ):\r\n            //\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n                    <h2 className='white tc pb2'>Any details to add?</h2>\r\n                    <form onSubmit={(e) => { \r\n                        newReference.details = refDetails; \r\n                        console.log(newReference); \r\n                        ammendList(ADD, References, newReference, 0); \r\n                        updateStatus(); \r\n                        e.preventDefault(); \r\n                        proceed() \r\n                    }}>\r\n                        <textarea rows=\"4\" cols=\"45\" autoFocus value={refDetails} onChange={(e)=> setRefDetails(e.target.value)} />\r\n                        <input type='submit' value='submit' />\r\n                    </form>\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 3 && incubated === true ):\r\n        \r\n        return (\r\n            <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n                <h2 className='white tc pb2'>Date of Reminder?</h2>\r\n                <DatePicker item={newReminder} dueDate={newReminder.date} />\r\n                <div>\r\n                    <button className=\"button\" onClick={() => { \r\n                        ammendList(ADD, Reminders, newReminder, 0); \r\n                        updateStatus(); \r\n                        proceed(); \r\n                    }} >CONTINUE</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n        case ( isActionable === false && step === 4 ):\r\n            if (referenced === true ) {}\r\n            if (incubated === true ) {;}\r\n            // Added to references\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>Item has been processed</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => {\r\n                        referenced === true ? viewNewReference(nextID) : viewNewReminder(nextID)\r\n                    }} >VIEW ITEM</button>\r\n                </div>\r\n            )\r\n        case ( isActionable === true && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the desired outcome?\" submitFunction={(answer) => { setOutcome(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the outcome be reached with just one task?' \r\n                    yes={() => { setIsMultistep(false); proceed(); } } \r\n                    no={() => { setIsMultistep(true); proceed();  makeNewProject(); }} />\r\n                </div>\r\n            )\r\n            \r\n        case ( isMultistep === false && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the task?\" \r\n                    submitFunction={(answer) => {\r\n                        makeNewTask(answer);\r\n                        proceed(); \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the first task?\" \r\n                    submitFunction={(answer) => { \r\n                        makeNewTask(answer); \r\n                        proceed(); \r\n                        }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { \r\n                        setIsDoneInaYear(true); \r\n                        newProject.taskList.unshift(newTask.id);\r\n                        ammendList(ADD, ProjectList, newProject, 0); proceed() \r\n                    }} \r\n                    no={() => { \r\n                        newProject.taskList.unshift(newTask.id); \r\n                        ammendList(ADD, SomedayList, newProject, 0);\r\n                        setIsDoneInaYear(false); \r\n                        updateStatus(); \r\n                        proceed();\r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 5 ):\r\n            // console.log(\"step 5. new task: \", newTask);\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { setIsDoneInaYear(true); proceed() }} \r\n                    no={() => { ammendList(ADD, SomedayList, newTask, 0); setIsDoneInaYear(false); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === true ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW MISSION</button>\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === false ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === false ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Task has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === true ):\r\n            console.log(\"step 5. new task: \", newTask);\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can it be done now in 5 minutes or less?' \r\n                    yes={() => { setIsDoneInFive(true); ammendList(ADD, TaskList, newTask, 0); proceed() }} \r\n                    no={() => { setIsDoneInFive(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case (isDoneInFive === true && step === 7):\r\n            console.log(\"new tasklKST:\", TaskList)\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h2 className='fw8 b white pb2'>LET'S DO IT!</h2>\r\n                    <div className='w-100 pa2 pb3' >\r\n                        <h3 className='fw7 b white pb2'>{newTask.name}</h3>\r\n                    </div>\r\n                    <button className=\"button\" onClick={() => { updateStatus();  changeNav(nav) }} >GO TO TASK </button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button> */}\r\n                </div>\r\n            )\r\n        case ( isDoneInFive === false && step === 7 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can this task be delegated?' \r\n                    yes={() => { setIsDelegatable(true); proceed(); }} \r\n                    no={() => { setIsDelegatable(false); proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === true && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Who would you like to assign this task to?\" \r\n                    submitFunction={(answer) => { setAssignedAgent(answer); newTask.agent = assignedAgent; proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h2 className='fw4 white'>By when should this task to be done</h2>\r\n                    <DatePicker item={newTask} dueDate={newTask.dueDate} />\r\n                    <div>\r\n                        {/* <button className=\"button\" onClick={() => { setDueDate(\"ASAP\"); console.log(newTask); proceed(); }}>ASAP</button> */}\r\n                        <button className=\"button\" onClick={() => { setDueDate(newTask.dueDate); console.log(newTask); proceed(); }} >CONTINUE</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 9 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Where should this task be done?\" \r\n                    submitFunction={(answer) => { \r\n                        setRequiredContext(answer); \r\n                        newTask.requiredContext = answer;\r\n                        ammendList(ADD, TaskList, newTask, 0)\r\n                        proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( step === 10 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show flex items-center flex-column' >\r\n                    <h3 className='white tc pb2'>A new Task has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={ processNextItem } >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Processor);","import React from 'react';\r\n\r\nexport default function PrevItemButton({ selectAnother, prevID, currentID }){\r\n\r\n    if(currentID !== prevID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(prevID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NextItemButton({ selectAnother, nextID, currentID }){\r\n    if(currentID !== nextID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(nextID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Processor from '../containers/Processor'\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport NewItemButton from '../components/NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        db: state.items.record.items//state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nfunction ItemDetails({ id, touchFunction, selectAnother, prevID, nextID, db }) {\r\n\r\n\r\n    // NOTE: PREV AND NEXT BUTTONS INCLUDED HERE SO THEY ARE HIDDEN DURING PROCESSING\r\n    const InboxItems = db.Inbox\r\n\r\n    const [ readyToProcess, setReadyToProcess ] = useState(false);\r\n\r\n    let item = {};\r\n    let nextItemID = null;\r\n    let indx;\r\n    for (let i=0; i<InboxItems.length; i++){\r\n\r\n        if (InboxItems[i].id === id){\r\n           item = InboxItems[i];\r\n           indx = i;\r\n           if (InboxItems[i+1]) {\r\n               nextItemID = InboxItems[i+1].id;\r\n           } else {\r\n            nextItemID = 0;\r\n           }\r\n           break;\r\n        }    \r\n    }\r\n\r\n    console.log(item);\r\n\r\n    if (item.name) {\r\n        switch(readyToProcess){\r\n        case false:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                        <button onClick={()=> setReadyToProcess(true)} >PROCESS THIS</button>\r\n                    </div>\r\n                    <NewItemButton />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prevID} currentID={id} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={nextID} currentID={id} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    <br />\r\n                    <Processor item={item} nextItemID={nextItemID} touchFunction={touchFunction} itemIndex={indx} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n\r\nfunction Timer({ timeSpent, task, activeTask, activeSince, timeNow }){\r\n\r\n\r\n    if (task.id === parseInt(activeTask.id) ){\r\n        const dateNow = (new Date()).getTime();\r\n        timeSpent = timeSpent + (dateNow - activeSince);\r\n    }\r\n    console.log('time spent = '+timeSpent)\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n    \r\n\r\n    // let totalTimeSpent = (seconds*1000)+(minutes*60*1000)+(hours*3600*1000); //Time spent in milliseconds\r\n\r\n\r\n\r\n    // function reset() {\r\n    //     setSeconds(0);\r\n    //     setminutes(0);\r\n    //     sethours(0);\r\n    //     setIsActive(false);\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        setSeconds(secs);\r\n        setminutes(mins);\r\n        sethours(hrs);\r\n        if (task.id !== parseInt(activeTask.id) ){\r\n            setIsUpdated(false);\r\n            setIsActive(false)\r\n        }\r\n    },[ secs, mins, hrs, activeTask.timeSpent, activeTask.id, activeSince, task.id ])\r\n\r\n\r\n    if( (task.id === parseInt(activeTask.id)) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive && (task.id === parseInt(activeTask.id)) ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        \r\n        return () => clearInterval(interval);\r\n        \r\n    }, [ isActive, seconds, minutes, hours, isUpdated, activeTask.id, task.id ]);\r\n\r\n\r\n    switch(task.id){\r\n        case activeTask.id:\r\n            return (\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: \r\n                        <span className='fw3 yellow b'> {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} \r\n                        </span>\r\n                    </h5>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h5>\r\n                </div>\r\n                {/* <div className=\"\">\r\n                    <button className='' onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n                    <button className='' onClick={reset}>Reset</button>\r\n                </div> */}\r\n                </div>\r\n            );\r\n    }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, UpdateTaskStatus, ShipItems,ChangeNav } from '../actions';\r\nimport DatePicker from './DatePicker';\r\nimport Timer from './Timer';\r\nimport TaskControls from './TaskControls';\r\nimport { pushChanges, ammendList  } from '../functions';\r\nimport { COMPLETED, DETAILS, PROJECTS, SOMEDAY, TASKS, UPDATE } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);\r\n\r\n\r\nfunction TaskDetails({ id , title, updateExp, status, updateTaskStatus, activeSince, activeTask, db, shipItems, changeNav }) {\r\n\r\n    const ProjectList = db.Projects;\r\n    const tasks = db.Tasks;\r\n    let task = {};\r\n    let position, relevantList;\r\n\r\n    title === SOMEDAY ? relevantList = db.Someday : relevantList = db.Tasks;\r\n\r\n    for (let i=0; i<relevantList.length; i++){\r\n\r\n        if (relevantList[i].id === id){\r\n           task = relevantList[i];\r\n           position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n    let associatedProject = {};\r\n    if(task.associatedProjectID === 0){\r\n        associatedProject.name = \"Getting Things Done\";\r\n    } else if (task.associatedProjectID > 0){\r\n        for(let i=0; i<ProjectList.length; i++){\r\n            if(parseInt(task.associatedProjectID) === parseInt(ProjectList[i].id)){\r\n                associatedProject = ProjectList[i];\r\n                //console.log('associated project name: ', associatedProject.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const [ name, setName ] = useState(task.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(task.requiredContext);\r\n    const [ outcome, setoutcome ] = useState(task.outcome);\r\n    const [ dueDate, setdueDate ] = useState(task.dueDate);\r\n  //  const [ timeRequired, settimeRequired ] = useState(task.timeRequired);\r\n    const [ note, setnote ] = useState(task.note);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n\r\n    useEffect(() => {\r\n        setName(task.name);\r\n        setrequiredContext(task.requiredContext);\r\n        setoutcome(task.outcome);\r\n        setnote(task.note);\r\n        setdueDate(task.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [task.name, task.requiredContext, task.outcome, task.note, task.dueDate, task.timeSpent, activeSince, activeTask, task.id, db.lastUpdated ])\r\n\r\n\r\n    \r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            ammendList(db, TASKS, task, UPDATE, shipItems)\r\n          \r\n        }\r\n\r\n     \r\n    }\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n\r\n    switch (title){\r\n        case COMPLETED:\r\n            \r\n        default:\r\n            return (\r\n                <div className='' >\r\n                    <div>\r\n                        <div className='w-100 pa2 pb3' >\r\n                            {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                            <h4 className='fw1 white'>{task.requiredContext}</h4> */}\r\n        \r\n                            <input type='text' onChange={(e)=> {setName(e.target.value);} } onBlur={() => { updateDB(task, \"name\", name ) } } \r\n                            value={name} className='bn fw9 b white bg-transparent' />\r\n        \r\n                            <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(task, \"requiredContext\", requiredContext ) }} \r\n                                value={requiredContext} className='fw1 white bn bg-transparent' />\r\n                            \r\n                        </div>\r\n        \r\n                        <div className='w-100 pl2 pb3'>\r\n                            <h5 className='fw3 white'>Mission: </h5>\r\n                            <h4 className='fw5 white' onClick={() => {\r\n                                if(task.associatedProjectID != 0){changeNavigation(task.associatedProjectID, PROJECTS)}}} >{associatedProject.name}</h4>\r\n                        </div>\r\n        \r\n                        <div className='w-100 pl2 pb3'>\r\n                            <h5 className='fw3 white'>Outcome: </h5>\r\n                            {/* <h5 className='fw3 white'>{task.outcome} </h5> */}\r\n                            <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setoutcome(e.target.value);} } onBlur={() =>{ updateDB(task, \"outcome\", outcome ) }} value={outcome} className='w-80 fw3 white bn bg-transparent' />\r\n                        </div>\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>\r\n                            <Timer timeSpent={task.timeSpent} task={task} />\r\n                            <DatePicker item={task} dueDate={dueDate} />\r\n                            {/* <input type='date' defaultValue={dueDate} onChange={(e)=> {setdueDate(e.target.value);} } onBlur={() =>task.dueDate=dueDate} className='fw3 white bn bg-transparent' /> */}\r\n                        </div>\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>                    \r\n                            {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                            <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                        </div>\r\n                        <h5 className='fw3 white'>Status: {task.status}</h5>\r\n                        <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                        <div className='pa2'>\r\n                            {/* <p className='fw3 white'>{task.note}</p> */}\r\n                            <textarea rows=\"4\" cols=\"45\" onChange={(e)=> {setnote(e.target.value);} } onBlur={ () =>{ updateDB(task, \"note\", note )}} value={note} className='fw3 white bn bg-transparent' />\r\n                        </div>\r\n                        <TaskControls task={task} position={position} />\r\n                        {/* <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>DONE</button> */}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport List from './List';\r\nimport { MISSION, PROJECTS } from '../constants';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, RestorePreviousState, ShipItems } from '../actions';\r\nimport { displayDays, ammendList  } from '../functions';\r\nimport { UPDATE } from '../constants';\r\nimport DatePicker from './DatePicker';\r\nimport NewItemButton from './NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetails);\r\n\r\nfunction ProjectDetails({ project, view, changeItemID, db, shipItems }) {\r\n\r\n    const TaskList = db.Tasks.concat(db.Completed);\r\n\r\n    function passKey(e) {\r\n        //Takes the events target and checks for title attribute \r\n        //If no title attribute, check parent node for title attribute\r\n        //If not found, repeat step 2\r\n        let targ = e.target;\r\n        checkForID(targ);\r\n        function checkForID (t) {\r\n            if (t.id) {\r\n                changeItemID(t.id);\r\n            } else {\r\n                t = t.parentNode;\r\n                checkForID (t);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTasks(){\r\n        let tasks = [];\r\n        if(project.taskList !== []){\r\n            for(let i=0; i<project.taskList.length; i++){\r\n                for(let j=0; j<TaskList.length; j++){\r\n                    if(project.taskList[i] === TaskList[j].id ){\r\n                        tasks.push(TaskList[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(tasks);\r\n        return tasks;\r\n    }\r\n\r\n    const projectTasks = getTasks();\r\n\r\n    const [ name, setName ] = useState(project.name);\r\n    const [ purpose, setPurpose ] = useState(project.purpose);\r\n    const [ description, setDescription ] = useState(project.description);\r\n    const [ dueDate, setdueDate ] = useState(project.dueDate);\r\n    const [ timeRequired, setTimeRequired ] = useState(project.timeRequired);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n    useEffect(() => {\r\n        setName(project.name);\r\n        setTimeRequired(project.timeRequired);\r\n        setPurpose(project.purpose);\r\n        setDescription(project.description);\r\n        setdueDate(project.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [project.name, project.timeRequired, project.purpose, project.dueDate, project.description, db.lastUpdated ])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            ammendList(db, PROJECTS, project, UPDATE, shipItems)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-80'>\r\n            <div className='w-100 h-10 pa2 pb3' >\r\n\r\n                <input type='text' \r\n                className='bn fw7 b white bg-transparent'\r\n                value={name} \r\n                onChange={(e)=> {setName(e.target.value);} } \r\n                onBlur={() => {updateDB(project, \"name\", name )} }  \r\n                />\r\n\r\n                <h4 className='fw1 white'>{displayDays(project.dueDate)}</h4>\r\n            </div>\r\n\r\n            <div className='w-100 h-20 pl2 pt3'>\r\n                <div className='w-100 pl2 pb1'>\r\n                    <h5 className='fw3 white'>Description: </h5>\r\n                    <textarea rows=\"2\" cols=\"100\" \r\n                    className='w-80 fw3 white bn bg-transparent' \r\n                    value={description} \r\n                    onChange={(e)=> {setDescription(e.target.value);} } \r\n                    onBlur={() =>{ updateDB(project, \"description\", description ) }} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='w-100 h-10 pl2 pb2'>\r\n                <h5 className='fw3 white'>Purpose: </h5>\r\n                {/* <h5 className='fw3 white'>{project.purpose} </h5> */}\r\n\r\n                <input type='text' \r\n                className='bn fw3 b white bg-transparent' \r\n                value={purpose} \r\n                onChange={(e)=> {setPurpose(e.target.value);} } \r\n                onBlur={() => {updateDB(project, \"purpose\", purpose )} } \r\n                />\r\n\r\n            </div>\r\n            <div className='w-100 h-10 pl2 pb2 flex justify-between'>\r\n                {/* <h5 className='fw3 white'>Due: {project.dueDate} </h5> */}\r\n                <DatePicker item={project} dueDate={dueDate} />\r\n                {/* <h5 className='fw3 white'>Time Required: {project.timeRequired}</h5> */}\r\n            </div>\r\n            <div className='w-100 h-10 pl2 pb3 flex justify-between'>\r\n                <h5 className='fw3 white'>Status: {project.status}</h5>\r\n                {/* <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n            </div>\r\n            <div className='flex justify-between items-center'>\r\n                <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n                <NewItemButton />\r\n            </div> \r\n            <div className='pa2 h-30'>\r\n                <List content={projectTasks} filter={MISSION} touchFunction={passKey} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, RestorePreviousState, ChangeNav } from '../actions';\r\nimport { DETAILS, LIST, MISSION_TASKS, PROJECTS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        missionID: state.values.missionID,\r\n        previousTitle: state.values.previousTitle,\r\n        previousView: state.values.previousView,\r\n        previousItemID: state.values.previousItemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BackButton);\r\n\r\n\r\n\r\nfunction BackButton({ changeItemID, changeNav, missionID, title, previousTitle, previousView, previousItemID }) {\r\n\r\n    function goBack(){\r\n\r\n        let navID = 0;\r\n        let navView = LIST;\r\n\r\n        if(title === MISSION_TASKS) {\r\n            title = PROJECTS;\r\n            navID = missionID;\r\n            navView = DETAILS;\r\n        };\r\n\r\n        let nav = {\r\n            title: title,\r\n            view: navView,\r\n            ID: navID\r\n        }\r\n        //changeItemID(id);\r\n        changeNav(nav);\r\n        \r\n    }\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={goBack}>\r\n            <h1 className=' white b f8 fw9 ma0'>&lt;</h1>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, ShipItems } from '../actions';\r\nimport { REFERENCES, UPDATE } from '../constants';\r\nimport { pushChanges, ammendList  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReferenceDetails);\r\n\r\n\r\nfunction ReferenceDetails({ id , changeItemID, updateExp, db, shipItems, reference }) {\r\n\r\n    const ReferenceList = db.Reference;\r\n    // let reference = {};\r\n    //let position;\r\n\r\n    // for (let i=0; i<ReferenceList.length; i++){\r\n\r\n    //     if (ReferenceList[i].id === id){\r\n    //        reference = ReferenceList[i];\r\n    //        //position = i;\r\n    //        break;\r\n    //     }\r\n    // }\r\n\r\n    console.log(\"reference: \", reference)\r\n\r\n    const [ name, setName ] = useState(reference.name);\r\n    const [ details, setDetails ] = useState(reference.details);\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            ammendList(db, REFERENCES, reference, UPDATE, shipItems)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{reference.name}</h3> */}\r\n                    <input type='text' \r\n                    className='bn fw7 b white bg-transparent'\r\n                    value={name} \r\n                    onChange={(e)=> {setName(e.target.value);} } \r\n                    onBlur={() => {updateDB(reference, \"name\", name )} }  \r\n                    />\r\n                    <h5 className='fw3 white'>{reference.type}</h5>\r\n                </div>\r\n                <div className='pa2'>\r\n                    <textarea rows=\"4\" cols=\"45\" \r\n                    onChange={(e)=> {setDetails(e.target.value);} } \r\n                    onBlur={ () =>{ updateDB(reference, \"details\", details ) }} \r\n                    value={details} \r\n                    className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\nimport trashCan from '../assets/trash1600.png';\r\nimport { INBOX, PROJECTS, REMOVE, TASKS, REFERENCES, SOMEDAY, ADD, PROCESSED, COMPLETED, MISSION_TASKS, REMINDERS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashButton);\r\n\r\n\r\nfunction TrashButton({ shipItems, changeNav, db, title, ID }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n    const References = db.References;\r\n    const Reminders = db.Reminders;\r\n    const SomedayList = db.Someday;\r\n    const ProcessedList = db.Processed;\r\n    const Completed = db.Completed;\r\n    const Trash = db.Trash;\r\n\r\n    \r\n\r\n    let currentlist, indx, currentItem;\r\n\r\n    switch(title) {\r\n        case PROJECTS:\r\n            currentlist = ProjectList;\r\n        break;\r\n        case TASKS:\r\n            currentlist = TaskList;\r\n        break;\r\n        case INBOX:\r\n            currentlist = InboxItems;\r\n        break;\r\n        case REFERENCES:\r\n            currentlist = References;\r\n        break;\r\n        case REMINDERS:\r\n            currentlist = Reminders;\r\n        break;\r\n        case SOMEDAY:\r\n            currentlist = SomedayList;\r\n        break;\r\n        case PROCESSED:\r\n            currentlist = ProcessedList;\r\n        break;\r\n        case COMPLETED:\r\n            currentlist = Completed;\r\n        break;\r\n        case MISSION_TASKS:\r\n            currentlist = TaskList;\r\n        break;\r\n        default:\r\n    }\r\n\r\n    for (let i=0; i<currentlist.length; i++){\r\n\r\n        if (currentlist[i].id === parseInt(ID)){\r\n            currentItem = currentlist[i];\r\n            indx = i;\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function ammendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case ProjectList:\r\n                dbList = \"Projects\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case REFERENCES:\r\n                dbList = \"References\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            case SOMEDAY:\r\n                dbList = \"Someday\"\r\n            break;\r\n            case Trash:\r\n                dbList = \"Trash\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                list.splice(itemndx, 1);\r\n                pushChanges(REMOVE, item, dbList);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                pushChanges(ADD, item, dbList);\r\n            break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //Change Nav to List\r\n    const nav = {\r\n        title: title,\r\n        view: \"LIST\",\r\n        ID: 0\r\n    }\r\n\r\n    function deleteItem() {\r\n        console.log('delete button clicked');\r\n        currentItem.isTrashed = true;\r\n        currentItem.trashedDate = new Date().getTime();\r\n        ammendList(ADD, Trash, currentItem, indx);\r\n        ammendList(REMOVE, currentlist, currentItem, indx);\r\n        changeNav(nav);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img src={trashCan} alt='trash icon' className='h2' onClick={() => {deleteItem()}} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { ASAP, DETAILS, PROJECTS } from '../constants';\r\nimport { calculateTime } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedItemDetails);\r\n\r\n\r\nfunction CompletedItemDetails({ ProjectList, changeNav,  item }) {\r\n\r\n    //GET THE ASSOCIATED PROJECT NAME\r\n    console.log(\"reached completed stage\");\r\n    let associatedProject = {}\r\n    if(item.associatedProjectID === 0){\r\n        associatedProject.name = \"Getting Things Done\";\r\n    } else if (item.associatedProjectID > 0){\r\n        for(let i=0; i<ProjectList.length; i++){\r\n            if(parseInt(item.associatedProjectID) === parseInt(ProjectList[i].id)){\r\n                associatedProject = ProjectList[i];\r\n                console.log('associated project name: ', associatedProject.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n\r\n    console.log(\"completed\" ,item)\r\n    \r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                    <h4 className='fw1 white'>{item.requiredContext}</h4>\r\n                    \r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Mission: </h5>\r\n                    <h4 className='fw5 white' onClick={() => {\r\n                        if(item.associatedProjectID != 0){changeNavigation(item.associatedProjectID, PROJECTS)}}}>{associatedProject.name}</h4>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Outcome: </h5>\r\n                    <h5 className='fw3 white'>{item.outcome} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    <h5 className='fw3 white'>Time Spent: {calculateTime(item.timeSpent)}</h5>\r\n                    <h5 className='fw3 white'>Due Date: {item.dueDate === ASAP ? ASAP : new Date(item.dueDate).toDateString()} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    <h5 className='fw3 white'>COMPLETED: {new Date(item.doneDate).toLocaleString()} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>           \r\n                    {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                    <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                </div>\r\n                <h5 className='fw3 white'>Status: {item.status}</h5>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    <p className='fw3 white'>{item.note}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { DETAILS, INBOX_ITEM, PROJECT, REFERENCE, REMINDER, REMOVE, TASK, ADD, INBOX, TASKS, PROJECTS, REFERENCES, REMINDERS } from '../constants';\r\nimport { calculateTime, pushChanges } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashedItemDetails);\r\n\r\n\r\nfunction TrashedItemDetails({ changeNav, item, db, shipItems }) {\r\n\r\n    function restore(){\r\n        let list, dbList, title;\r\n        switch(item.type){\r\n            case INBOX_ITEM:\r\n                list = db.Inbox;\r\n                dbList = \"Inbox\";\r\n                title = INBOX;\r\n            break;\r\n            case TASK:\r\n                list = db.Tasks;\r\n                dbList = \"Tasks\";\r\n                title = TASKS;\r\n            break;\r\n            case PROJECT:\r\n                list = db.Projects;\r\n                dbList = \"Projects\";\r\n                title = PROJECTS;\r\n            break;\r\n            case REFERENCE:\r\n                list = db.References;\r\n                dbList = \"References\";\r\n                title = REFERENCES;\r\n            break;\r\n            case REMINDER:\r\n                list = db.Reminders;\r\n                dbList = \"Reminders\";\r\n                title = REMINDERS;\r\n            break;\r\n            default:\r\n        }\r\n        item.isTrashed = false;\r\n        item.trashedDate = 0;\r\n        const itemIndex = db.Trash.indexOf(item.id);\r\n        db.Trash.splice(itemIndex,1);\r\n        pushChanges(REMOVE, item, \"Trash\", shipItems);\r\n        list.unshift(item);\r\n        pushChanges(ADD, item, dbList, shipItems)\r\n        changeNavigation(item.id, title)\r\n    }\r\n\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className='w-100 pa2 pb3' >\r\n                <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                <h4 className='fw1 white'>{item.type}</h4>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Trashed Date: {new Date((item.trashedDate)).toLocaleString()}</h5>\r\n            </div>\r\n            <div className='w-100 ba bw1 b--white tc pb2'>\r\n                <h5 className='fw3 white' onClick={restore}>RESTORE</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { ASAP, DETAILS, PROJECTS, REMINDERS, UPDATE } from '../constants';\r\nimport { ammendList } from '../functions';\r\nimport DatePicker from './DatePicker';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReminderDetails);\r\n\r\n\r\nfunction ReminderDetails({ changeNav,  item, shipItems, db }) {\r\n\r\n    const [ name, setName ] = useState(item.name);\r\n    const [ note, setnote ] = useState(item.note);\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            ammendList(db, REMINDERS, item, UPDATE, shipItems)\r\n          \r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{item.name}</h3> */}\r\n\r\n                    <input type='text' \r\n                    className='bn fw7 b white bg-transparent'\r\n                    value={name} \r\n                    onChange={(e)=> {setName(e.target.value);} } \r\n                    onBlur={() => {updateDB(item, \"name\", name )} }  \r\n                    />\r\n\r\n                    <h4 className='fw1 white'>{item.type}</h4>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Date: </h5>\r\n                    <DatePicker item={item} dueDate={item.date} />\r\n                </div>\r\n\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    <textarea rows=\"4\" cols=\"45\" \r\n                    onChange={(e)=> {setnote(e.target.value);} } \r\n                    onBlur={ () =>{ updateDB(item, \"note\", note )}} \r\n                    value={note} \r\n                    className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { REFERENCE, COMPLETED, PROCESSED, INBOX, TRASH, REFERENCES, PROJECTS, TASKS, CALENDAR, SOMEDAY, WAITING_FOR, REMINDERS, TODAY, ASAP, MISSION_TASKS, TASK, PROJECT, REMINDER } from '../constants';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport ItemDetails from '../components/ItemDetails';\r\nimport TaskDetails from '../components/TaskDetails';\r\nimport ProjectDetails from '../components/ProjectDetails';\r\nimport BackButton from '../components/BackButton';\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport ReferenceDetails from '../components/ReferenceDetails';\r\nimport { selectItem } from '../actions';\r\nimport TrashButton from '../components/TrashButton';\r\nimport CompletedItemDetails from '../components/CompletedItemDetails';\r\nimport TrashedItemDetails from '../components/TrashedItemDetails';\r\nimport ReminderDetails from '../components/ReminderDetails';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        missionID: state.values.missionID,\r\n        previousItemID: state.values.previousItemID,\r\n        previousTitle: state.values.previousTitle,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction Details( { db, itemID, touchFunction, updateExp, selectAnother, title, changeItemID, previousItemID, previousTitle, missionID  }){\r\n    \r\n    let content;\r\n\r\n    // DETERMINE CONTENT LIST\r\n    switch(title) {\r\n        case INBOX:\r\n            content = db.Inbox\r\n        break;\r\n        case PROJECTS:\r\n            content = db.Projects\r\n        break;\r\n        case TASKS:\r\n            content = db.Tasks\r\n        break;\r\n        case COMPLETED:\r\n            content = db.Completed\r\n        break;\r\n        case REFERENCES:\r\n            content = db.References\r\n        break;\r\n        case CALENDAR:\r\n            content = db.Tasks.concat(db.Projects)\r\n        break;\r\n        case ASAP:\r\n            content = db.Tasks\r\n        break;\r\n        case TODAY:\r\n            content = db.Tasks\r\n        break;\r\n        case WAITING_FOR:\r\n            content = db.WaitingFor\r\n        break;\r\n        case SOMEDAY:\r\n            content = db.Someday;\r\n        break;\r\n        case REMINDERS:\r\n            content = db.Reminders;\r\n        break;\r\n        case PROCESSED:\r\n            content = db.Processed;\r\n        break;\r\n        case TRASH:\r\n            content = db.Trash;\r\n        break;\r\n        default:\r\n            content = []\r\n    }\r\n\r\n    //SPECIAL CONDITION FOR MISSION'S LIST\r\n    if(title === MISSION_TASKS) {\r\n\r\n        content = getTasks(getproject(parseInt(missionID)), db.Tasks);\r\n\r\n        function getproject(projID){\r\n            console.log(\"proj id: \", projID)\r\n            let proj = {};\r\n            for (let x=0; x < db.Projects.length; x++){\r\n                if (db.Projects[x].id === projID){\r\n                    proj = db.Projects[x];\r\n                }\r\n            }\r\n            console.log(\"proj = \", proj)\r\n            return proj;\r\n            \r\n        }\r\n        function getTasks(project, TaskList){\r\n            console.log(\"proj tasks: \", project.taskList)\r\n            let tasks = [];\r\n            if(project.taskList !== []){\r\n                for(let i=0; i<project.taskList.length; i++){\r\n                    for(let j=0; j<TaskList.length; j++){\r\n                        if(project.taskList[i] === TaskList[j].id ){\r\n                            tasks.push(TaskList[j]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            console.log(tasks);\r\n            return tasks;\r\n        }\r\n    }\r\n\r\n    console.log(\"content list from details: \", content)\r\n\r\n    // FIND ITEM\r\n    let item = {};\r\n    let prev;\r\n    let next;\r\n    const id = parseInt(itemID);\r\n    for (let i=0; i<content.length; i++){\r\n        //console.log(\"entering loop. Iteration: \", i)\r\n        \r\n        if (content[i].id === id){\r\n            item = content[i];\r\n            //console.log(\"item from loop: \", item)\r\n\r\n            // ASSIGN THE PREV AND NEXT ITEM IDS\r\n            i === 0 ? prev = content[i].id : prev = content[i-1].id;\r\n            i === (content.length-1) ? next = content[i].id : next = content[i+1].id;\r\n        }\r\n\r\n    }\r\n\r\n    // CHOOSE DETAILS FORMAT FOR DIFFERENT LIST OR ITEM TYPES\r\n    switch(title) {\r\n        case PROJECTS:\r\n            return (\r\n                <div className='w-100 h-100 center br1 pa2 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>PROJECT</h2>\r\n                    <ProjectDetails project={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>TASK</h2>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case MISSION_TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>MISSION TASKS</h2>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Inbox Item</h2>\r\n                    <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                </div>        \r\n            )\r\n        case PROCESSED:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>PROCESSED</h2>\r\n                        <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                        <h5 className='white pb2'>Processed: {(new Date(item.processedDate)).toLocaleString()} </h5>\r\n                        {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>        \r\n            )\r\n        case REFERENCES:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>REFERENCE</h1>\r\n                    <ReferenceDetails id={parseInt(itemID)} reference={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case REMINDERS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>REMINDER</h1>\r\n                    <ReminderDetails id={parseInt(itemID)} item={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case SOMEDAY:\r\n            if (item.type === TASK){\r\n                console.log(\"someday item is a task\")\r\n                return (\r\n                    <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                        <div className='flex justify-between items-center'>\r\n                            <BackButton id={0} />\r\n                            <TrashButton />\r\n                        </div>\r\n                        <h2 className='tc b gold f3'>TASK</h2>\r\n                        <TaskDetails id={parseInt(itemID)} />\r\n                        <div className='flex justify-between self-end'>\r\n                            <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                            <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (item.type === PROJECT) {\r\n                console.log(\"someday item is this project = \", item)\r\n                return (\r\n                    <div className='w-100 h-100 center br1 pa2 ba b--black-10'>\r\n                        <div className='flex justify-between items-center'>\r\n                            <BackButton id={0} />\r\n                            <TrashButton />\r\n                        </div>\r\n                        <h2 className='tc b gold f3'>PROJECT</h2>\r\n                        <ProjectDetails project={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                        <div className='flex justify-between self-end'>\r\n                            <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                            <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n            }\r\n        case COMPLETED:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>COMPLETED</h2>\r\n                    <CompletedItemDetails item={item} ProjectList={db.Projects}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        case TRASH:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between'>\r\n                        <BackButton id={0} />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>TRASHED</h2>\r\n                    <TrashedItemDetails item={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 pb2'>\r\n                    <BackButton />\r\n                    <h1 className='tc b white'>Error</h1>\r\n                    <p>Item Not Found</p>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask, selectItem, ChangeNav } from '../actions';\r\nimport { DETAILS, TASKS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTaskTimer);\r\n\r\nfunction ActiveTaskTimer({changeItemID, activeSince, activeTask, changeNav}) {\r\n    const dateNow = (new Date()).getTime();\r\n    const timeSpent = activeTask.timeSpent + (dateNow - activeSince);\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    if( (parseInt(activeTask.id) !== undefined) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [ isActive, seconds, minutes, hours ]);\r\n\r\n    function goToTask(event){\r\n        event.stopPropagation();\r\n        // changeItemID(activeTask.id)\r\n        let nav = {\r\n            title: TASKS,\r\n            view: DETAILS,\r\n            ID: activeTask.id\r\n        }\r\n        changeNav(nav);     \r\n    }\r\n\r\n    switch(activeTask.id){\r\n        case undefined:\r\n            return (\r\n                <div></div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className=\"\" onClick={goToTask} >\r\n                    <div className=\" pt3 \">\r\n                        <h2 className=\"pa1 \">CURRENT TASK</h2>\r\n                        <h2 className=\"pa1 red \">{activeTask.name}</h2>\r\n                        <h2 className='pa1 fw3 b red'>{hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h2>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        isShipping: state.items.latestUpdate.isShipping\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SyncStatusDot);\r\n\r\n\r\nfunction SyncStatusDot({ shipItems, changeNav, db, title, ID, isShipping }) {\r\n\r\n    let color;\r\n    if (isShipping) {\r\n        color = 'red'\r\n    } else {\r\n        color = 'green'\r\n    }\r\n    const style ={\r\n        color: color\r\n    }\r\n  \r\n    return (\r\n        <div className='flex justify-end'>\r\n            <h2 className='fw8 pa0 ma0' style={style}>.</h2>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { OVERVIEW } from '../constants';\r\nimport ActiveTaskTimer from './ActiveTaskTimer';\r\nimport SyncStatusDot from './SyncStatusDot';\r\n//import React, { useState, useEffect } from 'react';\r\n\r\n// import { connect } from 'react-redux';\r\n// import { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         activeTask: state.SetActiveTaskReducer.activeTask,\r\n//         status: state.UpdateTaskStatusReducer.taskStatus,\r\n//         activeSince: state.SetActiveTaskReducer.activeSince,\r\n//         timeNow: state.SetActiveTaskReducer.timeNow\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateTaskStatus: (status) => {\r\n//             return dispatch(UpdateTaskStatus(status))\r\n//         },\r\n//         setActiveTask: (task) => {\r\n//             return dispatch(SetActiveTask(task))\r\n//         },\r\n//         changeItemID: (id) => {\r\n//             return dispatch(selectItem(id))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(StatsOverview);\r\n\r\nexport default function StatsOverview({ touchFunction, exp }) {\r\n\r\n    return (\r\n        <article className=\"h-100 w-100 center bg-white pa2 \" data-view={OVERVIEW} title = \"STATS\" onClick={touchFunction}>\r\n            <SyncStatusDot />\r\n            <div className=\"tc w-100 h-100\">\r\n                <h1 className=\"f2 mb0 \">Amen Christ</h1>\r\n                <h3 className=\"f6 pa1 gray \">Engineer</h3>\r\n                <h4 className=\"f6 gray \">Exp: {exp}</h4>\r\n                <ActiveTaskTimer />\r\n            </div>\r\n        </article>  \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function TaskOverview({ touchFunction, tasks }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" data-view={LIST} title=\"TASKS\" onClick={touchFunction}> \r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Tasks</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ tasks.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function ProjectsOverview({ touchFunction, projects }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"PROJECTS\" data-view={LIST} onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Missions</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ projects.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function InboxOverview({ touchFunction , inbox }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white br1 ba b--black-10\" data-view={LIST} title=\"INBOX\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">{ inbox.length }</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">Inbox</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NEW, NEW_ITEM } from '../constants'\r\n\r\nexport default function NewItemTile({ touchFunction }) {\r\n    return (\r\n        <div className='bg-white h-100 center w-100 flex items-center justify-center' data-view={NEW} title={NEW_ITEM} onClick={touchFunction}>\r\n            <div className='tc '>\r\n                <h3 className='' >Add New Item</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { LIST, TODAY } from '../constants';\r\n\r\nexport default function TodaysMission({ touchFunction }) {\r\n\r\n    return (\r\n        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={TODAY} onClick={touchFunction}>\r\n            <h2 className='tc'>Today's<br />Mission</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StatsOverview from '../components/StatsOverview';\r\nimport TaskOverview from '../components/TasksOverview';\r\nimport ProjectsOverview from '../components/ProjectsOverview';\r\nimport InboxOverview from '../components/InboxOverview';\r\nimport { ChangeNav } from '../actions';\r\nimport {  CALENDAR, DAILY, LIST, REFERENCES, SOMEDAY, STATS } from '../constants';\r\nimport './Home.css';\r\nimport NewItemTile from '../components/NewItemTile';\r\nimport TodaysMission from '../components/TodaysMission';\r\nimport { setNavValues  } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    \r\n    const { changeItemID, exp, db, changeNav, state } = props;\r\n\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 pa1' >\r\n            <div className='pa1 ph1 h-40 ba' title={STATS}>\r\n                <StatsOverview touchFunction={handleEvent} exp={exp} />\r\n            </div>\r\n            <div className=\"flex justify-center h-20 \">\r\n                <div className='w-50 pa1'>\r\n                    <ProjectsOverview touchFunction={handleEvent} projects={db.Projects} />\r\n                </div>\r\n                <div className='w-50 pa1'>\r\n                    <TaskOverview touchFunction={handleEvent} tasks={db.Tasks}/>\r\n                </div>\r\n            </div>\r\n            <div className='flex w-100 h-10 pa1'>\r\n                <NewItemTile touchFunction={handleEvent} />\r\n            </div>\r\n            <div className=\"flex justify-center h-30\">\r\n                <div className='w-50 h-100 pa1'>\r\n                    <div className=' w-100 h-50 pb1'>\r\n                        <TodaysMission touchFunction={handleEvent} gotoItem={changeItemID} />\r\n                    </div>\r\n                    <div className=' w-100 h-50 pt1'>\r\n                        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={DAILY} onClick={handleEvent}>\r\n                            <h2 className='tc'>Daily<br />Exercises</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=' w-50 h-100'>\r\n                    <div className=' w-100 h-50'>\r\n                        <div className=' h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' data-view={LIST} title={SOMEDAY} onClick={handleEvent} >\r\n                                <h4 className='tc'>Someday</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' data-view={LIST} title={REFERENCES} onClick={handleEvent}>\r\n                                <h4 className='tc'>References</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='w-100 h-50 flex'>\r\n                        <div className='w-50 h-100 pa1' >\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={CALENDAR} onClick={handleEvent}>\r\n                                <h4 className='tc'>Calendar</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='w-50 h-100 pa1'>\r\n                            <InboxOverview touchFunction={handleEvent} inbox={db.Inbox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ChangeNav } from '../actions';\r\nimport { COMPLETED, PROCESSED, TRASH } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Stats( { changeNav}) {\r\n\r\n    function openList(title){\r\n        const nav = {\r\n            title: title,\r\n            view: \"LIST\",\r\n            ID: 0\r\n        }\r\n\r\n            changeNav(nav);\r\n    }\r\n    return (\r\n        <div className='h-75 w-90 center pa3 pa4-ns ba b--black-10'>\r\n            <div className=' w-90 center bg-white br1 pa3 pa4-ns ba b--black-10'>\r\n                <h1 className='tc'>STATS</h1>\r\n            </div>\r\n            <div className=' pt2 '>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(COMPLETED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Completed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(PROCESSED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Processed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(TRASH)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Trash</h1>\r\n                </div>\r\n            </div>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stats);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, selectTitle,ChangeNav } from '../actions';\r\nimport { PROJECTS, STATS, TASKS, INBOX, TASK, MISSION, DAILY, REFERENCES, TODAY, NEW, SOMEDAY, CALENDAR, DETAILS, PROCESSED, TRASH, COMPLETED, REMINDERS, LIST } from '../constants';\r\nimport List from '../components/List';\r\nimport './Home.css';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport NewItem from '../components/NewItem';\r\nimport Details from './Details';\r\nimport Home from './Home';\r\nimport Stats from './Stats';\r\nimport { setNavValues } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        recordState: state.items.record.isFetching,\r\n        db: state.items.record.items,\r\n        record: state.items.record,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        changeNav: (navObj => {\r\n            return dispatch(ChangeNav(navObj))\r\n        })\r\n    }\r\n}\r\n\r\nfunction Main(props) {\r\n\r\n    const { state, title, view, itemID, changeItemID, previousView, updateExp, exp, db, record, changeNav } = props;\r\n    \r\n    let type;\r\n    switch(previousView) {\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case PROJECTS:\r\n            type = MISSION;\r\n        break;\r\n        default:\r\n    } \r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    console.log('Title: ', title)\r\n    console.log('Item ID: ', itemID)\r\n    console.log('View: ', view)\r\n\r\n    if(record.isFetching){\r\n        return <div className=\"f5 fw4 white\">Loading...</div>;\r\n    } else {\r\n\r\n        let content;\r\n        switch(title) {\r\n            case TASKS:\r\n                content = db.Tasks;\r\n            break;\r\n            case PROJECTS:\r\n                content = db.Projects;\r\n            break;\r\n            case INBOX:\r\n                content = db.Inbox;\r\n            break;\r\n            case TODAY:\r\n                content = db.Tasks;\r\n            break;\r\n            case DAILY:\r\n                content = db.Tasks;\r\n            break;\r\n            case CALENDAR:\r\n                content = db.Tasks.concat(db.Reminders);\r\n            break;\r\n            case COMPLETED:\r\n                content = db.Completed;\r\n            break;\r\n            case PROCESSED:\r\n                content = db.Processed;\r\n            break;\r\n            case REFERENCES:\r\n                content = db.References;\r\n            break;\r\n            case SOMEDAY:\r\n                content = db.Someday;\r\n            break;\r\n            case REMINDERS:\r\n                content = db.Reminders;\r\n            break;\r\n            case TRASH:\r\n                content = db.Trash;\r\n            break;\r\n            default:\r\n                content = []\r\n        } \r\n\r\n        switch( true ) {\r\n            case (title === STATS):\r\n                return (\r\n                    <Stats />\r\n                )\r\n            case view === DETAILS && itemID !== 0:\r\n                return (\r\n                    <div className='h-100 pa2 '>\r\n                        <div className='h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <Details selectAnother={changeItemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case view === LIST && parseInt(itemID) === 0:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className='h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <div className='h-100 w-100 center pa1'>\r\n                                <h1 className='tc b gold ma0 pb2'>{title}</h1>\r\n                                <div className=' h-80 '>\r\n                                    <List content={content} />\r\n                                </div>\r\n                                <div className='h-10 flex w-100 content-end pa2'>\r\n                                    <NewItemButton touchFunction={handleEvent} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>   \r\n                )\r\n            case view === NEW:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className=' h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90'>\r\n                            <NewItem submitFunction={\"\"} view={type} updateExp={updateExp} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <Home />\r\n                );\r\n        }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from './actions';\r\nimport NavBar from './containers/NavBar';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        }\r\n    }\r\n}\r\n\r\nfunction App2(props) {\r\n\r\n    const { onTouch } = props;\r\n\r\n    \r\n    return (\r\n        <div className='app'>\r\n            <div className='home-container'>\r\n                <Main />\r\n            </div>\r\n            <NavBar touchFunction={onTouch} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(App2);\r\n\r\n\r\n//https://cdn.internetmultimediaonline.org/241F21/loveworldlive/ixilrao9.m3u8","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SELECT_VIEW, OVERVIEW, SELECT_ITEM, UPDATE_EXP, TASKS, INBOX, REFERENCES, TODAY,\r\n    RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, SET_ACTIVE_TASK, HOME, SELECT_TITLE, PROJECTS, LIST, NEW_ITEM, NEW, CHANGE_NAV, MISSION_TASKS\r\n} from \"./constants\"\r\n\r\nimport { SELECT_RECORD, INVALIDATE_RECORD, REQUEST_ITEMS, RECEIVE_ITEMS, PACK_ITEMS, DELIVER_ITEMS } from './actions';\r\n\r\nconst initialState = {\r\n    title: HOME, \r\n    itemID: 0,\r\n    view: OVERVIEW,\r\n    missionID: 0,\r\n    previousTitle: HOME,\r\n    previousItemID: 0,\r\n    previousView: OVERVIEW,\r\n    previousState: {},\r\n    taskStatus: '',\r\n    agent: '',\r\n    record: {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        receivedAt: 0,\r\n        items: {}\r\n    },\r\n    latestUpdate: {\r\n        items: {},\r\n        isShipping: false,\r\n        deliveredAt: 0\r\n    },\r\n    exp: 0,\r\n    db: { lastUpdated: 0}\r\n}\r\n\r\n// const selectTitleReducer = (state=initialState, action={}) => {\r\n//     switch(action.type){\r\n//         case SELECT_TITLE:\r\n//             let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, DUE_TODAY]\r\n//             let view = OVERVIEW;\r\n//             if (lists.indexOf(action.payload) !== -1) {\r\n//                 view = LIST;\r\n//             }\r\n//             return Object.assign({}, state, {title: action.payload, view: view, previousTitle: state.title, previousState: state});\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\nconst values = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SELECT_TITLE:\r\n            let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY ]\r\n            let view = OVERVIEW;\r\n            let ID = 0;\r\n            if (lists.indexOf(action.payload) !== -1) {\r\n                view = LIST;\r\n            } \r\n            if (((lists.indexOf(action.payload) !== -1) && state.view === NEW) || (action.payload === NEW_ITEM) ) {\r\n                view = \"NEW\"\r\n            }\r\n            return Object.assign({}, state, {title: action.payload, view: view, itemID:ID, previousTitle: state.title, previousState: state});\r\n        case CHANGE_NAV:\r\n            if(action.payload.title === PROJECTS){state.missionID = action.payload.ID}\r\n            return Object.assign({}, state, {title: action.payload.title, view: action.payload.view, itemID:action.payload.ID, previousTitle: state.title, previousItemID: state.itemID, previousView: state.view, missionID : state.missionID, previousState: state});\r\n        case SELECT_ITEM:\r\n            //action.payload.title === PROJECTS ? state.missionID = action.payload.ID : state.missionID = 0;\r\n            return Object.assign({}, state, {itemID: action.payload, previousItemID: state.itemID, previousState: state});\r\n        case SELECT_VIEW:\r\n            //action.payload.title === PROJECTS ? state.missionID = action.payload.ID : state.missionID = 0;\r\n            return Object.assign({}, state, {view: action.payload, previousView: state.view, previousState: state});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst RestorePreviousStateReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case RESTORE_PREVIOUS_STATE:\r\n            if(state.previousState === {}) {\r\n                break;\r\n            } else {\r\n                return Object.assign({}, state.previousState );\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateExpReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_EXP:\r\n            return Object.assign({}, state, {exp: (state.exp + action.payload)});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateTaskStatusReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_TASK_STATUS:\r\n            return Object.assign({}, state, {taskStatus: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialActiveTask = {\r\n    activeTask: {},\r\n    activeSince: 0,\r\n    timeNow: (new Date()).getTime()\r\n}\r\n\r\nconst SetActiveTaskReducer = (state=initialActiveTask, action={}) => {\r\n    switch(action.type){\r\n        case SET_ACTIVE_TASK:\r\n            return Object.assign({}, state, {activeTask: action.payload, activeSince: (new Date()).getTime() });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n//let serverLink = \"http://localhost:5000\";// \"https://secret-citadel-16777.herokuapp.com/\"\r\n\r\n\r\n//////////////////////////////////////////////// 17.10.2020 async app upgrade\r\n\r\n/// State shape\r\n\r\n\r\nfunction SelectRecordReducer(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_RECORD:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction items(\r\n  state = initialState,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_RECORD:\r\n      return Object.assign({}, state, { records: {didInvalidate: true} })\r\n    case REQUEST_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: true,\r\n          didInvalidate: false\r\n        }\r\n      })\r\n    case RECEIVE_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: false,\r\n          didInvalidate: false,\r\n          receivedAt: action.receivedAt,\r\n          items: action.items\r\n        }\r\n      })\r\n    case PACK_ITEMS:\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: true,\r\n                deliveredAt: 0\r\n            },\r\n        })\r\n    case DELIVER_ITEMS:\r\n        console.log(\"Special Delivery: \", action.payload)\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: false,\r\n                deliveredAt: action.deliveredAt\r\n            },\r\n        })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({r\n    values, UpdateExpReducer, RestorePreviousStateReducer, \r\n    UpdateTaskStatusReducer, SetActiveTaskReducer, \r\n    SelectRecordReducer, items\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './tachyonBoost.css';\r\nimport rootReducer from './reducers';\r\nimport { SelectRecord, FetchItems } from './actions';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\n// store\r\n//   .dispatch(fetchPostsIfNeeded('reactjs'))\r\n//   .then(() => console.log(store.getState()))\r\n\r\nstore.dispatch(SelectRecord('reactjs')) ;\r\nstore.dispatch(FetchItems('reactjs'));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}