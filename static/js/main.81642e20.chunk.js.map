{"version":3,"sources":["assets/trash1600.png","assets/GAMER INTRO.png","constants.js","actions.js","components/HomeButton.js","components/MissionsButton.js","components/TasksButton.js","components/InboxButton.js","components/StatsButton.js","functions.js","containers/NavBar.js","components/ListItem.js","components/Scroll.js","components/List.js","components/NewItemButton.js","classes.js","components/DatePicker.js","components/NewTask.js","components/NewMission.js","components/NewReference.js","components/NewEvent.js","components/NewItem.js","components/QuestionAndOptions.js","components/QuestionAndInput.js","ReferenceList.js","components/TaskControls.js","containers/Processor.js","components/PrevItemButton.js","components/NextItemButton.js","components/ItemDetails.js","components/Timer.js","components/TaskDetails.js","components/MissionDetails.js","components/BackButton.js","components/ReferenceDetails.js","components/TrashButton.js","components/CompletedItemDetails.js","components/TrashedItemDetails.js","components/EventDetails.js","containers/Details.js","components/ActiveTaskTimer.js","components/SyncStatusDot.js","components/StatsOverview.js","components/TasksOverview.js","components/MissionsOverview.js","components/InboxOverview.js","components/NewItemTile.js","components/TodaysMission.js","containers/Home.js","Contexts/ContextProvider.js","containers/Stats.js","containers/Main.js","components/SplashPage.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","MISSIONS","TASKS","INBOX","MISSION","TASK","REFERENCES","EVENTS","SOMEDAY","TRASH","ASAP","LIST","DETAILS","NEW","ADD","UPDATE","PROCESSED","DONE","DAILY","ChangeNav","navObj","type","payload","selectTitle","title","selectItem","itemID","selectView","view","UpdateExp","exp","expTimestamp","Date","getTime","RestorePreviousState","previousState","UpdateTaskStatus","status","SetActiveTask","task","CreateAlert","msg","timeStamp","now","message","ShipItems","items","agent","record","dispatch","PackItems","console","log","fetch","serverLink","method","mode","headers","body","JSON","stringify","then","response","json","deliveredAt","DeliverItems","successMessage","catch","error","setTimeout","HomeButton","touchFunction","className","data-view","onClick","MissionsButton","TasksButton","InboxButton","StatsButton","setNavValues","e","navChanger","state","navTitle","navID","navView","targ","target","checkForTitle","t","parentNode","checkForID","id","checkForView","getAttribute","parseInt","nav","ID","displayDays","dueDate","days","Math","ceil","abs","pushChanges","action","item","list","shippingFunction","pushDate","amendList","db","expObj","dbList","localList","itemndx","indexOf","splice","unshift","connect","values","changeNav","props","handleEvent","nextTitle","isTrashed","name","taskList","length","date","toDateString","processedDate","entryDate","toLocaleString","trashedDate","Scroll","style","overflowY","overflowX","children","changeItemID","content","filteredContent","filter","entry","toISOString","substr","frequency","listItems","map","i","key","useState","sortedContent","setSortedContent","sort","setSort","swapOrder","direction","order","a","b","changeView","Item","d","this","description","Task","outcome","requiredContext","associatedMissionID","random","priority","outcomeRecordID","note","timeRequired","requirements","details","timeSpent","activeSince","doneDate","Mission","purpose","vision","principles","toDo","skillsRequired","infoRequired","abilityRequired","backStory","outputRef","outputRecordUrl","Reference","Event","time","location","previousView","UpdateExpReducer","UpdateTaskStatusReducer","taskStatus","activeTask","SetActiveTaskReducer","updateExp","shipItems","dateValue","updateFunc","setDate","changeDate","setChangeDate","isASAP","setIsASAP","isSomeday","setIsSomeday","useEffect","autoFocus","defaultValue","onChange","value","onBlur","onTouch","TaskList","Tasks","setName","setOutcome","setRequiredContext","setDetails","setDueDate","setAgent","setFrequency","setRequirements","onSubmit","event","projID","proj","Missions","addToMissionTasks","changeNavigation","preventDefault","placeholder","DatePicker","disabled","MissionsList","setPurpose","setVision","setPrinciples","setToDo","setSkillsRequired","setInfoRequired","setAbilityRequired","setBackStory","setTimeRequired","setStatus","rows","cols","wrap","m","trim","submitNewItem","today","References","r","Events","setTime","setLocation","setNote","htmlFor","min","changeTitle","submitFunction","Inbox","displayTypeForm","QuestionAndOptions","question","yes","no","QuestionandInput","answer","setAnswer","timerOn","updateTaskStatus","setActiveTask","position","startTimer","updateTask","prevTimeSpent","pauseTask","dateNow","markAsDone","undefined","nextItemID","itemIndex","InboxItems","MissionList","SomedayList","Someday","isActionable","setIsActionable","isMultistep","setIsMultistep","isDoneInFive","setIsDoneInFive","isDelegatable","setIsDelegatable","step","setStep","nextID","setNextID","isDoneInaYear","setIsDoneInaYear","newMissionID","setNewMissionID","setNewTaskID","newMission","setNewMission","newTask","setNewTask","assignedAgent","setAssignedAgent","trashed","incubated","setIncubated","referenced","setReferenced","newReference","setNewReference","refDetails","setRefDetails","newEvent","setNewEvent","makeNewTask","asProjID","theOutcome","updateStatus","processNextItem","proceed","ref","makeNewReference","ev","makeNewEvent","viewNewEvent","makeNewMission","PrevItemButton","selectAnother","prevID","currentID","NextItemButton","indx","readyToProcess","setReadyToProcess","timeNow","s","secs","mins","hrs","seconds","setSeconds","minutes","setminutes","hours","sethours","isActive","setIsActive","isUpdated","setIsUpdated","interval","setInterval","clearInterval","minimumIntegerDigits","relevantList","tasks","concat","associatedMission","setrequiredContext","setoutcome","setdueDate","setnote","lastUpdated","updateDB","obj","property","newVal","TaskControls","RestorePreviousStateReducer","restorePreviousState","mission","Completed","passKey","getTasks","j","push","missionTasks","setOutputRef","setOutputRecordUrl","setTimeSpent","setPriority","openPlanner","setOpenPlanner","setLastUpdated","showTasks","setShowTasks","setTaskList","saveDate","listOfTasks","taskNames","split","currentTaskListNames","newTaskNames","forEach","element","nt","createTasks","missionID","previousTitle","previousItemID","reference","currentList","currentItem","src","trashCan","alt","trashItem","calculateTime","x","getMission","prev","next","BackButton","TrashButton","TaskDetails","ReferenceDetails","EventDetails","missions","stopPropagation","isShipping","latestUpdate","color","StatsOverview","SyncStatusDot","ActiveTaskTimer","TaskOverview","MissionsOverview","InboxOverview","inbox","NewItemTile","TodaysMission","somedayContent","dailyEx","gotoItem","StateContext","createContext","ContextProvider","contextStateVars","isLoggedIn","setIsLoggedIn","Provider","useStateContext","useContext","openList","localStorage","setItem","recordState","isFetching","alerts","createAlert","activeTasks","SplashPage","password","setPassword","incorrect","setIncorrect","introQuote","width","handleSubmit","getItem","Boolean","window","hostname","match","initialState","didInvalidate","receivedAt","initialActiveTask","rootReducer","combineReducers","lists","Object","assign","newXP","newTimestamp","expTimeStamp","SelectRecordReducer","records","updateAcknowledged","alertArray","notAlerted","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","RequestItems","ReceiveItems","FetchItems","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81642e20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash1600.4a1c4989.png\";","module.exports = __webpack_public_path__ + \"static/media/GAMER INTRO.3e025a06.png\";","// Actions\r\nexport const SELECT_VIEW = 'SELECT_VIEW';\r\nexport const SELECT_TITLE = 'SELECT_TITLE';\r\nexport const UPDATE_EXP = 'UPDATE_EXP';\r\nexport const SELECT_MISSION = 'SELECT_MISSION';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const RESTORE_PREVIOUS_STATE = 'RESTORE_PREVIOUS_STATE';\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS';\r\nexport const SET_ACTIVE_TASK = 'SET_ACTIVE_TASK';\r\nexport const RETRIEVE_DB = 'RETRIEVE_DB';\r\nexport const REFRESH_DB = 'REFRESH_DB';\r\nexport const CHANGE_NAV = 'CHANGE_NAV';\r\n\r\n//\r\nexport const HOME = 'HOME';\r\nexport const MISSIONS = 'MISSIONS';\r\nexport const TODAY = 'TODAY';\r\nexport const STATS = 'STATS';\r\nexport const SKILLS = 'SKILLS';\r\nexport const TASKS = 'TASKS';\r\nexport const INBOX = 'INBOX';\r\nexport const MISSION = 'MISSION';\r\nexport const EVENT = 'EVENT';\r\nexport const TASK = 'TASK';\r\nexport const INBOX_ITEM = 'INBOX_ITEM';\r\nexport const NEW_ITEM = 'NEW_ITEM';\r\nexport const REFERENCES = 'REFERENCES';\r\nexport const REFERENCE = 'REFERENCE';\r\nexport const CALENDAR = 'CALENDAR';\r\nexport const EVENTS = 'EVENTS';\r\nexport const SOMEDAY = 'SOMEDAY';\r\nexport const TRASH = 'TRASH';\r\nexport const COMPLETED = 'COMPLETED';\r\nexport const WAITING_FOR = 'WAITING_FOR';\r\nexport const ASAP = 'ASAP';\r\nexport const MISSION_TASKS = 'MISSION_TASKS';\r\n\r\n\r\n//VIEWS\r\nexport const OVERVIEW = 'OVERVIEW';\r\nexport const LIST = 'LIST';\r\nexport const DETAILS = 'DETAILS';\r\nexport const NEW = 'NEW';\r\n\r\n//TITLES\r\n// export const INBOX = 'INBOX';\r\n// export const TASKS = 'TASKS';\r\n\r\n//Actions to push\r\nexport const ADD = 'ADD';\r\nexport const REMOVE = 'REMOVE';\r\nexport const UPDATE = 'UPDATE';\r\n\r\n\r\n// Status constants\r\n//STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\nexport const UNPLANNED = 'UNPLANNED';\r\nexport const UNPROCESSED = 'UNPROCESSED';\r\nexport const PROCESSED = 'PROCESSED';\r\nexport const PENDING = 'PENDING';\r\nexport const DELEGATION_PENDING = 'DELEGATION_PENDING';\r\nexport const STARTED = 'STARTED';\r\nexport const DONE = 'DONE';\r\nexport const ONGOING = 'ONGOING';\r\nexport const COMPLETE = 'COMPLETE';\r\nexport const PAUSED = 'PAUSED';\r\nexport const ACTIVE = 'ACTIVE';\r\n//\r\n\r\nexport const LOW = 'LOW';\r\nexport const MEDIUM = 'MEDIUM';\r\nexport const HIGH = 'HIGH';\r\n\r\n\r\n\r\n//For frequency/recurring\r\nexport const NONE = 'NONE';\r\nexport const DAILY = 'DAILY';\r\nexport const WEEKLY = 'WEEKLY';\r\nexport const MONTHLY = 'MONTHLY';\r\nexport const FORTHNIGHTLY = 'FORTHNIGHTLY';\r\nexport const THREE_MONTHS = 'THREE_MONTHS';\r\nexport const SIX_MONTHS = 'SIX_MONTHS';\r\nexport const YEARLY = 'YEARLY';\r\n//","import { \r\n    SELECT_VIEW, SELECT_MISSION, SELECT_TASK, SELECT_TITLE, SELECT_ITEM, \r\n    UPDATE_EXP, RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, \r\n    SET_ACTIVE_TASK, RETRIEVE_DB, REFRESH_DB, CHANGE_NAV\r\n  } from './constants';\r\n\r\nexport const ChangeNav = (navObj) => {\r\n  return {\r\n    type: CHANGE_NAV,\r\n    payload: navObj\r\n  }\r\n}\r\nexport const selectTitle = (title) => {\r\n  return {\r\n  type: SELECT_TITLE,\r\n  payload: title\r\n}};\r\n\r\nexport const selectItem = (itemID) => {\r\n  return {\r\n  type: SELECT_ITEM,\r\n  payload: itemID\r\n}};\r\n\r\nexport const selectView = (view) => {\r\n  return {\r\n  type: SELECT_VIEW,\r\n  payload: view\r\n}};\r\n\r\nexport const selectMission = (missionID) => {\r\n    return {\r\n    type: SELECT_MISSION,\r\n    payload: missionID\r\n}};\r\n\r\nexport const selectTask = (taskID) => {\r\n    return {\r\n    type: SELECT_TASK,\r\n    payload: taskID\r\n}};\r\n\r\nexport const UpdateExp = (exp) => {\r\n    return {\r\n    type: UPDATE_EXP,\r\n    payload: exp,\r\n    expTimestamp: new Date().getTime()\r\n}};\r\n\r\nexport const RestorePreviousState = (previousState) => {\r\n    return {\r\n    type: RESTORE_PREVIOUS_STATE,\r\n    payload: previousState\r\n}};\r\n\r\nexport const UpdateTaskStatus = (status) => {\r\n    return {\r\n    type: UPDATE_TASK_STATUS,\r\n    payload: status\r\n}};\r\n\r\nexport const SetActiveTask = (task) => {\r\n    return {\r\n    type: SET_ACTIVE_TASK,\r\n    payload: task\r\n}};\r\n\r\nexport const RetrieveDB = (database) => {\r\n    return {\r\n        type: RETRIEVE_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\nexport const RefreshDB = (database) => {\r\n    return {\r\n        type: REFRESH_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\n////////////////////\r\n\r\n// ASYNC REQUESTS\r\n\r\nexport const SELECT_RECORD = 'SELECT_RECORD';\r\n\r\nexport function SelectRecord(record) {\r\n  return {\r\n    type: SELECT_RECORD,\r\n    payload: record\r\n  }\r\n}\r\n\r\nexport const INVALIDATE_RECORD = 'INVALIDATE_RECORD';\r\n\r\nexport function InvalidateRecord(record) {\r\n  return {\r\n    type: INVALIDATE_RECORD,\r\n    record\r\n  }\r\n}\r\n\r\nexport const REQUEST_ITEMS = 'REQUEST_ITEMS';\r\n\r\nexport function RequestItems(record) {\r\n  return {\r\n    type: REQUEST_ITEMS,\r\n    record\r\n  }\r\n}\r\n\r\nexport const RECEIVE_ITEMS = 'RECEIVE_ITEMS';\r\n\r\nexport function ReceiveItems(record, json) {\r\n  return {\r\n    type: RECEIVE_ITEMS,\r\n    record,\r\n    items: json,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n\r\n//import fetch from 'cross-fetch'\r\n\r\nexport function FetchItems(record) {\r\n  return dispatch => {\r\n    dispatch(RequestItems(record))\r\n    return fetch(serverLink) //https://secret-citadel-16777.herokuapp.com/\r\n      .then(response => response.json())\r\n      .then(json => { console.log(json); dispatch(ReceiveItems(record, json))})\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        //Repeat fetch every 5 seconds until successful\r\n        //setTimeout(dispatch(FetchItems(record)), 5000);\r\n      })\r\n  }\r\n}\r\n\r\n////////////////////////////////////\r\n\r\nexport const PACK_ITEMS = 'PACK_ITEMS';\r\n\r\nexport function PackItems(items) {\r\n  return {\r\n    type: PACK_ITEMS,\r\n    payload: items\r\n  }\r\n}\r\n\r\nexport const DELIVER_ITEMS = 'DELIVER_ITEMS';\r\n\r\nexport function DeliverItems(agent, json) { // record/agent/destination\r\n  \r\n  return {\r\n    type: DELIVER_ITEMS,\r\n    agent,\r\n    payload: json,\r\n    deliveredAt: Date.now()\r\n  }\r\n}\r\n\r\nexport const CREATE_ALERT = \"CREATE_ALERT\"\r\n\r\nexport function CreateAlert(msg) {\r\n  return {\r\n    type: CREATE_ALERT,\r\n    payload: {\r\n      timeStamp: Date.now(),\r\n      message: msg,\r\n    }\r\n  }\r\n}\r\n\r\nexport const CLOSE_ALERT = \"CLOSE_ALERT\"\r\n\r\nexport function CloseAlert(msg, timeStamp) {\r\n  return {\r\n    type: CLOSE_ALERT,\r\n    payload: {\r\n      timeStamp,\r\n      msg,\r\n    },\r\n    closedAt: Date.now()\r\n  }\r\n}\r\n\r\nconst agent1 = \"amen\"\r\n\r\nexport function ShipItems(items, agent, record) {\r\n  return dispatch => {\r\n    dispatch(PackItems(items))\r\n    console.log(\"packed items: \", items)\r\n    return fetch(`${serverLink}${agent1}`, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(items)\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        dispatch(DeliverItems(agent, json));\r\n        dispatch(CreateAlert(items.successMessage)) \r\n        dispatch(UpdateExp(json.exp));\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n        //Repeat the update every 5 seconds till it succeeds\r\n        setTimeout(ShipItems(items, agent), 5000);\r\n      })\r\n  }\r\n}\r\n\r\nconst serverLink = \"https://secret-citadel-16777.herokuapp.com/\";\r\n// const serverLink = \"http://localhost:5000/\";","import React from 'react';\r\nimport { HOME, OVERVIEW } from '../constants';\r\n\r\nexport default function HomeButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={OVERVIEW}  title={HOME} onClick={touchFunction}>\r\n            <h3 className='tc'>H</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST, MISSIONS } from '../constants';\r\n\r\nexport default function MissionsButton({touchFunction}) {\r\n    return (\r\n        <div className='w-20 center bg-white ba b--black-10 flex items-center justify-center' data-view={LIST}  title={MISSIONS} onClick={touchFunction}>\r\n            <h3 className='tc'>M</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function TasksButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={LIST} title=\"TASKS\" onClick={touchFunction}>\r\n            <h3 className='tc'>T</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { LIST } from '../constants';\r\n\r\nexport default function InboxButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={LIST}  title=\"INBOX\" onClick={touchFunction}>\r\n            <h3 className='tc'>I</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { OVERVIEW } from '../constants';\r\n\r\nexport default function StatsButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' data-view={OVERVIEW} title=\"STATS\" onClick={touchFunction}>\r\n            <h3 className='tc'>S</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","/// For all the extra functions required in multiple places\r\n\r\nimport { ShipItems } from \"./actions\";\r\nimport { ADD, ASAP, COMPLETED, INBOX, PROCESSED, MISSIONS, REFERENCES, EVENTS, REMOVE, SOMEDAY, TASKS, TRASH, UPDATE } from \"./constants\";\r\n\r\n\r\n\r\nexport function passTitleAndID(e, ChangeTitleFunction, changeIDFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            changeIDFunction(t.id);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n}\r\n\r\nexport function setNavValues(e, navChanger, state){\r\n    let targ = e.target;\r\n    let navTitle;\r\n    checkForTitle(targ);\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            navTitle = t.title;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    let navID;\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            navID = t.id;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n    let navView;\r\n    checkForView(targ);\r\n    function checkForView (t) {\r\n        //console.log(\"target name: \", t.tagName)\r\n        if (t.getAttribute('data-view')) {\r\n            navView = t.getAttribute('data-view');\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForView (t);   \r\n        }\r\n    }\r\n   \r\n    !(parseInt(navID) >= 0) ? navID = 0 : console.log(\"\");\r\n\r\n    const nav = {\r\n        title: navTitle,\r\n        view: navView,\r\n        ID: navID\r\n    }\r\n    console.log(nav)\r\n    navChanger(nav);\r\n}\r\n\r\nexport function calculateTime(timeSpent){\r\n\r\n    //CALCULATE TIME SPENT from timeSpent in seconds\r\n    console.log(\"timespent from calcTime: \", timeSpent)\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let seconds = s % 60;\r\n    s = (s - seconds) / 60;\r\n    let minutes = s % 60;\r\n    let hours = (s - minutes) / 60;\r\n    return `${hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})}` \r\n}\r\n\r\n\r\nexport function convertDateToMilliseconds(d) {\r\n    let m,y;\r\n    [y, m, d] = d.split(\"-\"); //Split the string\r\n     ;\r\n     return new Date(...[y, m - 1, d]).getTime() //Return as an array with y,m,d sequence\r\n  }\r\n\r\n\r\nexport function displayDays(dueDate){\r\n    if (dueDate === ASAP) {\r\n        return ASAP;\r\n    } else {\r\n        dueDate = new Date(dueDate).getTime()\r\n        let days = Math.ceil((dueDate - new Date().getTime()) / (1000*60*60*24));\r\n        switch(true){\r\n            case days <= -1:\r\n                return `Due ${Math.abs(days)} days ago`;\r\n            case days > 1:\r\n                return `${days} Days remaining`;\r\n            case days === 1:\r\n                return `${days} Day remaining`;\r\n            case Math.abs(days) === 0:\r\n                return `DUE TODAY `;\r\n            default:\r\n                return `${days} Days remaining`;\r\n        }\r\n    }\r\n}\r\n\r\nexport function pushChanges(action, item, list, shippingFunction, exp = 10){\r\n\r\n    let successMessage = '';\r\n    switch(action){\r\n        case ADD:\r\n            successMessage = `New ${list} added`;\r\n        break;\r\n        case REMOVE:\r\n            successMessage = `A ${list} was deleted`;\r\n        break;\r\n        case UPDATE:\r\n            successMessage = `A ${list} was updated`;\r\n        break;\r\n        default:      \r\n    }\r\n    let state = {\r\n        action: action,\r\n        list: list,\r\n        item: item,\r\n        pushDate: (new Date()).getTime(),\r\n        exp,\r\n        successMessage\r\n    }\r\n    shippingFunction(state);\r\n}\r\n\r\n\r\nexport function amendList(db, list, item, action, shippingFunction, expObj){\r\n    // lists = [ MISSIONS, TASKS, INBOX, REFERENCES, EVENTS, SOMEDAY, COMPLETED, PROCESSED, TRASH ]\r\n    \r\n    let dbList;\r\n    switch (list) {\r\n        case MISSIONS:\r\n            dbList = \"Missions\"\r\n        break;\r\n        case INBOX:\r\n            dbList = \"Inbox\"\r\n        break;\r\n        case REFERENCES:\r\n            dbList = \"References\"\r\n        break;\r\n        case EVENTS:\r\n            dbList = \"Events\"\r\n        break;\r\n        case TASKS:\r\n            dbList = \"Tasks\"\r\n        break;\r\n        case SOMEDAY:\r\n            dbList = \"Someday\"\r\n        break;\r\n        case PROCESSED:\r\n            dbList = \"Processed\"\r\n        break;\r\n        case TRASH:\r\n            dbList = \"Trash\"\r\n        break;\r\n        default:\r\n    }\r\n\r\n    let localList = db[dbList];\r\n    let itemndx = localList.indexOf(item);\r\n\r\n    console.log(\"local list = \", localList)\r\n    console.log(\"ammendment action = \", action)\r\n    console.log(\"index of item = \", itemndx)\r\n    switch (action) {\r\n        case REMOVE:\r\n            localList.splice(itemndx, 1);\r\n            //pushChanges(REMOVE, item, dbList, shippingFunction);\r\n        break;\r\n        case ADD:\r\n            localList.unshift(item);\r\n            pushChanges(ADD, item, dbList, shippingFunction);\r\n        break;\r\n        case UPDATE:\r\n            localList[itemndx] = item;\r\n            pushChanges(UPDATE, item, dbList, shippingFunction);\r\n        break;\r\n        default:\r\n    }\r\n\r\n    console.log(\"local list post ammendment = \", localList)\r\n}\r\n/* \r\n\r\nfunction changeNavigation(id, navChanger){\r\n    let nav;\r\n    if(title === MISSIONS) {\r\n        nav = {\r\n            title: MISSIONS,\r\n            view: \"DETAILS\",\r\n            ID: itemID\r\n        }\r\n    } else {\r\n        nav = {\r\n            title: title,\r\n            view: \"DETAILS\",\r\n            ID: id\r\n        }\r\n    }\r\n    changeNav(nav);\r\n}\r\n\r\n*/\r\n\r\n// export function passTitle(e, ChangeTitleFunction) {\r\n//     let targ = e.target;\r\n//     checkForTitle(targ)\r\n//     function checkForTitle (t) {\r\n//         if (t.title) {\r\n//             ChangeTitleFunction(t.title);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForTitle (t);   \r\n//         }\r\n//     }\r\n// }\r\n\r\n// function passKey(e, changeIDFunction) {\r\n//     //Takes the events target and checks for title attribute \r\n//     //If no title attribute, check parent node for title attribute\r\n//     //If not found, repeat step 2\r\n//     let targ = e.target;\r\n//     checkForID(targ);\r\n//     function checkForID (t) {\r\n//         if (t.id) {\r\n//             changeIDFunction(t.id);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForID (t);   \r\n//         }\r\n//     }\r\n// }","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeButton from '../components/HomeButton';\r\nimport MissionsButton from '../components/MissionsButton';\r\nimport TasksButton from '../components/TasksButton';\r\nimport InboxButton from '../components/InboxButton';\r\nimport StatsButton from '../components/StatsButton';\r\nimport { ChangeNav } from '../actions';\r\nimport { setNavValues } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { changeNav, state } = props;\r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='navbar center flex'>\r\n            <HomeButton touchFunction={handleEvent} />\r\n            <InboxButton touchFunction={handleEvent} />\r\n            <TasksButton touchFunction={handleEvent} />\r\n            <MissionsButton touchFunction={handleEvent} />\r\n            <StatsButton touchFunction={handleEvent} />\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MISSION, TASK, INBOX_ITEM, TASKS, DONE, COMPLETED, DETAILS, MISSIONS, INBOX, TRASH, CALENDAR, MISSION_TASKS, SOMEDAY, EVENT, EVENTS, REFERENCES, REFERENCE, PROCESSED } from '../constants';\r\nimport { displayDays } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nfunction ListItem( { touchFunction, item, title }){\r\n    \r\n    let nextTitle;\r\n\r\n    \r\n\r\n    switch(true){\r\n        case item.type === MISSION && !item.isTrashed:\r\n            //console.log(\"trash log  \",item)\r\n            title === SOMEDAY ? nextTitle = SOMEDAY : nextTitle = MISSIONS;\r\n            //let days = parseInt(Math.floor(total_hours / 24));\r\n            //let days = (item.dueDate / (1000*60*60*24)) % 7;\r\n            //console.log('days: ', days);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' title={item.isTrashed ? TRASH : nextTitle} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80 '>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        <p className='fw3 white'>{displayDays(item.dueDate)}, Tasks: {item.taskList.length}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === TASK && !item.isTrashed:\r\n            item.status === DONE ? nextTitle = COMPLETED : nextTitle = TASKS;\r\n            if(title === MISSIONS){nextTitle = MISSION_TASKS};\r\n            if(title === SOMEDAY){\r\n                nextTitle = SOMEDAY;\r\n                return (\r\n                    <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                        <div className='w-80'>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        {/* <p className='fw3 white'>{title === CALENDAR ? new Date(item.dueDate).toDateString() : item.requiredContext}</p> */}\r\n                        <p className='fw3 white'>NO DATE SET</p>\r\n                        </div>\r\n                        <div>\r\n                            <p className='gold fw7 b'>{item.status}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                        <div className='w-80'>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        {/* <p className='fw3 white'>{title === CALENDAR ? new Date(item.dueDate).toDateString() : item.requiredContext}</p> */}\r\n                        <p className='fw3 white'>{displayDays(item.dueDate)}</p>\r\n                        </div>\r\n                        <div>\r\n                            <p className='gold fw7 b'>{item.status}</p>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        case item.type === EVENT && !item.isTrashed:\r\n            nextTitle = EVENTS;\r\n            console.log(nextTitle);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{new Date(item.date).toDateString()}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>REM</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === REFERENCE && !item.isTrashed:\r\n        nextTitle = REFERENCES;\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    {/* <p className='fw3 white'>{new Date(item.dueDate).toDateString()}</p> */}\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>REF</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.status === PROCESSED && !item.isTrashed:\r\n        nextTitle = PROCESSED;\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' data-view={DETAILS}  title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{new Date(item.processedDate).toDateString()}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>PROCESSED</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.type === INBOX_ITEM && !item.isTrashed:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' \r\n                title={item.isTrashed ? TRASH : INBOX} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>Entered: {(new Date(item.entryDate)).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>PROCESS</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case item.isTrashed:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey min-h-50' \r\n                title={TRASH} data-view={DETAILS}  id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>DELETED: {(new Date(item.trashedDate)).toLocaleString()}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>{item.type}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='bb' title='new item' onClick={touchFunction}>\r\n                    <h3>Enter New Item</h3>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem);","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='h-100' style={{overflowY: 'scroll', overflowX: 'hidden'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, ChangeNav } from '../actions';\r\nimport ListItem from './ListItem';\r\nimport Scroll from './Scroll';\r\nimport { TASK, TASKS, MISSIONS, MISSION, INBOX_ITEM, TODAY, DAILY, DONE, REFERENCE, REFERENCES, COMPLETED, INBOX, ASAP, CALENDAR, TRASH, EVENT, PROCESSED, SOMEDAY, DETAILS } from '../constants';\r\nimport { setNavValues  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values,\r\n        view: state.values.view\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction List({ content, changeItemID, title, view, state, changeNav }) {\r\n\r\n    //console.log(\"first content: \", content)\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    let missionTasks, dueToday, todaysTasks, dailyEx, dailyTasks;\r\n    \r\n    \r\n\r\n    // useEffect(() => {\r\n    //     setSort(false)\r\n    // }) \r\n    \r\n    \r\n\r\n\r\n    // Mission, Task, Inbox, Event and Reference Lists \r\n    let type = '';\r\n    let status;\r\n    let filteredContent = []\r\n    //console.log(\"content \", content);\r\n    switch(title){\r\n        case INBOX:\r\n            filteredContent = content.filter((entry) => (entry.type === INBOX_ITEM && entry.isTrashed === false) && entry.status !== PROCESSED );\r\n        break;\r\n        case TRASH:\r\n            filteredContent = content.filter((entry) => (entry.isTrashed === true));\r\n        break;\r\n        case TODAY:\r\n            type = TASK;\r\n            filteredContent = content.filter((entry) => ((entry.type === type) && (entry.dueDate !== ASAP) && ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ));\r\n        break;\r\n        case DAILY:\r\n            type = TASK;\r\n            // Daily exercises\r\n            filteredContent = content.filter((entry) => (entry.type === type && entry.frequency === DAILY ) && (entry.isTrashed === false));\r\n            // console.log(\"filtered content\", filteredContent)\r\n            // dailyTasks = filteredContent.map((entry, i) => {\r\n            //     return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n            // })\r\n        break;\r\n        default:\r\n            filteredContent = content.filter((entry) => (entry.isTrashed === false));\r\n    }\r\n\r\n    const listItems = filteredContent.map((entry,i) => {\r\n        return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n    const [ sortedContent, setSortedContent ] = useState(filteredContent);\r\n    const [ sort, setSort ] = useState(false);\r\n\r\n    function swapOrder(list, i, direction){\r\n        console.log(\"changing order\")\r\n        if (direction === \"UP\" && list[i].order !== 0){\r\n            console.log(list[i])\r\n            list[i-1].order++;\r\n            list[i].order--;\r\n        } else if (direction === \"DOWN\" && list[i].order !== list.length - 1){\r\n            console.log(list[i])\r\n            list[i+1].order--;\r\n            list[i].order++;\r\n        }\r\n        filteredContent = filteredContent.sort((a,b) => a.order - b.order)\r\n        setSortedContent(filteredContent)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setSortedContent(filteredContent);\r\n    // })\r\n\r\n\r\n    switch(title){\r\n        // case TODAY:\r\n        //     return (\r\n        //         <Scroll>\r\n        //             {todaysTasks}\r\n        //         </Scroll>\r\n        //     )\r\n        // case DAILY:\r\n        //     return (\r\n        //         <Scroll>\r\n        //             {dailyTasks}\r\n        //         </Scroll>\r\n        //     )\r\n        case MISSIONS:\r\n            if (view === DETAILS){\r\n                if (sort === true){\r\n                    return (\r\n                        <div>\r\n                            <button className='pb2' onClick={()=>{setSort(false)}}>SAVE ORDER</button>\r\n                            <Scroll>\r\n                                {filteredContent.map((entry,i) => {\r\n                                    return (\r\n                                        <div className='pb2'>\r\n                                            <p className='white fw7 b tc' onClick={()=> swapOrder(sortedContent, i, \"UP\") }>^</p>\r\n                                            <ListItem item={sortedContent[i]} touchFunction={handleEvent} key={sortedContent[i].id}/>\r\n                                            <p className='white fw5 tc' onClick={()=> swapOrder(sortedContent, i, \"DOWN\") }>v</p>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </Scroll>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div>\r\n                            <button className='pb2' onClick={()=>{setSort(true)}}>CHANGE ORDER</button>\r\n                            <Scroll>\r\n                                {listItems}\r\n                            </Scroll>\r\n                        </div>\r\n                    )\r\n                }\r\n            } else {\r\n                return (\r\n                    <div className='h-100'>\r\n                        <Scroll>\r\n                            {listItems}\r\n                        </Scroll>\r\n                    </div>\r\n                )\r\n            }\r\n        default:\r\n            return (\r\n                <Scroll>\r\n                    {listItems}\r\n                </Scroll>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from '../actions';\r\nimport { NEW } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeView: (view) => {\r\n            return dispatch(selectView(view))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItemButton({ changeView }) {\r\n\r\n    return (\r\n        <div className='whiteB w2 h2 flex items-center justify-center' data-view={NEW} onClick={ () => changeView(NEW)}>\r\n            <h1 className=' white b f8 fw9 ma0'>+</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItemButton);","import {TASK, PENDING, MISSION, UNPLANNED, ASAP, UNPROCESSED, INBOX_ITEM, EVENT, REFERENCE, SOMEDAY } from './constants';\r\n\r\nexport class Item{\r\n    constructor(name,description='None') {\r\n        const d= new Date();\r\n\r\n        this.type = INBOX_ITEM;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.description = '';\r\n        this.status = UNPROCESSED;\r\n        this.exp = 5;\r\n        this.isTrashed = false;\r\n        this.trashedDate = \"\";\r\n        this.processedDate = \"\";\r\n\r\n    }\r\n}\r\n\r\nexport class Task{\r\n    constructor(name,outcome, requiredContext, associatedMissionID = 0, dueDate = SOMEDAY, order = 0) {\r\n        const d = new Date();\r\n        this.type = TASK;\r\n        this.id = d.getTime()+Math.ceil(Math.random()*1000);\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.priority = 'NONE';\r\n        this.frequency = 'NONE';\r\n        this.outcomeRecordID = 0;\r\n        this.name = name;\r\n        this.outcome = outcome;\r\n        this.requiredContext = requiredContext;\r\n        this.note = '';\r\n        this.dueDate = dueDate//(new Date()).toISOString().substr(0, 10);\r\n        this.timeRequired = 0;\r\n        this.requirements = '';\r\n        this.associatedMissionID = associatedMissionID;\r\n        this.exp = 20;\r\n        this.details = '';\r\n        this.isTrashed = false;\r\n        this.trashedDate = \"N/A\";\r\n        this.timeSpent = 0;\r\n        this.activeSince = 0;\r\n        this.doneDate = \"N/A\";\r\n        this.order = order;\r\n    }\r\n}\r\n\r\nexport class Mission{\r\n    constructor(outcome ='', purpose ='', dueDate = ASAP, requirements = '', priority = \"\", frequency = '' ) {\r\n        const d = new Date();\r\n        this.type = MISSION;        \r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = UNPLANNED;\r\n\r\n        this.name = outcome;\r\n        this.purpose = purpose;\r\n        this.vision = '';\r\n        this.principles = '';\r\n        this.toDo = \"\";\r\n        this.skillsRequired = \"\";\r\n        this.infoRequired = \"\";\r\n        this.abilityRequired = \"\";\r\n        this.dueDate = dueDate //(new Date(parseInt((d.getTime() + 7776000000)))).toISOString().substr(0, 10); // 3 months from the date the MISSION is planned \r\n        this.taskList = [];\r\n\r\n        this.backStory = \"\"\r\n        this.outputRef = 0;\r\n        this.outputRecordUrl = \"\"\r\n        \r\n        this.timeRequired = 7776000000;\r\n        this.timeSpent = 0;\r\n        \r\n        this.requirements = requirements;\r\n        this.priority = priority;\r\n        this.frequency = frequency;\r\n        this.note = '';\r\n        \r\n        this.isTrashed = false;\r\n        this.trashedDate = \"\";\r\n        this.doneDate = \"\";\r\n\r\n        this.exp = 100;\r\n    }\r\n}\r\n\r\nexport class Reference{\r\n    constructor(name, details='') {\r\n        const d= new Date();\r\n        this.type = REFERENCE;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.details = details;\r\n        this.exp = 5;\r\n        this.isTrashed = false;\r\n    }\r\n}\r\n\r\nexport class Event{\r\n    constructor(name, date = new Date().toISOString().substr(0, 10), time = \"\", location ='', frequency = \"\") {\r\n        const d= new Date();\r\n        this.type = EVENT;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.name = name;\r\n        this.date = date;\r\n        this.time = time;\r\n        this.location = \"\";\r\n        this.frequency = frequency;\r\n        this.exp = 5;\r\n        this.note = \"\";\r\n        this.isTrashed = false;\r\n        this.trashedDate = \"\";\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { ASAP, MISSIONS, NEW, SOMEDAY } from '../constants';\r\nimport { convertDateToMilliseconds, pushChanges } from '../functions';\r\nimport {UpdateExp, ShipItems,ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DatePicker);\r\n\r\nfunction DatePicker({ item, dueDate, db, title, updateFunc, view }){\r\n\r\n    let DbList = ''\r\n    switch (title) {\r\n        case MISSIONS:\r\n\r\n    }\r\n\r\n    // REASSIGN DUE DATE TO FIX \"ASAP\" DATE FORMAT ISSUES\r\n    let dateValue;\r\n    //dueDate === ASAP ? dateValue = new Date().getTime() : dateValue = dueDate;\r\n    dueDate === ASAP ? dateValue = new Date().toISOString().substr(0, 10) : dateValue = dueDate;\r\n\r\n    // CONVERT DATE STRING TO MILLISECONDS\r\n    //const [ date, setDate ] = useState((new Date(dateValue)).toISOString().substr(0, 10));\r\n    const [ date, setDate ] = useState((dateValue));\r\n    const [ changeDate, setChangeDate ] = useState(false);\r\n    const [ isASAP, setIsASAP ] = useState(false);\r\n    const [ isSomeday, setIsSomeday ] = useState(false);\r\n    \r\n    //   let str = \"2020-10-26\";\r\n    //   console.log(prepareDate(str));\r\n\r\n    useEffect(() => {\r\n        //view === NEW ? setChangeDate(true) : setChangeDate(false) ;\r\n        setChangeDate(false)\r\n        // setDate((new Date(dateValue)).toISOString().substr(0, 10));\r\n        setDate((dateValue));\r\n        // setChangeDate(false);\r\n        if (dueDate === ASAP){\r\n            setIsASAP(true)\r\n        } else {\r\n            setIsASAP(false)\r\n        }\r\n    }, [dueDate, ASAP])\r\n\r\n    switch(changeDate){\r\n        case true:\r\n            console.log(\"Current task \", item)\r\n            console.log(\"Current task.dueDate \", dueDate)\r\n            console.log(\"Current date: \", date)\r\n            console.log(\"Current dateValue: \", dateValue)\r\n            return (\r\n                <div>\r\n                    <input type='date' className='fw3 white bn bg-transparent' autoFocus\r\n                    defaultValue={date}\r\n                    onChange={(e)=> {console.log(e.target.value);setDate(e.target.value);} } \r\n                    onBlur={() =>{}} \r\n                    />\r\n                    <div>\r\n                        <button className=\"button\" onClick={() => { \r\n                            updateFunc(ASAP); setIsASAP(true); \r\n                            setChangeDate(false) \r\n                        }}>A.S.A.P</button>\r\n                        <button className=\"button\" onClick={() => { \r\n                            updateFunc(SOMEDAY);\r\n                            setChangeDate(false); setIsSomeday(true) \r\n                        }}>SOMEDAY</button>\r\n                        <button className=\"button\" onClick={() => { \r\n                            //updateFunc(convertDateToMilliseconds(date));\r\n                            updateFunc(date);\r\n                            setChangeDate(false); setIsASAP(false) \r\n                        }}>Save</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            if (isASAP){\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw4 white' onClick={() => setChangeDate(true)}>ASAP</h5>\r\n                    </div>\r\n                    )\r\n            } else if (isSomeday) {\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw4 white' onClick={() => setChangeDate(true)}>SOMEDAY</h5>\r\n                    </div>\r\n                    )\r\n            } else {\r\n                return (\r\n                    <h5 className='fw4 white' onClick={() => setChangeDate(true)}>{date}</h5>\r\n                )\r\n            }\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, TASK, MEDIUM, HIGH, MISSIONS, ADD, DAILY, NONE, SOMEDAY } from '../constants';\r\nimport { selectView, selectItem, ShipItems, ChangeNav, } from '../actions';\r\nimport { Task } from '../classes';\r\nimport { pushChanges } from '../functions';\r\nimport DatePicker from './DatePicker';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewTask({ changeItemID, updateExp, shipItems, itemID, db, changeNav, title }) {\r\n\r\n    const TaskList = db.Tasks;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ details, setDetails ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(SOMEDAY);\r\n    const [ agent, setAgent ] = useState('');\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState('NONE');\r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ associatedMissionID, setAssociatedMissionID ] = useState(itemID);\r\n\r\n    function submitNewItem(event) {\r\n        let t = new Task(name, outcome, requiredContext, associatedMissionID, dueDate);\r\n        console.log(t);\r\n        t.frequency = frequency;\r\n        t.details = details;\r\n        updateExp(5);\r\n        TaskList.unshift(t);\r\n        pushChanges(ADD, t, \"Tasks\", shipItems);\r\n        if(title === MISSIONS){\r\n           addToMissionTasks(t, associatedMissionID);\r\n        }\r\n        //changeItemID(t.id);\r\n        changeNavigation(t.id)\r\n        event.preventDefault();\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav;\r\n        if(title === MISSIONS) {\r\n            nav = {\r\n                title: MISSIONS,\r\n                view: \"DETAILS\",\r\n                ID: itemID\r\n            }\r\n        } else {\r\n            nav = {\r\n                title: title,\r\n                view: \"DETAILS\",\r\n                ID: id\r\n            }\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function addToMissionTasks(task, projID){\r\n        let id = parseInt(projID);\r\n        let content = db.Missions;\r\n        let proj;\r\n        for (let i=0; i<content.length; i++){\r\n            console.log(content[i].id)\r\n            if (content[i].id === id){\r\n                console.log(content[i].id)\r\n\r\n                proj = content[i];\r\n                proj.taskList.unshift(task.id);\r\n\r\n                pushChanges(\"UPDATE\", proj, \"Missions\", shipItems);\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW TASK</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={TASK}>\r\n                <input className='pa2 mb1' type='text' autoFocus placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input  className='pa2 mb1'type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea  className='pa2 mb1' placeholder='Details' value={details} onChange={(e) => setDetails(e.target.value)} />\r\n                <textarea  className='pa2 mb1' placeholder='Required Context' value={requiredContext} onChange={(e) => setRequiredContext(e.target.value)} />\r\n                {/* <label className='fw4 white' htmlFor=\"due date\" >Due Date:</label> */}\r\n                <DatePicker item={{}} dueDate={dueDate} updateFunc={setDueDate} />\r\n                {/* <input className='pa2 mb1' id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} /> */}\r\n                <select className='pa2 mb1' id=\"priority\" value={frequency} onChange={(e)=> setFrequency(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Frequency</option>\r\n                    <option value={NONE}>ONE-TIME</option>\r\n                    <option value={DAILY}>DAILY</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                <input className='pa2 mb1' type='text' placeholder='Assigned Agent' value={agent} onChange={(e)=> setAgent(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated Mission name' value={associatedMission} onChange={(e) => setAssociatedMission(e.target.value)} /> */}\r\n                <input className='pa2 mb1' type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, MEDIUM, HIGH, MISSION, ADD, MISSIONS, DETAILS, SOMEDAY, UNPLANNED, ASAP } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { Mission } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\nimport DatePicker from './DatePicker';\r\nimport Scroll from './Scroll';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewMission({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const MissionsList = db.Missions;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n    \r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ purpose, setPurpose ] = useState('');\r\n    const [ vision, setVision ] = useState('');\r\n    const [ principles, setPrinciples ] = useState('');\r\n    const [ toDo, setToDo ] = useState('');\r\n    const [ skillsRequired, setSkillsRequired ] = useState('');\r\n    const [ infoRequired, setInfoRequired ] = useState('');\r\n    const [ abilityRequired, setAbilityRequired ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(ASAP);\r\n    \r\n    const [ backStory, setBackStory ] = useState('');\r\n\r\n    const [ timeRequired, setTimeRequired ] = useState('');\r\n    \r\n    \r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ priority, setPriority ] = useState('');\r\n\r\n    const [ status, setStatus ] = useState(UNPLANNED);\r\n\r\n    \r\n\r\n\r\n\r\n    function submitNewItem() {\r\n        \r\n        let m = new Mission(outcome.trim(), purpose, dueDate, requirements, priority);\r\n        m.vision = vision;\r\n        m.principles = principles;\r\n        m.toDo = toDo;\r\n        m.skillsRequired = skillsRequired;\r\n        m.infoRequired = infoRequired;\r\n        m.abilityRequired = abilityRequired;\r\n        m.backStory = backStory;\r\n        m.timeRequired = timeRequired;\r\n        m.status = status;\r\n        console.log(m);\r\n        MissionsList.unshift(m);\r\n        pushChanges(ADD, m, \"Missions\", shipItems);\r\n        updateExp(5);\r\n        // event.preventDefault();\r\n\r\n        const nav = {\r\n            title: MISSIONS,\r\n            view: DETAILS,\r\n            ID: m.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }  \r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa2'>\r\n            <div className='h-80 pa2' title={MISSION}>\r\n                <h1 className='tc b gold f3'>NEW MISSION</h1>\r\n                <Scroll>\r\n                    <div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>What's the Back story?</h5>\r\n                        <textarea autoFocus rows=\"4\" cols=\"30\" wrap='hard'\r\n                        className='pb2 w-80 fw3 bn pa2' \r\n                        value={backStory} \r\n                        onChange={(e)=> {setBackStory(e.target.value);} } \r\n                        />\r\n                    </div>\r\n\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>What's the desired Outcome?</h5>\r\n                        <input type='text' \r\n                            className='bn fw7 b pa1'\r\n                            value={outcome} \r\n                            onChange={(e)=> {setOutcome(e.target.value);} }   \r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>What's the Purpose?</h5>\r\n                        <textarea rows=\"4\" cols=\"30\" wrap='hard'\r\n                        className='pb2 w-80 fw3 bn pa2' \r\n                        value={purpose} \r\n                        onChange={(e)=> {setPurpose(e.target.value);} } \r\n                        />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>Vision: Describe what you see:</h5>\r\n                        <textarea rows=\"4\" cols=\"30\" wrap='hard'  \r\n                        className='w-80 fw3 bn pa2' \r\n                        value={vision} \r\n                        onChange={(e)=> {setVision(e.target.value);} } \r\n                        />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>Principles/Criteria/Specifications:</h5>\r\n                        <textarea rows=\"4\" cols=\"150\"  \r\n                        className='w-80 fw3 bn pa2' \r\n                        value={principles} \r\n                        onChange={(e)=> {setPrinciples(e.target.value);} } \r\n                        />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>DUE:</h5>\r\n                        <DatePicker item={{}} dueDate={dueDate} updateFunc={setDueDate} />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>To do / Next Actions (Brainstorming Output):</h5>\r\n                        <textarea rows=\"4\" cols=\"150\" \r\n                        className='w-80 fw3 bn pa2' \r\n                        value={toDo} \r\n                        onChange={(e)=> {setToDo(e.target.value);} } \r\n                        />\r\n                    </div>\r\n                    <h5 className='fw3 white bb b--grey bw2 pb2'>OPTIONAL</h5>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>Skills Required:</h5>\r\n                        <textarea rows=\"4\" cols=\"150\"  \r\n                        className='w-80 fw3 bn pa2' \r\n                        value={skillsRequired} \r\n                        onChange={(e)=> {setSkillsRequired(e.target.value);} } \r\n                        />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>Knowledge/Information Required:</h5>\r\n                        <textarea rows=\"4\" cols=\"150\"  \r\n                        className='w-80 fw3 bn pa2' \r\n                        value={infoRequired} \r\n                        onChange={(e)=> {setInfoRequired(e.target.value);} }  \r\n                        />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>Ability Required:</h5>\r\n                        <textarea rows=\"4\" cols=\"150\" \r\n                        className='w-80 fw3 bn' \r\n                        value={abilityRequired} \r\n                        onChange={(e)=> {setAbilityRequired(e.target.value);} } \r\n                        />\r\n                    </div>\r\n                    <div className='pb4'>\r\n                        <h5 className='fw3 white'>Time Required:</h5>\r\n                        <textarea rows=\"4\" cols=\"150\" \r\n                        className='w-80 fw3 bn'\r\n                        value={timeRequired} \r\n                        onChange={(e)=> {setTimeRequired(e.target.value);} } \r\n                        />\r\n                    </div>\r\n\r\n                    <button onClick={()=> {\r\n                        setStatus(PENDING); \r\n                        }} >MARK AS PLANNED\r\n                    </button>\r\n                    </div>\r\n                </Scroll>\r\n                <div className=\"pt2\">\r\n                    <button onClick={()=> {\r\n                        submitNewItem(); \r\n                        }} >SUBMIT\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMission);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ADD, DETAILS, REFERENCES, REFERENCE } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { Reference } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewReference({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const References = db.References;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ details, setDetails ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let r = new Reference(name, details );\r\n        console.log(r);\r\n        //References.unshift(r);\r\n        pushChanges(ADD, r, \"References\", shipItems);\r\n        updateExp(5);\r\n        event.preventDefault();\r\n\r\n        const nav = {\r\n            title: REFERENCES,\r\n            view: DETAILS,\r\n            ID: r.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW REFERENCE</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={REFERENCE}>\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Name' value={name} onChange={(e) => setName(e.target.value)} />\r\n                <textarea className='pa2 mb1' placeholder='Details' value={details} onChange={(e) => setDetails(e.target.value)} />\r\n                <input className='pa2 mb1'type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewReference);","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ADD, DAILY, DETAILS, EVENTS, MONTHLY, NONE, WEEKLY, YEARLY } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport {  Event } from '../classes';\r\nimport { pushChanges, convertDateToMilliseconds  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewEvent({ updateExp, shipItems, changeNav, db }) {\r\n\r\n    const Events = db.Events;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ date, setDate ] = useState(today);\r\n    const [ time, setTime ] = useState(\"\");\r\n    const [ location, setLocation ] = useState(\"\");\r\n    const [ frequency, setFrequency ] = useState(\"\");\r\n    const [ note, setNote ] = useState('');\r\n\r\n\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let e = new Event( name, date, time, location, frequency );\r\n        console.log(e);\r\n        //Events.unshift(e);\r\n        pushChanges(ADD, e, \"Events\", shipItems);\r\n        updateExp(5);\r\n        event.preventDefault();\r\n\r\n        const nav = {\r\n            title: EVENTS,\r\n            view: DETAILS,\r\n            ID: e.id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW EVENT</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={EVENTS}>\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Name' value={name} onChange={(e) => setName(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"date\" >Date:</label>\r\n                <input className='pa2 mb1' id='date' type='date' min={today} value={date} onChange={(e) => setDate(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"time\" >Time:</label>\r\n                <input className='pa2 mb1' id='time' type='time' value={time} onChange={(e) => {setTime(e.target.value); console.log(time)}} />\r\n                <label className='fw4 white' htmlFor=\"location\" >Location:</label>\r\n                <input className='pa2 mb1' autoFocus type='text' placeholder='Location' value={location} onChange={(e) => setLocation(e.target.value)} />\r\n                <label className='fw4 white' htmlFor=\"frequency\" >Frequency:</label>\r\n                <select className='pa2 mb1' id=\"priority\" value={frequency} onChange={(e)=> setFrequency(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Frequency</option>\r\n                    <option value={NONE}>ONE-TIME</option>\r\n                    <option value={DAILY}>DAILY</option>\r\n                    <option value={WEEKLY}>WEEKLY</option>\r\n                    <option value={MONTHLY}>MONTHLY</option>\r\n                    <option value={YEARLY}>YEARLY</option>\r\n                </select>\r\n                <textarea className='pa2 mb1' placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <input className='pa2 mb1'type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewEvent);","import React, { useState } from 'react';\r\nimport { INBOX, MISSIONS, TASKS, DETAILS, REFERENCES, EVENTS, REFERENCE, ADD, CALENDAR } from '../constants';\r\nimport { Item } from '../classes';\r\nimport NewTask from './NewTask';\r\nimport NewMission from './NewMission';\r\nimport { selectItem, ShipItems, selectTitle, ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport NewReference from './NewReference';\r\nimport NewEvent from './NewEvent';\r\nimport { amendList } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        exp: state.UpdateExpReducer.exp\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItem({ submitFunction, title, updateExp, changeItemID, shipItems, db, changeTitle, itemID, changeNav, exp }) {\r\n\r\n    // const [ type, setType ] = useState(title);\r\n    const [ name, setName ] = useState('Enter item name');\r\n    \r\n    const InboxItems = db.Inbox;\r\n    //console.log(InboxItems);\r\n\r\n    function reset(){\r\n        //changeTitle(INBOX);\r\n        setName('Enter item name');\r\n        // setDescription('');\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        if(name !== 'Enter item name' && name !== '' ){\r\n            let i = new Item(name);\r\n            // InboxItems.unshift(i);\r\n            // pushChanges(\"ADD\", i, \"Inbox\");\r\n            updateExp(5);\r\n            amendList(db, INBOX, i, ADD, shipItems)\r\n            changeNavigation(i.id);\r\n            //submitFunction(event);\r\n            reset();\r\n            event.preventDefault();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav = {\r\n                title: INBOX,\r\n                view: DETAILS,\r\n                ID: id\r\n            }\r\n        changeNav(nav);\r\n    }\r\n    \r\n    function displayTypeForm(){\r\n        switch(true) {\r\n            case title === TASKS:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === MISSIONS && parseInt(itemID) === 0:\r\n                return <NewMission updateExp={updateExp} />\r\n            case title === MISSIONS && parseInt(itemID) !== 0:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === REFERENCES:\r\n                return <NewReference updateExp={updateExp} />\r\n            case title === CALENDAR:\r\n                return <NewEvent updateExp={updateExp} />\r\n            case title === EVENTS:\r\n                return <NewEvent updateExp={updateExp} />\r\n            default:\r\n                return (\r\n                    <div className='h-100 w-100 center ba b--black-10 '>\r\n                        <h1 className='tc gold b'>NEW ITEM</h1>\r\n                        <form onSubmit={submitNewItem} className='flex flex-column' title={INBOX}>\r\n                            <input className='pa2 mb2' type='text' autoFocus onChange={(e)=> setName(e.target.value)} placeholder='Enter item name...'  />\r\n                            {/* <textarea value={description} onChange={(e) => setDescription(e.target.value)} /> */}\r\n                            <input className='pa2 mb1' type='submit' value='submit' />\r\n                        </form>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='pa1 w-100 h-100'>\r\n            <div className='pa1 w-100 flex justify-center'>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(INBOX)}>INBOX</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(TASKS)}>TASK</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(MISSIONS)}>MISSION</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(REFERENCES)}>REFERENCE</button>\r\n                <button className=\"f7 button w-20\" onClick={(e)=> changeTitle(EVENTS)}>EVENT</button>\r\n                {/* <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>FINANCE</button> */}\r\n            </div>\r\n                {displayTypeForm()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);","import React from 'react';\r\n\r\nexport default function QuestionAndOptions({ question, yes, no }) {\r\n    return (\r\n        <div className='h-100 w-100 br1 pa3 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <div>\r\n                <button className=\"button\" onClick={yes}>YES</button>\r\n                <button className=\"button\" onClick={no} >NO</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function QuestionandInput({ question, submitFunction }) {\r\n\r\n    const [ answer, setAnswer ] = useState('');\r\n\r\n    function submit(event) {\r\n\r\n        if(answer !==''){\r\n            submitFunction(answer);\r\n            setAnswer('');\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <form onSubmit={submit}>\r\n                <input type='text'  autoFocus value={answer} onChange={(e)=> setAnswer(e.target.value)} />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}","export const ReferenceList = []","import React from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, UpdateTaskStatus, SetActiveTask, ShipItems, ChangeNav } from '../actions';\r\nimport { DONE, ACTIVE, PAUSED, PENDING, UPDATE, ADD, REMOVE, COMPLETED } from '../constants';\r\nimport { pushChanges  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timerOn: state.SetActiveTaskReducer.timerOn,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskControls);\r\n\r\nfunction TaskControls({ task, position, changeNav, updateExp, changeItemID, setActiveTask, activeSince, activeTask, shipItems, db, timerOn }){\r\n\r\n    if( task.status === ACTIVE && timerOn === false){\r\n        startTimer();\r\n        console.log(\"Timer is off\")\r\n    }\r\n\r\n    function updateTask(){\r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n    }\r\n    \r\n    let prevTimeSpent = parseInt(task.timeSpent);\r\n    //console.log(\"on entering task cont, prevtime: \", prevTimeSpent)\r\n    function startTimer(){\r\n        task.status = ACTIVE;\r\n        if (task.activeSince === 0 ){\r\n            task.activeSince = new Date().getTime();\r\n        }\r\n        setActiveTask(task);\r\n        updateTask();\r\n    }\r\n\r\n    function pauseTask(){\r\n        const dateNow = new Date().getTime();\r\n        task.timeSpent = prevTimeSpent + (dateNow - parseInt(activeSince));\r\n        setActiveTask({});\r\n        task.status = PAUSED;\r\n        task.activeSince = 0;\r\n        timerOn = false;\r\n        updateTask();\r\n        //console.log(\"previos time spent:, \", prevTimeSpent)\r\n        //console.log(\"time spent:, \", task.timeSpent)\r\n    }\r\n\r\n    function markAsDone(){\r\n        const dateNow = new Date().toISOString().substr(0, 10);\r\n        task.doneDate = dateNow;\r\n        if (task.status === ACTIVE) {\r\n            pauseTask();\r\n        }\r\n        task.status = DONE;\r\n        //console.log(\"timespent from task controls: \", prevTimeSpent)\r\n        //parseInt(prevTimeSpent) === 0 ? task.timeSpent = 0 : task.timeSpent = prevTimeSpent + (dateNow - parseInt(activeSince));\r\n        //console.log(\"timespent from task controls after: \", task.timeSpent)\r\n        setActiveTask({});\r\n        updateExp(task.exp);\r\n        updateTask();\r\n        //db.Completed.unshift(task);\r\n        //pushChanges(ADD, task, \"Completed\", shipItems);\r\n        //db.Tasks.splice(position,1);\r\n        //pushChanges(REMOVE, task, \"Tasks\", shipItems);\r\n        const nav = {\r\n            title: COMPLETED,\r\n            view: \"DETAILS\",\r\n            ID: task.id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    \r\n\r\n    switch(task.status){\r\n        case ACTIVE:\r\n            //console.log(activeTask.id === true)\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={pauseTask}>PAUSE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PAUSED:\r\n            if (activeTask.id === undefined){\r\n\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>CONTINUE</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            }\r\n        case PENDING:\r\n            //console.log(typeof activeTask)\r\n            //console.log(activeTask.id)\r\n            if(activeTask.id === undefined) {\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                    </div>)\r\n            }   \r\n        default:\r\n            return <div></div>\r\n    }\r\n    // Different controls are displayed based on if a task is ongoing\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport QuestionAndOptions from '../components/QuestionAndOptions';\r\nimport QuestionandInput from '../components/QuestionAndInput';\r\nimport { Task, Mission, Reference, Event } from '../classes';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport {  PROCESSED, TASK, PENDING, UNPROCESSED, REFERENCE, ADD, UPDATE, REMOVE, REFERENCES, SOMEDAY, MISSIONS, TASKS, DETAILS, EVENTS, INBOX } from '../constants';\r\nimport { selectView, selectItem, ChangeNav, ShipItems } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport DatePicker from '../components/DatePicker';\r\nimport { pushChanges  } from '../functions';\r\nimport TaskControls from '../components/TaskControls';\r\n\r\n\r\n//shipItems(items, agent, record)\r\n//\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Processor({ nextItemID, item, touchFunction, changeItemID, itemIndex, db, shipItems, changeNav }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const MissionList = db.Missions;\r\n    const TaskList = db.Tasks;\r\n    const SomedayList = db.Someday;\r\n    const References = db.References;\r\n    const Events = db.Events;\r\n\r\n    \r\n\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ isActionable, setIsActionable ] = useState(null);\r\n    const [ isMultistep, setIsMultistep ] = useState(null);\r\n    const [ isDoneInFive, setIsDoneInFive ] = useState(null);\r\n    const [ isDelegatable, setIsDelegatable ] = useState(null);\r\n    const [ step, setStep ] = useState(0);\r\n    const [ nextID, setNextID ] = useState(0);\r\n    const [ isDoneInaYear, setIsDoneInaYear ] = useState(null);\r\n    const [ newMissionID, setNewMissionID ] = useState(0);\r\n    const [ newTaskID, setNewTaskID ] = useState(0);\r\n    const [ newMission, setNewMission ] = useState(null);\r\n    const [ newTask, setNewTask ] = useState(null);\r\n    const [ assignedAgent, setAssignedAgent ] = useState(null);\r\n    const [ dueDate, setDueDate ] = useState(null);\r\n    const [ trashed, setTrashed ] = useState(false);\r\n    const [ incubated, setIncubated ] = useState(false);\r\n    const [ referenced, setReferenced ] = useState(false);\r\n    const [ newReference, setNewReference ] = useState(null);\r\n    const [ refDetails, setRefDetails ] = useState('');\r\n    const [ newEvent, setNewEvent ] = useState(null);\r\n\r\n\r\n    function makeNewMission(){\r\n        let proj = new Mission( outcome );\r\n        setNewMission(proj);\r\n        setNewMissionID(proj.id);\r\n        //MissionList.unshift(proj);\r\n        // pushChanges(ADD, proj, \"Missions\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(proj.id);\r\n    }\r\n\r\n    function makeNewTask(name){\r\n        let asProjID;\r\n        let theOutcome = outcome;\r\n        if (isMultistep === true) {\r\n            theOutcome = '';\r\n            asProjID = newMissionID;\r\n        }\r\n\r\n        let task = new Task(name, theOutcome, requiredContext, asProjID);\r\n        setNewTask(task);\r\n        console.log(\"new task = \",task);\r\n        updateStatus();\r\n        setNextID(task.id);  \r\n\r\n        //ADD TASK TO TASK LIST AND \r\n        //TaskList.unshift(task);\r\n        pushChanges(ADD, task, \"Tasks\", shipItems);\r\n\r\n        // InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNewTaskID(task.id);  \r\n    }\r\n\r\n    function makeNewReference(name){ \r\n\r\n        let ref = new Reference(name);\r\n        setNewReference(ref);\r\n        console.log(\"new ref = \", ref);\r\n        setNextID(ref.id); \r\n\r\n    }\r\n\r\n    function makeNewEvent(name){ \r\n\r\n        let ev = new Event(name);\r\n        setNewEvent(ev);\r\n        console.log(\"new event = \", ev);\r\n        setNextID(ev.id); \r\n\r\n    }\r\n\r\n    function amendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case MissionList:\r\n                dbList = \"Missions\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case References:\r\n                dbList = \"References\"\r\n            break;\r\n            case Events:\r\n                dbList = \"Events\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                //list.splice(itemndx, 1);\r\n                //pushChanges(REMOVE, item, dbList, shipItems);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                //pushChanges(ADD, item, dbList, shipItems);\r\n            break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    function updateStatus() {\r\n        item.status = PROCESSED;\r\n        item.processedDate = new Date().toISOString().substr(0, 10);\r\n        pushChanges(UPDATE, item, \"Inbox\", shipItems);\r\n    }\r\n    \r\n    function processNextItem(e){\r\n        setStep(0);\r\n        //touchFunction(e);\r\n        let nav = { \r\n            title: INBOX,\r\n            view: DETAILS,\r\n            ID: nextItemID\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    function proceed() {\r\n        setStep((step+1));\r\n    }\r\n\r\n    function refresh(){\r\n        changeItemID(item.id);\r\n    }\r\n\r\n    \r\n    if (item.status === UNPROCESSED && step === 0){\r\n        proceed();\r\n    }\r\n\r\n    let nav;\r\n    if (isMultistep){\r\n        nav = {\r\n            title: MISSIONS,\r\n            view: DETAILS,\r\n            ID: newMission.id\r\n        }\r\n    } else if(isMultistep === false && step >4){\r\n        nav = {\r\n            title: TASKS,\r\n            view: DETAILS,\r\n            ID: newTask.id\r\n        }\r\n    }\r\n\r\n    function viewNewReference(id) {\r\n        nav = {\r\n            title: REFERENCES,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function viewNewEvent(id) {\r\n        nav = {\r\n            title: EVENTS,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n\r\n        changeNav(nav);\r\n    }\r\n\r\n    function saveDate(date){\r\n        //updateDB( mission, \"dueDate\", date )\r\n\r\n    }\r\n\r\n    switch(true) {\r\n        case ( step === 1 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Is this Actionable?' \r\n                    yes={() => { setIsActionable(true); proceed() }} \r\n                    no={() => { setIsActionable(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={() => { setReferenced(true); makeNewReference(item.name); proceed() }} >ADD TO REFERENCES</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => { setIncubated(true); makeNewEvent(item.name); proceed() }} >ADD TO EVENTS</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => { setTrashed(true); trashItem(); proceed() }} >TRASH</button> */}\r\n                </div>\r\n            )\r\n        case ( trashed === true && step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>Item has been trashed</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 3 && referenced === true ):\r\n            //\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n                    <h2 className='white tc pb2'>Any details to add?</h2>\r\n                    <form onSubmit={(e) => { \r\n                        newReference.details = refDetails; \r\n                        console.log(newReference); \r\n                        pushChanges(UPDATE, newReference, \"References\", shipItems);\r\n                        updateStatus(); \r\n                        e.preventDefault(); \r\n                        proceed() \r\n                    }}>\r\n                        <textarea rows=\"4\" cols=\"45\" autoFocus value={refDetails} onChange={(e)=> setRefDetails(e.target.value)} />\r\n                        <input type='submit' value='submit' />\r\n                    </form>\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 3 && incubated === true ):\r\n            function saveEventDate(date){\r\n                newEvent.date = date;\r\n            }\r\n        \r\n        return (\r\n            <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n                <h2 className='white tc pb2'>Date of Event?</h2>\r\n                <DatePicker item={newEvent} dueDate={newEvent.date} updateFunc={saveEventDate}/>\r\n                <div>\r\n                    <button className=\"button\" onClick={() => { \r\n                        pushChanges(ADD, newEvent, \"Events\", shipItems);\r\n                        amendList(ADD, Events, newEvent, 0); \r\n                        updateStatus(); \r\n                        proceed(); \r\n                    }} >CONTINUE</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n        case ( isActionable === false && step === 4 ):\r\n            if (referenced === true ) {}\r\n            if (incubated === true ) {;}\r\n            // Added to references\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>Item has been processed</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => {\r\n                        referenced === true ? viewNewReference(nextID) : viewNewEvent(nextID)\r\n                    }} >VIEW ITEM</button>\r\n                </div>\r\n            )\r\n        case ( isActionable === true && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the desired outcome?\" submitFunction={(answer) => { setOutcome(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the outcome be reached with just one task?' \r\n                    yes={() => { setIsMultistep(false); proceed(); } } \r\n                    no={() => { setIsMultistep(true); proceed();  makeNewMission(); }} />\r\n                </div>\r\n            )\r\n            \r\n        case ( isMultistep === false && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the task?\" \r\n                    submitFunction={(answer) => {\r\n                        makeNewTask(answer);\r\n                        proceed(); \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the first task?\" \r\n                    submitFunction={(answer) => { \r\n                        makeNewTask(answer); \r\n                        proceed(); \r\n                        }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { \r\n                        setIsDoneInaYear(true); \r\n                        newMission.taskList.unshift(newTask.id);\r\n                        pushChanges(ADD, newMission, \"Missions\", shipItems);\r\n                        amendList(ADD, MissionList, newMission, 0); proceed() \r\n                    }} \r\n                    no={() => { \r\n                        newMission.taskList.unshift(newTask.id); \r\n                        amendList(ADD, SomedayList, newMission, 0);\r\n                        setIsDoneInaYear(false); \r\n                        updateStatus(); \r\n                        proceed();\r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 5 ):\r\n            // console.log(\"step 5. new task: \", newTask);\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { setIsDoneInaYear(true); proceed() }} \r\n                    no={() => { amendList(ADD, SomedayList, newTask, 0); setIsDoneInaYear(false); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === true ):\r\n            // New mission was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW MISSION</button>\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === false ):\r\n            // New mission was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW MISSION</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === false ):\r\n            // New mission was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Task has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW MISSION</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === true ):\r\n            console.log(\"step 5. new task: \", newTask);\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can it be done now in 5 minutes or less?' \r\n                    yes={() => { setIsDoneInFive(true); pushChanges(ADD, newTask, \"Tasks\", shipItems); amendList(ADD, TaskList, newTask, 0); proceed() }} \r\n                    no={() => { setIsDoneInFive(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case (isDoneInFive === true && step === 7):\r\n            console.log(\"new tasklKST:\", TaskList)\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h2 className='fw8 b white pb2'>LET'S DO IT!</h2>\r\n                    <div className='w-100 pa2 pb3' >\r\n                        <h3 className='fw7 b white pb2'>{newTask.name}</h3>\r\n                    </div>\r\n                    <button className=\"button\" onClick={() => { updateStatus();  changeNav(nav) }} >GO TO TASK </button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button> */}\r\n                </div>\r\n            )\r\n        case ( isDoneInFive === false && step === 7 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can this task be delegated?' \r\n                    yes={() => { setIsDelegatable(true); proceed(); }} \r\n                    no={() => { setIsDelegatable(false); proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === true && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Who would you like to assign this task to?\" \r\n                    submitFunction={(answer) => { setAssignedAgent(answer); newTask.agent = assignedAgent; proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 8 ):\r\n            function saveTaskDate(date){\r\n                //updateDB( mission, \"dueDate\", date )\r\n                newTask.dueDate = date;\r\n            }\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h2 className='fw4 white'>By when should this task to be done</h2>\r\n                    <DatePicker item={newTask} dueDate={newTask.dueDate} updateFunc={saveTaskDate} />\r\n                    <div>\r\n                        {/* <button className=\"button\" onClick={() => { setDueDate(\"ASAP\"); console.log(newTask); proceed(); }}>ASAP</button> */}\r\n                        <button className=\"button\" onClick={() => { setDueDate(newTask.dueDate); console.log(newTask); proceed(); }} >CONTINUE</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 9 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Where should this task be done?\" \r\n                    submitFunction={(answer) => { \r\n                        setRequiredContext(answer); \r\n                        newTask.requiredContext = answer;\r\n                        pushChanges(ADD, newTask, \"Tasks\", shipItems)\r\n                        amendList(ADD, TaskList, newTask, 0);\r\n                        \r\n                        proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( step === 10 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show flex items-center flex-column' >\r\n                    <h3 className='white tc pb2'>A new Task has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={ processNextItem } >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Processor);","import React from 'react';\r\n\r\nexport default function PrevItemButton({ selectAnother, prevID, currentID }){\r\n\r\n    if(parseInt(currentID) !== prevID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(prevID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NextItemButton({ selectAnother, nextID, currentID }){\r\n    \r\n    if(parseInt(currentID) !== nextID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(nextID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Processor from '../containers/Processor'\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport NewItemButton from '../components/NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        db: state.items.record.items//state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nfunction ItemDetails({ id, touchFunction, selectAnother, prevID, nextID, db }) {\r\n\r\n\r\n    // NOTE: PREV AND NEXT BUTTONS INCLUDED HERE SO THEY ARE HIDDEN DURING PROCESSING\r\n    const InboxItems = db.Inbox\r\n\r\n    const [ readyToProcess, setReadyToProcess ] = useState(false);\r\n\r\n    let item = {};\r\n    let nextItemID = null;\r\n    let indx;\r\n    for (let i=0; i<InboxItems.length; i++){\r\n\r\n        if (InboxItems[i].id === id){\r\n           item = InboxItems[i];\r\n           indx = i;\r\n           if (InboxItems[i+1]) {\r\n               nextItemID = InboxItems[i+1].id;\r\n           } else {\r\n            nextItemID = 0;\r\n           }\r\n           break;\r\n        }    \r\n    }\r\n\r\n    console.log(item);\r\n\r\n    if (item.name) {\r\n        switch(readyToProcess){\r\n        case false:\r\n            return (\r\n                <div className='h-100' >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column ' >\r\n                        <button onClick={()=> setReadyToProcess(true)} >PROCESS THIS</button>\r\n                    </div>\r\n                    <NewItemButton />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prevID} currentID={id} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={nextID} currentID={id} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    <br />\r\n                    <Processor item={item} nextItemID={nextItemID} touchFunction={touchFunction} itemIndex={indx} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n\r\nfunction Timer({ timeSpent, task, activeTask, activeSince, timeNow }){\r\n\r\n\r\n    if (task.id === parseInt(activeTask.id) ){\r\n        const dateNow = (new Date()).getTime();\r\n        timeSpent = timeSpent + (dateNow - activeSince);\r\n    }\r\n    //console.log('time spent = '+timeSpent)\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n    \r\n\r\n    // let totalTimeSpent = (seconds*1000)+(minutes*60*1000)+(hours*3600*1000); //Time spent in milliseconds\r\n\r\n\r\n\r\n    // function reset() {\r\n    //     setSeconds(0);\r\n    //     setminutes(0);\r\n    //     sethours(0);\r\n    //     setIsActive(false);\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        setSeconds(secs);\r\n        setminutes(mins);\r\n        sethours(hrs);\r\n        if (task.id !== parseInt(activeTask.id) ){\r\n            setIsUpdated(false);\r\n            setIsActive(false)\r\n        }\r\n    },[ secs, mins, hrs, activeTask.timeSpent, activeTask.id, activeSince, task.id ])\r\n\r\n\r\n    if( (task.id === parseInt(activeTask.id)) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive && (task.id === parseInt(activeTask.id)) ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        \r\n        return () => clearInterval(interval);\r\n        \r\n    }, [ isActive, seconds, minutes, hours, isUpdated, activeTask.id, task.id ]);\r\n\r\n\r\n    switch(task.id){\r\n        case activeTask.id:\r\n            return (\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: \r\n                        <span className='fw3 yellow b'> {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} \r\n                        </span>\r\n                    </h5>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h5>\r\n                </div>\r\n                {/* <div className=\"\">\r\n                    <button className='' onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n                    <button className='' onClick={reset}>Reset</button>\r\n                </div> */}\r\n                </div>\r\n            );\r\n    }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, UpdateTaskStatus, ShipItems,ChangeNav } from '../actions';\r\nimport DatePicker from './DatePicker';\r\nimport Timer from './Timer';\r\nimport TaskControls from './TaskControls';\r\nimport { amendList  } from '../functions';\r\nimport { COMPLETED, DETAILS, DONE, MISSIONS, SOMEDAY, TASKS, UPDATE } from '../constants';\r\nimport Scroll from './Scroll';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);\r\n\r\n\r\nfunction TaskDetails({ id , title, updateExp, activeSince, activeTask, db, shipItems, changeNav, exp }) {\r\n\r\n    const MissionsList = db.Missions;\r\n    const tasks = db.Tasks;\r\n    let task = {};\r\n    let position, relevantList;\r\n\r\n    title === SOMEDAY ? relevantList = db.Tasks.concat(db.Missions) : relevantList = tasks;\r\n\r\n    for (let i=0; i<relevantList.length; i++){\r\n\r\n        if (relevantList[i].id === id){\r\n           task = relevantList[i];\r\n           position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n    let associatedMission = {};\r\n    if(task.associatedMissionID === 0){\r\n        associatedMission.name = \"Getting Things Done\";\r\n    } else if (task.associatedMissionID > 0){\r\n        for(let i=0; i<MissionsList.length; i++){\r\n            if(parseInt(task.associatedMissionID) === parseInt(MissionsList[i].id)){\r\n                associatedMission = MissionsList[i];\r\n                //console.log('associated project name: ', associatedMission.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const [ name, setName ] = useState(task.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(task.requiredContext);\r\n    const [ outcome, setoutcome ] = useState(task.outcome);\r\n    const [ dueDate, setdueDate ] = useState(task.dueDate);\r\n  //  const [ timeRequired, settimeRequired ] = useState(task.timeRequired);\r\n    const [ note, setnote ] = useState(task.note);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n\r\n    useEffect(() => {\r\n        setName(task.name);\r\n        setrequiredContext(task.requiredContext);\r\n        setoutcome(task.outcome);\r\n        setnote(task.note);\r\n        setdueDate(task.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [task.name, task.requiredContext, task.outcome, task.note, task.dueDate, task.timeSpent, activeSince, activeTask, task.id, db.lastUpdated ])\r\n\r\n\r\n    \r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, TASKS, task, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n    \r\n    }\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n\r\n    function saveDate(date){\r\n        updateDB( task, \"dueDate\", date )\r\n    }\r\n\r\n    switch (title){\r\n        case COMPLETED:\r\n            \r\n        default:\r\n            //console.log(\"From task details: \", task)\r\n            return (\r\n                <div className='h-100' >\r\n                    <Scroll>\r\n                        <div className='w-100 pb3' >\r\n                            {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                            <h4 className='fw1 white'>{task.requiredContext}</h4> */}\r\n        \r\n                            <textarea rows=\"2\" cols=\"30\" wrap='hard' \r\n                            onChange={(e)=> {setName(e.target.value);} } \r\n                            onBlur={() => { updateDB(task, \"name\", name ) } } \r\n                            value={name} className='bn fw9 b white bg-transparent pa1' />\r\n        \r\n                            <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(task, \"requiredContext\", requiredContext ) }} \r\n                                value={requiredContext} className='fw1 white bn bg-transparent' />\r\n                            \r\n                        </div>\r\n        \r\n                        <div className='w-100 pb3'>\r\n                            <h5 className='fw3 white'>Mission: </h5>\r\n                            <h4 className='fw5 white' onClick={() => {\r\n                                if(task.associatedMissionID != 0){changeNavigation(task.associatedMissionID, MISSIONS)}}} >{associatedMission.name}</h4>\r\n                        </div>\r\n        \r\n                        <div className='w-100 pb3'>\r\n                            <h5 className='fw3 white'>Outcome: </h5>\r\n                            {/* <h5 className='fw3 white'>{task.outcome} </h5> */}\r\n                            <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setoutcome(e.target.value);} } onBlur={() =>{ updateDB(task, \"outcome\", outcome ) }} value={outcome} className='w-80 fw3 white bn bg-transparent' />\r\n                        </div>\r\n                        <div className='w-100 pb3 flex justify-between'>\r\n                            <Timer timeSpent={task.timeSpent} task={task} />\r\n                            {/* <input type='date' defaultValue={dueDate} onChange={(e)=> {setdueDate(e.target.value);} } onBlur={() =>task.dueDate=dueDate} className='fw3 white bn bg-transparent' /> */}\r\n                        </div>\r\n                        <h5 className='fw3 white'>DUE:</h5>\r\n                        <DatePicker item={task} dueDate={dueDate} updateFunc={saveDate} />\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>                    \r\n                            {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                            <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                        </div>\r\n                        <div className='pb2'>\r\n                            <h5 className='bb b--white pb2 fw3 white b' >NOTE</h5>\r\n                            <div className='pa2'>\r\n                                {/* <p className='fw3 white'>{task.note}</p> */}\r\n                                <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setnote(e.target.value);} } onBlur={ () =>{ updateDB(task, \"note\", note )}} value={note} className='fw3 white bn bg-transparent' />\r\n                            </div>\r\n                        </div>\r\n                        <h5 className='fw3 white'>Status: {task.status}</h5>\r\n                    </Scroll>\r\n                        <TaskControls task={task} position={position} />\r\n                </div>\r\n            );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport List from './List';\r\nimport { ADD, ASAP, MISSION, MISSIONS, TASKS, UNPLANNED, PENDING } from '../constants';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, RestorePreviousState, ShipItems } from '../actions';\r\nimport { displayDays, amendList, pushChanges  } from '../functions';\r\nimport { UPDATE } from '../constants';\r\nimport DatePicker from './DatePicker';\r\nimport NewItemButton from './NewItemButton';\r\nimport Scroll from './Scroll';\r\nimport { Task } from '../classes';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nfunction MissionDetails({ mission, view, changeItemID, db, shipItems, exp }) {\r\n\r\n    const TaskList = db.Tasks.concat(db.Completed);\r\n    let tasks = [];\r\n\r\n    function passKey(e) {\r\n        //Takes the events target and checks for title attribute \r\n        //If no title attribute, check parent node for title attribute\r\n        //If not found, repeat step 2\r\n        let targ = e.target;\r\n        checkForID(targ);\r\n        function checkForID (t) {\r\n            if (t.id) {\r\n                changeItemID(t.id);\r\n            } else {\r\n                t = t.parentNode;\r\n                checkForID (t);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTasks(){\r\n        \r\n        //console.log(\"from get tasks \", mission)\r\n        if(mission.taskList !== []){\r\n            for(let i=0; i<mission.taskList.length; i++){\r\n                for(let j=0; j<TaskList.length; j++){\r\n                    if(mission.taskList[i] === TaskList[j].id ){\r\n                        tasks.push(TaskList[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //console.log(tasks);\r\n        return tasks.sort((a,b) => a.order - b.order);\r\n    }\r\n\r\n    const missionTasks = getTasks();\r\n\r\n    const [ name, setName ] = useState(mission.name);\r\n    const [ purpose, setPurpose ] = useState(mission.purpose);\r\n    const [ vision, setVision ] = useState(mission.vision);\r\n    const [ principles, setPrinciples ] = useState(mission.principles);\r\n    const [ toDo, setToDo ] = useState(mission.toDo);\r\n    const [ skillsRequired, setSkillsRequired ] = useState(mission.skillsRequired);\r\n    const [ infoRequired, setInfoRequired ] = useState(mission.infoRequired);\r\n    const [ abilityRequired, setAbilityRequired ] = useState(mission.abilityRequired);\r\n    const [ dueDate, setDueDate ] = useState(mission.dueDate);\r\n    \r\n    const [ backStory, setBackStory ] = useState(mission.backStory);\r\n    const [ outputRef, setOutputRef ] = useState(mission.outputRef);\r\n    const [ outputRecordUrl, setOutputRecordUrl ] = useState(mission.outputRecordUrl);\r\n\r\n    const [ timeRequired, setTimeRequired ] = useState(mission.timeRequired);\r\n    const [ timeSpent, setTimeSpent] = useState(db.timeSpent);\r\n    \r\n    \r\n    const [ requirements, setRequirements ] = useState(mission.requirements);\r\n    const [ priority, setPriority ] = useState(mission.priority);\r\n    const [ frequency, setFrequency ] = useState(mission.frequency);\r\n    const [ note, setDetails ] = useState(mission.note);    \r\n    \r\n    const [ openPlanner, setOpenPlanner ] = useState(false);\r\n    const [ lastUpdated, setLastUpdated ] = useState(db.lastUpdated);\r\n    const [ showTasks, setShowTasks ] = useState(false);\r\n\r\n    const [ status, setStatus ] = useState(mission.status);\r\n\r\n    const [ taskList, setTaskList ] = useState(mission.taskList);\r\n\r\n\r\n    //purpose, principles, description, components, skillsRequired, infoRequired, abilityRequired, timeRequired, tasks\r\n\r\n    useEffect(() => {\r\n        setName(mission.name);\r\n        setPurpose(mission.purpose);\r\n        setVision(mission.vision);\r\n        setPrinciples(mission.principles);\r\n        setToDo(mission.toDo);\r\n        setSkillsRequired(mission.skillsRequired);\r\n        setInfoRequired(mission.infoRequired);\r\n        setAbilityRequired(mission.abilityRequired);\r\n        setDueDate(mission.dueDate);\r\n        setBackStory(mission.backStory);\r\n        setOutputRef(mission.outputRef);\r\n        setOutputRecordUrl(mission.outputRecordUrl);\r\n\r\n        setTimeRequired(mission.timeRequired);\r\n        setLastUpdated(db.lastUpdated);\r\n        \r\n        setRequirements(mission.requirements);\r\n        setPriority(mission.priority);\r\n        setFrequency(mission.frequency);\r\n        setDetails(mission.note);    \r\n\r\n        setTimeSpent(mission.timeSpent);\r\n        //setShowTasks(false);\r\n        setTaskList(mission.taskList);\r\n        setStatus(mission.status)\r\n    }, [mission.name, mission.purpose, mission.vision, mission.principles, mission.timeRequired, \r\n        mission.toDo, mission.skillsRequired, mission.infoRequired, mission.abilityRequired,\r\n        mission.dueDate, mission.backStory, mission.outputRef, mission.outputRecordUrl, \r\n        mission.timeRequired, db.lastUpdated, mission.requirements, mission.priority,\r\n        mission.frequency, mission.note, mission.timeSpent, mission.taskList, mission.status])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, MISSIONS, mission, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    function saveDate(date){\r\n        updateDB( mission, \"dueDate\", date )\r\n    }\r\n\r\n    function createTasks(listOfTasks){\r\n        let taskNames = listOfTasks.split(\",\").map(t =>  t.trim());\r\n        console.log(\"task names\", taskNames);\r\n        \r\n        let currentTaskListNames = tasks.map( t => t.name);\r\n\r\n        console.log(\"Current Tasks\", currentTaskListNames)\r\n\r\n        let newTaskNames = taskNames.filter(t => currentTaskListNames.indexOf(t) === -1)\r\n        console.log(\"new Tasks\", newTaskNames);\r\n\r\n        if (newTaskNames.length > 0){\r\n            newTaskNames.forEach((element, i) => {\r\n                let nt = new Task(element.trim(), mission.name,\"\", mission.id, ASAP, i);\r\n                db.Tasks.unshift(nt)\r\n                pushChanges(ADD, nt, \"Tasks\", shipItems)\r\n                mission.taskList.unshift(nt.id);\r\n                mission.status = PENDING;\r\n                pushChanges(UPDATE, mission, \"Missions\", shipItems);\r\n                //updateDB( mission, \"taskList\", newTL )\r\n            });\r\n        }\r\n        console.log(\"All Tasks\", db.Tasks);\r\n        getTasks();\r\n    }\r\n\r\n    switch (true){\r\n        case mission.status === UNPLANNED && openPlanner === false:\r\n            return (\r\n                <div className='h-100'>\r\n                    <Scroll>\r\n                        <div className='h-20 w-100 pa2 pb2' >\r\n                            <input type='text' \r\n                            className='bn fw7 b white bg-transparent'\r\n                            value={name} \r\n                            onChange={(e)=> {setName(e.target.value);} } \r\n                            onBlur={() => {updateDB(mission, \"name\", name )} }  \r\n                            />\r\n                            <h4 className='fw1 white'>{displayDays(mission.dueDate)}</h4>\r\n                        </div>\r\n                        <div className='h-70'>\r\n                            <div className='w-100 pl2 pb2'>\r\n                                {/* <h5 className='fw3 white'>Due: {mission.dueDate} </h5> */}\r\n                                <DatePicker item={mission} dueDate={dueDate} updateFunc={saveDate} />\r\n                                {/* <h5 className='fw3 white'>Time Required: {mission.timeRequired}</h5> */}\r\n                            </div>\r\n                            <div className='w-100 pl2 pb2'>\r\n                                <h5 className='fw3 white'>Status: {status}</h5>\r\n                                {/* <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                            </div>\r\n                            <div className='w-100 pl2 pt3'>\r\n                                <h5 className='fw3 white'>Back Story: </h5>\r\n                                <textarea rows=\"2\" cols=\"30\" wrap='hard' \r\n                                className='w-80 fw3 white bn bg-transparent' \r\n                                value={backStory} \r\n                                onChange={(e)=> {setBackStory(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(mission, \"backStory\", backStory ) }} \r\n                                />\r\n                            </div>\r\n                \r\n                            <div className='w-100 flex items-center flex-column ' >\r\n                                <button onClick={() => setOpenPlanner(true)}>PLAN</button>\r\n                            </div>\r\n                \r\n                            <div className='flex justify-between items-center'>\r\n                                <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n                                <NewItemButton />\r\n                            </div> \r\n                            <div className='pa2'>\r\n                                <List content={missionTasks} filter={MISSION} touchFunction={passKey} />\r\n                            </div>\r\n                        </div>\r\n                    </Scroll>                    \r\n                </div>\r\n            );\r\n        case openPlanner === false && mission.status !== UNPLANNED: //False\r\n            return (\r\n                <div className='h-100'>\r\n                    <Scroll>\r\n                        <div className='w-100 h-20 pa2 pb3' >\r\n            \r\n                            <textarea rows=\"2\" cols=\"100\"\r\n                            className='bn fw7 b white bg-transparent'\r\n                            value={name} \r\n                            onChange={(e)=> {setName(e.target.value);} } \r\n                            onBlur={() => {updateDB(mission, \"name\", name )} }  \r\n                            />\r\n\r\n                            <h4 className='fw1 white'>DUE: {displayDays(mission.dueDate)}</h4>\r\n                        </div>\r\n                        <div className='h-70'>\r\n                            <div className='w-100 pt2 pl2 pb1'>\r\n                                <h5 className='fw3 white'>Back Story: </h5>\r\n                                <textarea rows=\"2\" cols=\"100\" \r\n                                className='w-80 fw3 white bn bg-transparent' \r\n                                value={backStory} \r\n                                onChange={(e)=> {setBackStory(e.target.value);} } \r\n                                onBlur={() =>{ updateDB(mission, \"backStory\", backStory ) }} \r\n                                />\r\n                            </div>\r\n                            <div className='w-100 pl2 pb2'>\r\n                                <h5 className='fw3 white'>Purpose: </h5>\r\n                                <textarea rows=\"2\" cols=\"30\" wrap='hard' \r\n                                className='bn fw3 b white bg-transparent' \r\n                                value={purpose} \r\n                                onChange={(e)=> {setPurpose(e.target.value);} } \r\n                                onBlur={() => {updateDB(mission, \"purpose\", purpose )} } \r\n                                />\r\n\r\n                            </div>\r\n                            <div className='w-100 pl2 pb2 flex justify-between'>\r\n                                {/* <h5 className='fw3 white'>Due: {mission.dueDate} </h5> */}\r\n                                <DatePicker item={mission} dueDate={dueDate} updateFunc={saveDate} />\r\n                                {/* <h5 className='fw3 white'>Time Required: {mission.timeRequired}</h5> */}\r\n                            </div>\r\n                            <div className='w-100pl2 pl2 pb3 flex justify-between'>\r\n                                <h5 className='fw3 white'>Status: {mission.status}</h5>\r\n                                {/* <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                            </div>\r\n\r\n                            <div className='w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                                <button onClick={() => setOpenPlanner(true)}>PLANS</button>\r\n                            </div>\r\n\r\n                            <div className='flex justify-between items-center'>\r\n                                <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n                                <NewItemButton />\r\n                            </div> \r\n                            <div className='pa2 h-30'>\r\n                                <List content={missionTasks} filter={MISSION} touchFunction={passKey} />\r\n                            </div>\r\n                        </div>\r\n                        \r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        case openPlanner: //True\r\n                if (showTasks){\r\n                    return (\r\n                    <div className='pa2 h-100'>\r\n                        <button onClick={()=> setShowTasks(false)}>CLOSE TASKS</button>\r\n                        <Scroll>\r\n                            <List content={missionTasks} filter={MISSION} touchFunction={passKey} />\r\n                        </Scroll>\r\n                    </div>)\r\n                } else {\r\n                    return (\r\n                        <div className=' h-100 '>\r\n                            <Scroll>\r\n                            <div className=' w-100 center br1 ba b--black-10 '>\r\n                                <h1 className='b white f3'>PLAN</h1>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>What's the desired Outcome?</h5>\r\n                                    <input type='text' \r\n                                        className='bn fw7 b pa1'\r\n                                        value={name} \r\n                                        onChange={(e)=> {setName(e.target.value);} } \r\n                                        onBlur={() => {updateDB(mission, \"name\", name )} }  \r\n                                    />\r\n                                </div>\r\n                                \r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>What's the Purpose?</h5>\r\n                                    <textarea rows=\"4\" cols=\"30\" wrap='hard'\r\n                                    className='pb2 w-80 fw3 bn pa2' \r\n                                    value={purpose} \r\n                                    onChange={(e)=> {setPurpose(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"purpose\", purpose ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Vision: Describe what you see:</h5>\r\n                                    <textarea rows=\"4\" cols=\"30\" wrap='hard'  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={vision} \r\n                                    onChange={(e)=> {setVision(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"vision\", vision ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Principles/Criteria/Specifications:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\"  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={principles} \r\n                                    onChange={(e)=> {setPrinciples(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"principles\", principles ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>To do / Next Actions (Brainstorming Output):</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\" \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={toDo} \r\n                                    onChange={(e)=> {setToDo(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"toDo\", toDo ) }} \r\n                                    />\r\n                                    <button onClick={()=> createTasks(toDo)}>CREATE TASKS</button>\r\n                                    <button onClick={()=> setShowTasks(true)}>SHOW TASKS</button>\r\n                                    <button onClick={()=>updateDB(mission, \"taskList\", [] ) }>Clear Task list</button>\r\n                                </div>\r\n                                <h5 className='fw3 white bb b--grey bw2 pb2'>OPTIONAL</h5>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Skills Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\"  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={skillsRequired} \r\n                                    onChange={(e)=> {setSkillsRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"skillsRequired\", skillsRequired ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Knowledge/Information Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\"  \r\n                                    className='w-80 fw3 bn pa2' \r\n                                    value={infoRequired} \r\n                                    onChange={(e)=> {setInfoRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"infoRequired\", infoRequired ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Ability Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\" \r\n                                    className='w-80 fw3 bn' \r\n                                    value={abilityRequired} \r\n                                    onChange={(e)=> {setAbilityRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"abilityRequired\", abilityRequired ) }} \r\n                                    />\r\n                                </div>\r\n                                <div className='pb4'>\r\n                                    <h5 className='fw3 white'>Time Required:</h5>\r\n                                    <textarea rows=\"4\" cols=\"150\" \r\n                                    className='w-80 fw3 bn'\r\n                                    value={timeRequired} \r\n                                    onChange={(e)=> {setTimeRequired(e.target.value);} } \r\n                                    onBlur={() =>{ updateDB(mission, \"timeRequired\", timeRequired ) }} \r\n                                    />\r\n                                </div>\r\n        \r\n                                <button onClick={()=> {\r\n                                    setStatus(PENDING); mission.status = PENDING; \r\n                                    pushChanges(UPDATE, mission, \"Missions\", shipItems) \r\n                                    }} >MARK AS PLANNED</button>\r\n        \r\n                                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                                    <button onClick={() => setOpenPlanner(false)}>CLOSE PLANNER</button>\r\n                                </div>\r\n                            </div>\r\n                        </Scroll>\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n            \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MissionDetails);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, RestorePreviousState, ChangeNav } from '../actions';\r\nimport { DETAILS, LIST, MISSION_TASKS, MISSIONS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        missionID: state.values.missionID,\r\n        previousTitle: state.values.previousTitle,\r\n        previousView: state.values.previousView,\r\n        previousItemID: state.values.previousItemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BackButton);\r\n\r\n\r\n\r\nfunction BackButton({ changeItemID, changeNav, missionID, title, previousTitle, previousView, previousItemID }) {\r\n\r\n    function goBack(){\r\n\r\n        let navID = 0;\r\n        let navView = LIST;\r\n\r\n        if(title === MISSION_TASKS) {\r\n            title = MISSIONS;\r\n            navID = missionID;\r\n            navView = DETAILS;\r\n        };\r\n\r\n        let nav = {\r\n            title: title,\r\n            view: navView,\r\n            ID: navID\r\n        }\r\n        //changeItemID(id);\r\n        changeNav(nav);\r\n        \r\n    }\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={goBack}>\r\n            <h1 className=' white b f8 fw9 ma0'>&lt;</h1>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, ShipItems } from '../actions';\r\nimport { REFERENCES, UPDATE } from '../constants';\r\nimport { amendList  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReferenceDetails);\r\n\r\n\r\nfunction ReferenceDetails({ id , changeItemID, updateExp, db, shipItems, reference, exp }) {\r\n\r\n    const ReferenceList = db.Reference;\r\n    // let reference = {};\r\n    //let position;\r\n\r\n    // for (let i=0; i<ReferenceList.length; i++){\r\n\r\n    //     if (ReferenceList[i].id === id){\r\n    //        reference = ReferenceList[i];\r\n    //        //position = i;\r\n    //        break;\r\n    //     }\r\n    // }\r\n\r\n    console.log(\"reference: \", reference)\r\n\r\n    const [ name, setName ] = useState(reference.name);\r\n    const [ details, setDetails ] = useState(reference.details);\r\n\r\n    useEffect(() => {\r\n        setName(reference.name);\r\n        setDetails(reference.details);\r\n        \r\n    }, [ reference.name, reference.details])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, REFERENCES, reference, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{reference.name}</h3> */}\r\n                    <input type='text' \r\n                    className='bn fw7 b white bg-transparent'\r\n                    value={name} \r\n                    onChange={(e)=> {setName(e.target.value);} } \r\n                    onBlur={() => {updateDB(reference, \"name\", name )} }  \r\n                    />\r\n                    <h5 className='fw3 white'>{reference.type}</h5>\r\n                </div>\r\n                <div className='pa2'>\r\n                    <textarea rows=\"4\" cols=\"45\" \r\n                    onChange={(e)=> {setDetails(e.target.value);} } \r\n                    onBlur={ () =>{ updateDB(reference, \"details\", details ) }} \r\n                    value={details} \r\n                    className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\nimport trashCan from '../assets/trash1600.png';\r\nimport { INBOX, MISSIONS, REMOVE, TASKS, REFERENCES, SOMEDAY, ADD, PROCESSED, COMPLETED, MISSION_TASKS, EVENTS, UPDATE, DONE, PAUSED, TASK, MISSION, EVENT } from '../constants';\r\nimport { pushChanges } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashButton);\r\n\r\n\r\nfunction TrashButton({ shipItems, changeNav, db, title, ID }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const MissionsList = db.Missions;\r\n    const TaskList = db.Tasks;\r\n    const References = db.References;\r\n    const Events = db.Events;\r\n    const SomedayList = db.Tasks.concat(db.Missions)\r\n    const ProcessedList = db.Inbox;\r\n    const Completed = db.Tasks.concat(db.Missions).filter( e => e.status === DONE)\r\n\r\n    \r\n\r\n    let currentList, indx, currentItem, list;\r\n\r\n    switch(title) {\r\n        case MISSIONS:\r\n            currentList = MissionsList;\r\n            list = \"Missions\";\r\n        break;\r\n        case TASKS:\r\n            currentList = TaskList;\r\n            list = \"Tasks\";\r\n        break;\r\n        case INBOX:\r\n            currentList = InboxItems;\r\n            list = \"Inbox\";\r\n        break;\r\n        case REFERENCES:\r\n            currentList = References;\r\n            list = \"References\";\r\n        break;\r\n        case EVENTS:\r\n            currentList = Events;\r\n            list = \"Events\";\r\n        break;\r\n        case SOMEDAY:\r\n            currentList = SomedayList;\r\n        break;\r\n        case PROCESSED:\r\n            currentList = TaskList;\r\n            list = \"Tasks\";\r\n        break;\r\n        case COMPLETED:\r\n            currentList = Completed;\r\n        break;\r\n        case MISSION_TASKS:\r\n            currentList = TaskList;\r\n            list = \"Tasks\";\r\n        break;\r\n        default:\r\n    }\r\n\r\n    for (let i=0; i<currentList.length; i++){\r\n\r\n        if (currentList[i].id === parseInt(ID)){\r\n            currentItem = currentList[i];\r\n            indx = i;\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    //Change Nav to List\r\n    const nav = {\r\n        title: title,\r\n        view: \"LIST\",\r\n        ID: 0\r\n    }\r\n\r\n    function trashItem() {\r\n        console.log('trash button clicked');\r\n        console.log(\"current trash item: \", currentItem)\r\n        if (currentItem.status === \"ACTIVE\"){currentItem.status = PAUSED }\r\n        switch (currentItem.type){\r\n            case TASK:\r\n                list = \"Tasks\";\r\n            break;\r\n            case MISSION:\r\n                list = \"Missions\";\r\n            break;\r\n            case EVENT:\r\n                list = \"Events\";\r\n            break;\r\n            default:\r\n        }\r\n        currentItem.isTrashed = true;\r\n        currentItem.trashedDate = new Date().toISOString().substr(0, 10);;\r\n\r\n        //amendList(REMOVE, currentList, currentItem, indx);\r\n        //Trash.unshift(currentItem);\r\n        pushChanges(UPDATE, currentItem, list, shipItems);\r\n        // amendList(ADD, Trash, currentItem, indx);\r\n        changeNav(nav);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img src={trashCan} alt='trash icon' className='h2' onClick={() => {trashItem()}} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { ASAP, DETAILS, MISSIONS } from '../constants';\r\nimport { calculateTime } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction CompletedItemDetails({ MissionsList, changeNav,  item }) {\r\n\r\n    //GET THE ASSOCIATED Mission NAME\r\n    console.log(\"reached completed stage\");\r\n    let associatedMission = {}\r\n    if(item.associatedMissionID === 0){\r\n        associatedMission.name = \"Getting Things Done\";\r\n    } else if (item.associatedMissionID > 0){\r\n        for(let i=0; i<MissionsList.length; i++){\r\n            if(parseInt(item.associatedMissionID) === parseInt(MissionsList[i].id)){\r\n                associatedMission = MissionsList[i];\r\n                console.log('associated Mission name: ', associatedMission.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeNavigation(id, title){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view: DETAILS,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n\r\n    console.log(\"completed\" ,item)\r\n    \r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                    <h4 className='fw1 white'>{item.requiredContext}</h4>\r\n                    \r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Mission: </h5>\r\n                    <h4 className='fw5 white' onClick={() => {\r\n                        if(item.associatedMissionID !== 0){changeNavigation(item.associatedMissionID, MISSIONS)}}}>{associatedMission.name}</h4>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Outcome: </h5>\r\n                    <h5 className='fw3 white'>{item.outcome} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    <h5 className='fw3 white'>Time Spent: {calculateTime(item.timeSpent)}</h5>\r\n                    <h5 className='fw3 white'>Due Date: {item.dueDate === ASAP ? ASAP : item.dueDate} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    <h5 className='fw3 white'>COMPLETED: {(item.doneDate)} </h5>\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>           \r\n                    {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                    <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                </div>\r\n                <h5 className='fw3 white'>Status: {item.status}</h5>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    <p className='fw3 white'>{item.note}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CompletedItemDetails);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { DETAILS, INBOX_ITEM, MISSION, REFERENCE, EVENT, REMOVE, TASK, ADD, INBOX, TASKS, MISSIONS, REFERENCES, EVENTS, UPDATE, LIST, TRASH } from '../constants';\r\nimport { calculateTime, pushChanges } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction TrashedItemDetails({ changeNav, item, db, shipItems }) {\r\n\r\n    function restore(){\r\n        let list, dbList, title;\r\n        switch(item.type){\r\n            case INBOX_ITEM:\r\n                list = db.Inbox;\r\n                dbList = \"Inbox\";\r\n                title = INBOX;\r\n            break;\r\n            case TASK:\r\n                list = db.Tasks;\r\n                dbList = \"Tasks\";\r\n                title = TASKS;\r\n            break;\r\n            case MISSION:\r\n                list = db.Missions;\r\n                dbList = \"Missions\";\r\n                title = MISSIONS;\r\n            break;\r\n            case REFERENCE:\r\n                list = db.References;\r\n                dbList = \"References\";\r\n                title = REFERENCES;\r\n            break;\r\n            case EVENT:\r\n                list = db.Events;\r\n                dbList = \"Events\";\r\n                title = EVENTS;\r\n            break;\r\n            default:\r\n        }\r\n        item.isTrashed = false;\r\n        item.trashedDate = 0;\r\n        // const itemIndex = db.Trash.indexOf(item.id);\r\n        // db.Trash.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Trash\", shipItems);\r\n        //list.unshift(item);\r\n        pushChanges(UPDATE, item, dbList, shipItems)\r\n        changeNavigation(item.id, title)\r\n    }\r\n\r\n    function deleteFromDB(){\r\n        console.log(\"Deleting item\")\r\n        let list, dbList, title;\r\n        switch(item.type){\r\n            case INBOX_ITEM:\r\n                list = db.Inbox;\r\n                dbList = \"Inbox\";\r\n                title = INBOX;\r\n            break;\r\n            case TASK:\r\n                list = db.Tasks;\r\n                dbList = \"Tasks\";\r\n                title = TASKS;\r\n            break;\r\n            case MISSION:\r\n                list = db.Missions;\r\n                dbList = \"Missions\";\r\n                title = MISSIONS;\r\n            break;\r\n            case REFERENCE:\r\n                list = db.References;\r\n                dbList = \"References\";\r\n                title = REFERENCES;\r\n            break;\r\n            case EVENT:\r\n                list = db.Events;\r\n                dbList = \"Events\";\r\n                title = EVENTS;\r\n            break;\r\n            default:\r\n        }\r\n        const itemIndex = list.map( e => e.id).indexOf(item.id);\r\n        console.log(\"Trash details item index: \", itemIndex)\r\n        list.splice(itemIndex,1);\r\n        console.log(\"List from trash : \", itemIndex)\r\n        // pushChanges(REMOVE, item, \"Trash\", shipItems);\r\n        //list.unshift(item);\r\n        pushChanges(REMOVE, item, dbList, shipItems)\r\n        changeNavigation(0, TRASH, LIST);\r\n\r\n    }\r\n\r\n\r\n    function changeNavigation(id, title, view){\r\n       \r\n        let nav = {\r\n            title: title,\r\n            view,\r\n            ID: id\r\n        }\r\n        changeNav(nav);        \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className='w-100 pa2 pb3' >\r\n                <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                <h4 className='fw1 white'>{item.type}</h4>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Trashed Date: {new Date((item.trashedDate)).toLocaleString()}</h5>\r\n            </div>\r\n            <div className='w-100 ba bw1 b--white tc pb2'>\r\n                <h5 className='fw3 white' onClick={restore}>RESTORE</h5>\r\n            </div>\r\n            <div className='w-100 ba bw1 b--white tc pb2'>\r\n                <h5 className='fw3 white' onClick={deleteFromDB}>DELETE</h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashedItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateExp, ChangeNav, ShipItems } from '../actions';\r\nimport { DAILY, EVENTS, MONTHLY, NONE, UPDATE, WEEKLY, YEARLY } from '../constants';\r\nimport { amendList } from '../functions';\r\nimport DatePicker from './DatePicker';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EventDetails);\r\n\r\n\r\nfunction EventDetails({ changeNav,  item, shipItems, db, exp }) {\r\n\r\n    const [ name, setName ] = useState(item.name);\r\n    const [ date, setDate ] = useState(item.date);\r\n    const [ time, setTime ] = useState(item.time);\r\n    const [ location, setLocation ] = useState(item.location);\r\n    const [ frequency, setFrequency ] = useState(item.frequency);\r\n    const [ note, setNote ] = useState(item.note);\r\n\r\n    useEffect(() => {\r\n        setName(item.name);\r\n        setDate(item.date);\r\n        setTime(item.time);\r\n        setLocation(item.location);\r\n        setFrequency(item.frequency);\r\n        setNote(item.note);\r\n        \r\n    }, [ item.name, item.date, item.time, item.location, item.frequency, item.note])\r\n\r\n    function updateDB( obj, property, newVal) {\r\n\r\n        if (obj[property] !== newVal){\r\n\r\n            console.log(`old value (${obj[property]}) !== new value (${newVal})`)\r\n\r\n            obj[property] = newVal;\r\n            amendList(db, EVENTS, item, UPDATE, shipItems, exp)\r\n          \r\n        }\r\n\r\n    }\r\n\r\n    function saveDate(date){\r\n        updateDB( item, \"date\", date )\r\n    }\r\n\r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                    <h4 className='fw1 white'>{task.location}</h4> */}\r\n\r\n                    <input type='text' onChange={(e)=> {setName(e.target.value);} } onBlur={() => { updateDB(item, \"name\", name ) } } \r\n                    value={name} className='bn fw9 b white bg-transparent' />\r\n\r\n                <div className='w-100 pb3 flex justify-between'>\r\n                    <DatePicker item={item} dueDate={date} updateFunc={saveDate} />\r\n                 </div>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <input type='text' onChange={(e)=> {setLocation(e.target.value);} } \r\n                        onBlur={() =>{ updateDB(item, \"location\", location ) }} \r\n                        value={location} className='fw1 white bn bg-transparent' />\r\n                    {/* <h5 className='fw3 white'>Mission: </h5>\r\n                    <h4 className='fw5 white' onClick={() => {\r\n                        if(task.associatedMissionID != 0){changeNavigation(task.associatedMissionID, MISSIONS)}}} >{associatedMission.name}</h4> */}\r\n                </div>\r\n                    <input className=' fw4 white bg-transparent pa2 mb1' id='time' type='time' value={time} onChange={(e) => {setTime(e.target.value); console.log(time)}} onBlur={() => { updateDB(item, \"time\", time ) } }/>\r\n                <div className='w-100 pl2 pb3'>\r\n                {/* <label className='fw4 white' htmlFor=\"frequency\" >Frequency:</label> */}\r\n                <select className=' fw4 white bg-transparent mb1' id=\"priority\" value={frequency} onChange={(e)=> setFrequency(e.target.value)} onBlur={() => { updateDB(item, \"frequency\", frequency ) } }>\r\n                    <option value={frequency} disabled>{frequency}</option>\r\n                    <option value={NONE}>ONE-TIME</option>\r\n                    <option value={DAILY}>DAILY</option>\r\n                    <option value={WEEKLY}>WEEKLY</option>\r\n                    <option value={MONTHLY}>MONTHLY</option>\r\n                    <option value={YEARLY}>YEARLY</option>\r\n                </select>\r\n                </div>\r\n                <div className='pa2'>\r\n                    {/* <p className='fw3 white'>{task.note}</p> */}\r\n                    <textarea rows=\"4\" cols=\"45\" onChange={(e)=> {setNote(e.target.value);} } onBlur={ () =>{ updateDB(item, \"note\", note )}} value={note} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{item.name}</h3> */}\r\n                    <input type='text' \r\n                    className='bn fw7 b white bg-transparent'\r\n                    value={name} \r\n                    onChange={(e)=> {setName(e.target.value);} } \r\n                    onBlur={() => {updateDB(item, \"name\", name )} }  \r\n                    />\r\n                    <h4 className='fw1 white'>{item.type}</h4>\r\n                </div>\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Date: </h5>\r\n                    <DatePicker item={item} dueDate={item.date} updateFunc={saveDate}/>\r\n                </div>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    <textarea rows=\"4\" cols=\"45\" \r\n                    onChange={(e)=> {setNote(e.target.value);} } \r\n                    onBlur={ () =>{ updateDB(item, \"note\", note )}} \r\n                    value={note} \r\n                    className='fw3 white bn bg-transparent' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { REFERENCE, COMPLETED, PROCESSED, INBOX, TRASH, REFERENCES, MISSIONS, TASKS, CALENDAR, SOMEDAY, WAITING_FOR, EVENTS, TODAY, ASAP, MISSION_TASKS, TASK, MISSION, EVENT } from '../constants';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport ItemDetails from '../components/ItemDetails';\r\nimport TaskDetails from '../components/TaskDetails';\r\nimport MissionDetails from '../components/MissionDetails';\r\nimport BackButton from '../components/BackButton';\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport ReferenceDetails from '../components/ReferenceDetails';\r\nimport { selectItem } from '../actions';\r\nimport TrashButton from '../components/TrashButton';\r\nimport CompletedItemDetails from '../components/CompletedItemDetails';\r\nimport TrashedItemDetails from '../components/TrashedItemDetails';\r\nimport EventDetails from '../components/EventDetails';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        missionID: state.values.missionID,\r\n        previousItemID: state.values.previousItemID,\r\n        previousTitle: state.values.previousTitle,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction Details( { content, db, itemID, touchFunction, updateExp, selectAnother, title, changeItemID, previousItemID, previousTitle, missionID  }){\r\n    \r\n    //SPECIAL CONDITION FOR MISSION'S LIST\r\n    if(title === MISSION_TASKS) {\r\n\r\n        content = getTasks(getMission(parseInt(missionID)), db.Tasks);\r\n\r\n        function getMission(projID){\r\n            console.log(\"proj id: \", projID)\r\n            let proj = {};\r\n            for (let x=0; x < db.Missions.length; x++){\r\n                if (db.Missions[x].id === projID){\r\n                    proj = db.Missions[x];\r\n                }\r\n            }\r\n            console.log(\"proj = \", proj)\r\n            return proj;\r\n            \r\n        }\r\n        function getTasks(mission, TaskList){\r\n            console.log(\"proj tasks: \", mission.taskList)\r\n            let tasks = [];\r\n            if(mission.taskList !== []){\r\n                for(let i=0; i<mission.taskList.length; i++){\r\n                    for(let j=0; j<TaskList.length; j++){\r\n                        if(mission.taskList[i] === TaskList[j].id ){\r\n                            tasks.push(TaskList[j]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            console.log(tasks);\r\n            return tasks;\r\n        }\r\n    }\r\n\r\n    //console.log(\"content list from details: \", content)\r\n\r\n    // FIND ITEM\r\n    let item = {};\r\n    let prev;\r\n    let next;\r\n    const id = parseInt(itemID);\r\n    for (let i=0; i<content.length; i++){\r\n        //console.log(\"entering loop. Iteration: \", i)\r\n        \r\n        if (parseInt(content[i].id) === id){\r\n            item = content[i];\r\n            //console.log(\"item from loop: \", item)\r\n\r\n            // ASSIGN THE PREV AND NEXT ITEM IDS\r\n            i === 0 ? prev = content[i].id : prev = content[i-1].id;\r\n            i === (content.length-1) ? next = content[i].id : next = content[i+1].id;\r\n        }\r\n\r\n    }\r\n\r\n    // CHOOSE DETAILS FORMAT FOR DIFFERENT LIST OR ITEM TYPES\r\n    switch(title) {\r\n        case MISSIONS:\r\n            return (\r\n                <div className='w-100 h-100 center br1 pa2 bw2 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>MISSION</h2>\r\n                    <div className='h-70'>\r\n                        <MissionDetails mission={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                    </div>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>TASK</h2>\r\n                    <div className='h-70'>\r\n                        <TaskDetails id={parseInt(itemID)} />\r\n                    </div>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case MISSION_TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>MISSION TASKS</h2>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Inbox Item</h2>\r\n                    <div className='h-60'>\r\n                        <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                    </div>\r\n                </div>        \r\n            )\r\n        case PROCESSED:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>PROCESSED</h2>\r\n                        <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                        <h5 className='white pb2'>Processed: {(new Date(item.processedDate)).toLocaleString()} </h5>\r\n                        {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>        \r\n            )\r\n        case REFERENCES:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>REFERENCE</h1>\r\n                    <ReferenceDetails id={parseInt(itemID)} reference={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case EVENTS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>EVENT</h1>\r\n                    <EventDetails id={parseInt(itemID)} item={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case SOMEDAY:\r\n            if (item.type === TASK){\r\n                console.log(\"someday item is a task\")\r\n                return (\r\n                    <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                        <div className='flex justify-between items-center'>\r\n                            <BackButton id={0} />\r\n                            <TrashButton />\r\n                        </div>\r\n                        <h2 className='tc b gold f3'>TASK</h2>\r\n                        <TaskDetails id={parseInt(itemID)} />\r\n                        <div className='flex justify-between self-end'>\r\n                            <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                            <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else if (item.type === MISSION) {\r\n                console.log(\"someday item is this mission = \", item)\r\n                return (\r\n                    <div className='w-100 h-100 center br1 pa2 ba b--black-10'>\r\n                        <div className='flex justify-between items-center'>\r\n                            <BackButton id={0} />\r\n                            <TrashButton />\r\n                        </div>\r\n                        <h2 className='tc b gold f3'>MISSION</h2>\r\n                        <MissionDetails mission={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                        <div className='flex justify-between self-end'>\r\n                            <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                            <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                        </div>\r\n                        \r\n                    </div>\r\n                )\r\n            }\r\n        case COMPLETED:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>COMPLETED</h2>\r\n                    <CompletedItemDetails item={item} MissionsList={db.missions}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        case TRASH:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between'>\r\n                        <BackButton id={0} />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>TRASHED</h2>\r\n                    <TrashedItemDetails item={item} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 pb2'>\r\n                    <BackButton />\r\n                    <h1 className='tc b white'>Error</h1>\r\n                    <p>Item Not Found</p>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask, selectItem, ChangeNav } from '../actions';\r\nimport { DETAILS, TASKS } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTaskTimer);\r\n\r\nfunction ActiveTaskTimer({changeItemID, activeSince, activeTask, changeNav}) {\r\n    \r\n    const dateNow = (new Date()).getTime();\r\n    const timeSpent = parseInt(activeTask.timeSpent) + (dateNow - parseInt(activeSince));\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    if( (parseInt(activeTask.id) !== undefined) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [ isActive, seconds, minutes, hours ]);\r\n\r\n    function goToTask(event){\r\n        event.stopPropagation();\r\n        // changeItemID(activeTask.id)\r\n        let nav = {\r\n            title: TASKS,\r\n            view: DETAILS,\r\n            ID: activeTask.id\r\n        }\r\n        changeNav(nav);     \r\n    }\r\n\r\n    switch(activeTask.id){\r\n        case undefined:\r\n            return (\r\n                <div></div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className=\"\" onClick={goToTask} >\r\n                    <div className=\" pt3 \">\r\n                        <h2 className=\"pa1 \">CURRENT TASK</h2>\r\n                        <h2 className=\"pa1 red \">{activeTask.name}</h2>\r\n                        <h2 className='pa1 fw3 b red'>{hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h2>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        isShipping: state.items.latestUpdate.isShipping\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SyncStatusDot);\r\n\r\n\r\nfunction SyncStatusDot({ shipItems, changeNav, db, title, ID, isShipping }) {\r\n\r\n    let color;\r\n    if (isShipping) {\r\n        color = 'red'\r\n    } else {\r\n        color = 'green'\r\n    }\r\n    const style ={\r\n        color: color\r\n    }\r\n  \r\n    return (\r\n        <div className='flex justify-end'>\r\n            <h2 className='fw8 pa0 ma0' style={style}>.</h2>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { OVERVIEW } from '../constants';\r\nimport ActiveTaskTimer from './ActiveTaskTimer';\r\nimport SyncStatusDot from './SyncStatusDot';\r\n//import React, { useState, useEffect } from 'react';\r\n\r\n// import { connect } from 'react-redux';\r\n// import { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         activeTask: state.SetActiveTaskReducer.activeTask,\r\n//         status: state.UpdateTaskStatusReducer.taskStatus,\r\n//         activeSince: state.SetActiveTaskReducer.activeSince,\r\n//         timeNow: state.SetActiveTaskReducer.timeNow\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateTaskStatus: (status) => {\r\n//             return dispatch(UpdateTaskStatus(status))\r\n//         },\r\n//         setActiveTask: (task) => {\r\n//             return dispatch(SetActiveTask(task))\r\n//         },\r\n//         changeItemID: (id) => {\r\n//             return dispatch(selectItem(id))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(StatsOverview);\r\n\r\nexport default function StatsOverview({ touchFunction, exp }) {\r\n\r\n    return (\r\n        <article className=\"h-100 w-100 center bg-white pa2 \" data-view={OVERVIEW} title = \"STATS\" onClick={touchFunction}>\r\n            <SyncStatusDot />\r\n            <div className=\"tc w-100 h-100\">\r\n                <h1 className=\"f2 mb0 \">Amen Christ</h1>\r\n                <h3 className=\"f6 pa1 gray \">Engineer</h3>\r\n                <h4 className=\"f6 gray \">Exp: {exp}</h4>\r\n                <ActiveTaskTimer />\r\n            </div>\r\n        </article>  \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { DONE, LIST, SOMEDAY } from '../constants';\r\n\r\nexport default function TaskOverview({ touchFunction, tasks }) {\r\n\r\n    let content = tasks.filter((t) => (t.isTrashed === false && t.status !== DONE) && t.dueDate !== SOMEDAY);\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" data-view={LIST} title=\"TASKS\" onClick={touchFunction}> \r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Tasks</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">({ content.length })</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\nimport { DONE, LIST, MISSIONS, SOMEDAY } from '../constants';\r\n\r\nexport default function MissionsOverview({ touchFunction, missions }) {\r\n\r\n    let content = missions.filter((m) => (m.isTrashed === false && m.status !== DONE) && m.dueDate !== SOMEDAY);\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title={MISSIONS} data-view={LIST} onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Missions</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">({ content.length })</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { LIST, PROCESSED } from '../constants';\r\n\r\nexport default function InboxOverview({ touchFunction , inbox }) {\r\n\r\n    let content = inbox.filter((i) => (i.isTrashed === false && i.status !== PROCESSED));\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white br1 ba b--black-10\" data-view={LIST} title=\"INBOX\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">{ content.length }</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">Inbox</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NEW, NEW_ITEM } from '../constants'\r\n\r\nexport default function NewItemTile({ touchFunction }) {\r\n    return (\r\n        <div className='bg-white h-100 center w-100 flex items-center justify-center' data-view={NEW} title={NEW_ITEM} onClick={touchFunction}>\r\n            <div className='tc '>\r\n                <h3 className='' >Add New Item</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ASAP, DONE, LIST, TASK, TODAY } from '../constants';\r\n\r\nexport default function TodaysMission({ touchFunction, db }) {\r\n\r\n    let content = db.Tasks.filter((entry) => ((entry.type === TASK) && (entry.dueDate !== ASAP) && ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ));\r\n\r\n    return (\r\n        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={TODAY} onClick={touchFunction}>\r\n            <h2 className='tc'>Today's<br />Mission<br />({content.length})</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StatsOverview from '../components/StatsOverview';\r\nimport TaskOverview from '../components/TasksOverview';\r\nimport MissionsOverview from '../components/MissionsOverview';\r\nimport InboxOverview from '../components/InboxOverview';\r\nimport { ChangeNav } from '../actions';\r\nimport {  CALENDAR, DAILY, DONE, LIST, REFERENCES, SOMEDAY, STATS, TASK } from '../constants';\r\nimport './Home.css';\r\nimport NewItemTile from '../components/NewItemTile';\r\nimport TodaysMission from '../components/TodaysMission';\r\nimport { setNavValues  } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    \r\n    const { changeItemID, exp, db, changeNav, state } = props;\r\n\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    let somedayContent = db.Tasks.concat(db.Missions).filter((t) => (t.isTrashed === false && t.status !== DONE) && t.dueDate === SOMEDAY);\r\n\r\n    let dailyEx = db.Tasks.filter((entry) => (entry.type === TASK && entry.frequency === DAILY ) && (entry.isTrashed === false));\r\n            \r\n    return (\r\n        <div className='h-100 pa1' >\r\n            <div className='pa1 ph1 h-40 ba' title={STATS}>\r\n                <StatsOverview touchFunction={handleEvent} exp={exp} />\r\n            </div>\r\n            <div className=\"flex justify-center h-20 \">\r\n                <div className='w-50 pa1'>\r\n                    <MissionsOverview touchFunction={handleEvent} missions={db.Missions} />\r\n                </div>\r\n                <div className='w-50 pa1'>\r\n                    <TaskOverview touchFunction={handleEvent} tasks={db.Tasks}/>\r\n                </div>\r\n            </div>\r\n            <div className='flex w-100 h-10 pa1'>\r\n                <NewItemTile touchFunction={handleEvent} />\r\n            </div>\r\n            <div className=\"flex justify-center h-30\">\r\n                <div className='w-50 h-100 pa1'>\r\n                    <div className=' w-100 h-50 pb1'>\r\n                        <TodaysMission touchFunction={handleEvent} gotoItem={changeItemID} db={db}/>\r\n                    </div>\r\n                    <div className=' w-100 h-50 pt1'>\r\n                        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={DAILY} onClick={handleEvent}>\r\n                            <h2 className='tc'>Daily<br />Exercises<br />({dailyEx.length})</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=' w-50 h-100'>\r\n                    <div className=' w-100 h-50'>\r\n                        <div className=' h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' data-view={LIST} title={SOMEDAY} onClick={handleEvent} >\r\n                                <h4 className='tc'>Someday ({somedayContent.length})</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' data-view={LIST} title={REFERENCES} onClick={handleEvent}>\r\n                                <h4 className='tc'>References</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='w-100 h-50 flex'>\r\n                        <div className='w-50 h-100 pa1' >\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' data-view={LIST} title={CALENDAR} onClick={handleEvent}>\r\n                                <h4 className='tc'>Calendar</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='w-50 h-100 pa1'>\r\n                            <InboxOverview touchFunction={handleEvent} inbox={db.Inbox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst StateContext = createContext();\r\n\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n\r\n  const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n\r\n//   const setMode = (e) => {\r\n//     setCurrentMode(e.target.value);\r\n//     localStorage.setItem('themeMode', e.target.value);\r\n//     setThemeSettings(false);\r\n//   };\r\n\r\n//   const setColor = (color) => {\r\n//     setCurrentColor(color);\r\n//     localStorage.setItem('colorMode', color);\r\n//     setThemeSettings(false);\r\n//   };\r\n\r\n  const contextStateVars = {\r\n    isLoggedIn,\r\n    setIsLoggedIn\r\n  }\r\n\r\n  return (\r\n    <StateContext.Provider value={contextStateVars}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => useContext(StateContext);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ChangeNav } from '../actions';\r\nimport { COMPLETED, PROCESSED, TRASH } from '../constants';\r\nimport { useStateContext } from '../Contexts/ContextProvider';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Stats( { changeNav}) {\r\n\r\n    const { setIsLoggedIn } = useStateContext();\r\n\r\n    function openList(title){\r\n        const nav = {\r\n            title: title,\r\n            view: \"LIST\",\r\n            ID: 0\r\n        }\r\n\r\n            changeNav(nav);\r\n    }\r\n\r\n    function logout(){\r\n        localStorage.setItem('LoggedIn', 'false');\r\n        setIsLoggedIn(false)\r\n    }\r\n    return (\r\n        <div className='h-75 w-90 center pa3 pa4-ns ba b--black-10'>\r\n            <div className=' w-90 center bg-white br1 pa3 pa4-ns ba b--black-10'>\r\n                <h1 className='tc'>STATS</h1>\r\n            </div>\r\n            <div className=' pt2 '>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(COMPLETED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Completed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(PROCESSED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Processed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(TRASH)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Trash</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {logout()}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Logout</h1>\r\n                </div>\r\n            </div>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stats);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, selectTitle,ChangeNav, CreateAlert, SetActiveTask } from '../actions';\r\nimport { MISSIONS, STATS, TASKS, INBOX, TASK, MISSION, DAILY, REFERENCES, TODAY, NEW, SOMEDAY, CALENDAR, DETAILS, PROCESSED, TRASH, COMPLETED, EVENTS, LIST, ACTIVE, DONE, ASAP, EVENT } from '../constants';\r\nimport List from '../components/List';\r\nimport './Home.css';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport NewItem from '../components/NewItem';\r\nimport Details from './Details';\r\nimport Home from './Home';\r\nimport Stats from './Stats';\r\nimport { setNavValues } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        recordState: state.items.record.isFetching,\r\n        db: state.items.record.items,\r\n        record: state.items.record,\r\n        state: state.values,\r\n        alerts: state.items.alerts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        changeNav: (navObj => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }),\r\n        createAlert: (msg) => {\r\n            return dispatch(CreateAlert(msg))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n    }\r\n}\r\n\r\nfunction Main(props) {\r\n\r\n    const { \r\n        state, title, view, itemID, changeItemID, previousView, \r\n        updateExp, exp, db, record, changeNav, createAlert, alerts, setActiveTask } = props;\r\n    \r\n    \r\n    //console.log(\"state from Main: \", state)\r\n    //console.log(state.items)\r\n    //console.log(alerts.length)\r\n    //console.log(\"alerting\")\r\n    if (alerts.length > 0 ){\r\n        //alert(alerts[0].message);\r\n        //alert(\"Something to Alert\")\r\n    }\r\n    let type;\r\n    switch(previousView) {\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case MISSIONS:\r\n            type = MISSION;\r\n        break;\r\n        case CALENDAR:\r\n            type = EVENT;\r\n        break;\r\n        default:\r\n    } \r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    console.log('Title: ', title)\r\n    console.log('Item ID: ', itemID)\r\n    console.log('View: ', view)\r\n\r\n    \r\n\r\n    if(record.isFetching){\r\n        return <div className=\"f5 fw4 white\">Loading...</div>;\r\n    } else {\r\n        console.log(db)\r\n        //STATS OVERVIEW TIMER TRIGGER ON REFRESH\r\n        let activeTasks = db.Tasks.filter((entry) => entry.status === ACTIVE);\r\n        //console.log(\"Active Task from Main: \", activeTasks);\r\n        if (activeTasks.length > 0){\r\n            setActiveTask(activeTasks[0])\r\n        }\r\n\r\n        //Distribute Content\r\n        let content, unsortedContent;\r\n        switch(title) {\r\n            case TASKS:\r\n                unsortedContent = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE && e.dueDate !== SOMEDAY);\r\n                content = unsortedContent.sort((a,b) => a.order - b.order)\r\n            break;\r\n            case MISSIONS:\r\n                content = db.Missions.filter( e => e.isTrashed === false && e.status !== DONE && e.dueDate !== SOMEDAY);\r\n            break;\r\n            case INBOX:\r\n                content = db.Inbox.filter((entry) => entry.isTrashed === false && entry.status !== PROCESSED );\r\n            break;\r\n            case CALENDAR:\r\n                content = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE && (e.dueDate !== ASAP && e.dueDate !== SOMEDAY)).concat(db.Events);\r\n            break;\r\n            case REFERENCES:\r\n                content = db.References.filter( e => e.isTrashed === false);\r\n            break;\r\n            case TODAY:\r\n                content = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE);\r\n            break;\r\n            case DAILY:\r\n                content = db.Tasks.filter( e => e.isTrashed === false && e.status !== DONE);\r\n            break;\r\n            case COMPLETED:\r\n                content = db.Tasks.concat(db.Missions).filter( e => e.isTrashed === false && e.status === DONE);\r\n            break;\r\n            case PROCESSED:\r\n                content = db.Inbox.filter( e => e.isTrashed === false && e.status === PROCESSED);\r\n            break;\r\n            case SOMEDAY:\r\n                content = db.Tasks.concat(db.Missions).filter( e => e.isTrashed === false && e.dueDate === SOMEDAY );\r\n            break;\r\n            case EVENTS:\r\n                content = db.Events.filter( e => e.isTrashed === false);\r\n            break;\r\n            case TRASH:\r\n                // content = db.Trash;\r\n                content = db.Inbox.concat(db.Tasks, db.Missions, db.Events, db.References)//.filter( e => e.isTrashed === true)\r\n            break;\r\n            default:\r\n                content = []\r\n        } \r\n\r\n        switch( true ) {\r\n            case (title === STATS):\r\n                return (\r\n                    <Stats />\r\n                )\r\n            case view === DETAILS && itemID !== 0:\r\n                return (\r\n                    <div className='h-100 pa2 '>\r\n                        <div className='h-10 ba b--black-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <Details content={content} db={db} selectAnother={changeItemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case view === LIST && parseInt(itemID) === 0:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className='h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <div className='h-100 w-100 center pa1'>\r\n                                <h1 className='tc b gold ma0 pb2'>{title}</h1>\r\n                                <div className=' h-80 '>\r\n                                    <List content={content} />\r\n                                </div>\r\n                                <div className='h-10 flex w-100 content-end pa2'>\r\n                                    <NewItemButton touchFunction={handleEvent} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>   \r\n                )\r\n            case view === NEW:\r\n                console.log(\"type: \", type)\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className=' h-10'>\r\n                            <h5 className='fw3 white'>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90'>\r\n                            <NewItem submitFunction={\"\"} view={type} updateExp={updateExp} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <Home db={db} />\r\n                );\r\n        }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React, {useState} from 'react';\r\nimport introQuote from '../assets/GAMER INTRO.png';\r\nimport { useStateContext } from '../Contexts/ContextProvider';\r\n\r\nconst SplashPage = () => {\r\n\r\n    const { setIsLoggedIn } = useStateContext();\r\n    const [ password, setPassword ] = useState('');\r\n    const [ incorrect, setIncorrect ] = useState(false);\r\n\r\n    //console.log(localStorage.getItem('LoggedIn'))\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        if (password === \"levelup\"){\r\n            localStorage.setItem('LoggedIn', 'true')\r\n            setIsLoggedIn(true)\r\n        } else {\r\n            setIncorrect(true)\r\n            setPassword('')\r\n        }\r\n        // const body = {\r\n        //     password: password\r\n        // }\r\n        // fetch('http://localhost:5000/login/', {\r\n        //     method: 'POST',\r\n        //     mode: 'cors',\r\n        //     credentials: 'include',\r\n        //     referrerPolicy: 'no-referrer',\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //     },\r\n        //     body: JSON.stringify(body)\r\n        // }).then(res => res.json())\r\n        // .then(data => console.log(data))\r\n        // console.log('password submitted')\r\n    }\r\n\r\n  return (\r\n    <div className='bg-black w-100 h-100 flex justify-center items-center'>\r\n        <div className='pa2'>\r\n            <h2 className='bold white tc pb2'>MISSION CONTROL</h2>\r\n            <img alt='Intro Quote' src={introQuote} width={250} />\r\n        <form onSubmit={e => handleSubmit(e)} className='pa2'>\r\n        <input type='password' className='pa2 w-100 tc' placeholder='Enter Password' \r\n        value={password} onChange={(e) => {setIncorrect(false); setPassword(e.target.value)}}  />\r\n        </form>\r\n        {incorrect ? <p className='red bold tc pa2'>DENIED</p> : <p className='pa2'>------------ </p> }\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SplashPage","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from './actions';\r\nimport NavBar from './containers/NavBar';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\nimport SplashPage from './components/SplashPage';\r\nimport { useStateContext } from './Contexts/ContextProvider';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        }\r\n    }\r\n}\r\n\r\nfunction App2({ onTouch }) {\r\n\r\n    const { isLoggedIn, setIsLoggedIn } = useStateContext();\r\n    useEffect(() => {\r\n        localStorage.getItem('LoggedIn') == 'true' ? setIsLoggedIn(true) : setIsLoggedIn(false)\r\n    })\r\n\r\n    // console.log(\"logged in status: \", localStorage.getItem('LoggedIn'))\r\n    // console.log(\"logged in state: \", isLoggedIn)\r\n    if(!isLoggedIn){\r\n        return(\r\n            <div className='app'>\r\n                <SplashPage />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='app'>\r\n                <div className='home-container'>\r\n                    <Main />\r\n                </div>\r\n                <NavBar touchFunction={onTouch} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(App2);\r\n\r\n\r\n//https://cdn.internetmultimediaonline.org/241F21/loveworldlive/ixilrao9.m3u8","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SELECT_VIEW, OVERVIEW, SELECT_ITEM, UPDATE_EXP, TASKS, INBOX, REFERENCES, TODAY,\r\n    RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, SET_ACTIVE_TASK, HOME, SELECT_TITLE, \r\n    MISSIONS, LIST, NEW_ITEM, NEW, CHANGE_NAV, MISSION_TASKS, EVENTS, ACTIVE\r\n} from \"./constants\"\r\n\r\nimport { SELECT_RECORD, INVALIDATE_RECORD, REQUEST_ITEMS, RECEIVE_ITEMS, PACK_ITEMS, DELIVER_ITEMS, CREATE_ALERT, CLOSE_ALERT } from './actions';\r\n\r\nconst initialState = {\r\n    title: HOME, \r\n    itemID: 0,\r\n    view: OVERVIEW,\r\n    missionID: 0,\r\n    previousTitle: HOME,\r\n    previousItemID: 0,\r\n    previousView: OVERVIEW,\r\n    previousState: {},\r\n    taskStatus: '',\r\n    agent: '',\r\n    record: {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        receivedAt: 0,\r\n        items: {}\r\n    },\r\n    latestUpdate: {\r\n        items: {},\r\n        isShipping: false,\r\n        deliveredAt: 0\r\n    },\r\n    exp: 0,\r\n    expTimestamp: 0,\r\n    db: { lastUpdated: 0},\r\n    alerts: []\r\n}\r\n\r\n// const selectTitleReducer = (state=initialState, action={}) => {\r\n//     switch(action.type){\r\n//         case SELECT_TITLE:\r\n//             let lists = [ MISSIONS, TASKS, INBOX, REFERENCES, DUE_TODAY]\r\n//             let view = OVERVIEW;\r\n//             if (lists.indexOf(action.payload) !== -1) {\r\n//                 view = LIST;\r\n//             }\r\n//             return Object.assign({}, state, {title: action.payload, view: view, previousTitle: state.title, previousState: state});\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\nconst values = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SELECT_TITLE:\r\n            let lists = [ MISSIONS, TASKS, INBOX, REFERENCES, EVENTS, TODAY ]\r\n            let view = OVERVIEW;\r\n            let ID = 0;\r\n            if (lists.indexOf(action.payload) !== -1) {\r\n                view = LIST;\r\n            } \r\n            if (((lists.indexOf(action.payload) !== -1) && state.view === NEW) || (action.payload === NEW_ITEM) ) {\r\n                view = \"NEW\"\r\n            }\r\n            return Object.assign({}, state, {title: action.payload, view: view, itemID:ID, previousTitle: state.title, previousState: state});\r\n        case CHANGE_NAV:\r\n            if(action.payload.title === MISSIONS){state.missionID = action.payload.ID}\r\n            return Object.assign({}, state, {title: action.payload.title, view: action.payload.view, itemID:action.payload.ID, previousTitle: state.title, previousItemID: state.itemID, previousView: state.view, missionID : state.missionID, previousState: state});\r\n        case SELECT_ITEM:\r\n            //action.payload.title === MISSIONS ? state.missionID = action.payload.ID : state.missionID = 0;\r\n            return Object.assign({}, state, {itemID: action.payload, previousItemID: state.itemID, previousState: state});\r\n        case SELECT_VIEW:\r\n            //action.payload.title === MISSIONS ? state.missionID = action.payload.ID : state.missionID = 0;\r\n            return Object.assign({}, state, {view: action.payload, previousView: state.view, previousState: state});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst RestorePreviousStateReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case RESTORE_PREVIOUS_STATE:\r\n            if(state.previousState === {}) {\r\n                break;\r\n            } else {\r\n                return Object.assign({}, state.previousState );\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateExpReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_EXP:\r\n            console.log(action);\r\n            console.log(state);\r\n            let newXP, newTimestamp;\r\n            if (parseInt(action.expTimeStamp) === parseInt(state.expTimestamp)) {\r\n                newXP = 0;\r\n                newTimestamp = parseInt(state.expTimestamp);\r\n            } else {\r\n                newXP = parseInt(action.payload);\r\n                newTimestamp = parseInt(action.expTimestamp);\r\n                //console.log(\"new xp = \", newXP)\r\n            }\r\n            return Object.assign({}, state, {exp: (state.exp + newXP), expTimestamp: newTimestamp});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateTaskStatusReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_TASK_STATUS:\r\n            return Object.assign({}, state, {taskStatus: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialActiveTask = {\r\n    activeTask: {},\r\n    activeSince: 0,\r\n    timeNow: (new Date()).getTime(),\r\n    timerOn: false\r\n}\r\n\r\nconst SetActiveTaskReducer = (state=initialActiveTask, action={}) => {\r\n    switch(action.type){\r\n        case SET_ACTIVE_TASK:\r\n            let lastActive;\r\n            //action.payload.timeSpent === 0 ? lastActive = (new Date()).getTime() : lastActive = action.payload.activeSince;\r\n\r\n            console.log(\"from AT Reducer: \", state)\r\n            let timerOn;\r\n            action.payload.status === ACTIVE && state.timerOn === false ? timerOn = true : timerOn = false\r\n            return Object.assign({}, state, {activeTask: action.payload, activeSince: action.payload.activeSince, timerOn });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n//let serverLink = \"http://localhost:5000\";// \"https://secret-citadel-16777.herokuapp.com/\"\r\n\r\n\r\n//////////////////////////////////////////////// 17.10.2020 async app upgrade\r\n\r\n/// State shape\r\n\r\n\r\nfunction SelectRecordReducer(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_RECORD:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction items(\r\n  state = initialState,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_RECORD:\r\n      return Object.assign({}, state, { records: {didInvalidate: true} })\r\n    case REQUEST_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: true,\r\n          didInvalidate: false\r\n        }\r\n      })\r\n    case RECEIVE_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: false,\r\n          didInvalidate: false,\r\n          receivedAt: action.receivedAt,\r\n          items: action.items\r\n        }\r\n      })\r\n    case PACK_ITEMS:\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: true,\r\n                deliveredAt: 0\r\n            },\r\n        })\r\n    case DELIVER_ITEMS:\r\n        console.log(\"Special Delivery: \", action.payload)\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: false,\r\n                deliveredAt: action.deliveredAt,\r\n                updateAcknowledged: false\r\n            },\r\n        })\r\n    case CREATE_ALERT:\r\n        let alertArray = state.alerts\r\n        alertArray.unshift(action.payload)\r\n\r\n        // payload: {\r\n        //     timeStamp: Date.now(),\r\n        //     message: msg,\r\n        //   }\r\n\r\n        return Object.assign({}, state, {\r\n            alerts: alertArray\r\n        })\r\n    case CLOSE_ALERT:\r\n        alertArray = state.alerts\r\n        //alertArray.indexOf(action.payload)\r\n        function notAlerted(element){\r\n            return element !== action.payload\r\n        }\r\n        \r\n        return Object.assign({}, state, {\r\n            alerts: alertArray.filter(notAlerted)\r\n        })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({r\n    values, UpdateExpReducer, RestorePreviousStateReducer, \r\n    UpdateTaskStatusReducer, SetActiveTaskReducer, \r\n    SelectRecordReducer, items\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './tachyonBoost.css';\r\nimport rootReducer from './reducers';\r\nimport { SelectRecord, FetchItems } from './actions';\r\nimport { ContextProvider } from './Contexts/ContextProvider';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\n// store\r\n//   .dispatch(fetchPostsIfNeeded('reactjs'))\r\n//   .then(() => console.log(store.getState()))\r\n\r\nstore.dispatch(SelectRecord('reactjs')) ;\r\nstore.dispatch(FetchItems('reactjs'));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n      <ContextProvider>\r\n        <App  />\r\n      </ContextProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}