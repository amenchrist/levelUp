{"version":3,"sources":["assets/trash1600.png","constants.js","actions.js","components/HomeButton.js","components/ProjectsButton.js","components/TasksButton.js","components/InboxButton.js","components/StatsButton.js","functions.js","containers/NavBar.js","components/ListItem.js","components/Scroll.js","components/List.js","components/NewItemButton.js","classes.js","components/NewTask.js","ProjectList.js","components/NewMission.js","components/NewItem.js","components/QuestionAndOptions.js","components/QuestionAndInput.js","ReferenceList.js","components/DatePicker.js","containers/Processor.js","components/PrevItemButton.js","components/NextItemButton.js","components/ItemDetails.js","components/Timer.js","components/TaskControls.js","components/TaskDetails.js","components/ProjectDetails.js","components/BackButton.js","components/ReferenceDetails.js","components/TrashButton.js","containers/Details.js","components/ActiveTaskTimer.js","components/StatsOverview.js","components/TasksOverview.js","components/ProjectsOverview.js","components/InboxOverview.js","components/NewItemTile.js","components/TodaysMission.js","containers/Home.js","containers/Stats.js","containers/Main.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","PROJECTS","TASKS","INBOX","ADD","ChangeNav","navObj","type","payload","selectTitle","title","selectItem","itemID","selectView","view","UpdateExp","exp","RestorePreviousState","previousState","UpdateTaskStatus","status","SetActiveTask","task","FetchItems","record","dispatch","RequestItems","fetch","serverLink","then","response","json","console","log","items","receivedAt","Date","now","ReceiveItems","ShipItems","agent","PackItems","method","mode","headers","body","JSON","stringify","deliveredAt","DeliverItems","catch","error","HomeButton","touchFunction","className","onClick","ProjectsButton","TasksButton","InboxButton","StatsButton","setNavValues","e","navChanger","state","navTitle","navID","navView","targ","target","checkForTitle","t","parentNode","checkForID","id","parseInt","indexOf","nav","ID","pushChanges","action","item","list","shippingFunction","pushDate","getTime","connect","values","changeNav","props","handleEvent","ListItem","name","dueDate","toISOString","substr","taskList","length","nextTitle","requiredContext","entryDate","Scroll","style","overflowY","overflowX","children","db","changeItemID","content","missionTasks","map","entry","i","key","dueToday","filter","todaysTasks","dailyEx","frequency","dailyTasks","filteredContent","ListItems","changeView","Task","outcome","associatedProjectID","d","this","priority","timeSpent","outcomeRecordID","note","timeRequired","timeRemaining","requirements","description","Project","purpose","outputRecordID","setInterval","timeNow","nextAction","principles","onTouch","shipItems","updateExp","TaskList","Tasks","today","useState","setName","setOutcome","setRequiredContext","setNote","setDueDate","setAgent","setPriority","setRequirements","onSubmit","event","unshift","projID","proj","Projects","addToProjectTasks","changeNavigation","preventDefault","placeholder","value","onChange","htmlFor","min","disabled","defaultValue","ProjectList","output","setPurpose","setFrequency","Mission","m","changeTitle","submitFunction","InboxItems","Inbox","Item","submitNewItem","displayTypeForm","QuestionAndOptions","question","yes","no","QuestionandInput","answer","setAnswer","ReferenceList","DatePicker","date","setdate","changeDate","setchangeDate","useEffect","onBlur","nextItemID","itemIndex","ProcessedItems","Processed","isActionable","setIsActionable","setTaskName","isMultistep","setIsMultistep","isDoneInFive","setIsDoneInFive","isDelegatable","setIsDelegatable","step","setStep","setNextID","isDoneInaYear","setIsDoneInaYear","newProject","setNewProject","newTask","setNewTask","assignedAgent","setAssignedAgent","processNextItem","makeNewTask","asProjID","theOutcome","updateStatus","ammendList","itemndx","dbList","splice","proceed","addToSomedayList","makeNewProject","PrevItemButton","selectAnother","prevID","currentID","NextItemButton","nextID","indx","readyToProcess","setReadyToProcess","activeTask","SetActiveTaskReducer","UpdateTaskStatusReducer","taskStatus","activeSince","updateTaskStatus","setActiveTask","dateNow","s","secs","mins","hrs","seconds","setSeconds","minutes","setminutes","hours","sethours","isActive","setIsActive","isUpdated","setIsUpdated","interval","clearInterval","toLocaleString","undefined","minimumIntegerDigits","UpdateExpReducer","position","prevTimeSpent","startTimer","markAsDone","Completed","previousView","tasks","associatedProject","setrequiredContext","setoutcome","setdueDate","setnote","lastUpdated","updateDB","change","rows","cols","TaskControls","RestorePreviousStateReducer","restorePreviousState","project","concat","projectTasks","j","push","getTasks","setDescription","setTimeRequired","previousItemID","selectViewReducer","selectItemReducer","reference","currentlist","currentItem","References","SomedayList","Someday","ProcessedList","Process","Trash","src","trashCan","alt","prev","next","BackButton","TrashButton","ProjectDetails","TaskDetails","ReferenceDetails","calculateTime","stopPropagation","StatsOverview","ActiveTaskTimer","TaskOverview","ProjectsOverview","projects","InboxOverview","inbox","NewItemTile","TodaysMission","gotoItem","openList","recordState","isFetching","lists","NewItem","Boolean","window","location","hostname","match","initialState","previousTitle","didInvalidate","latestUpdate","isShipping","initialActiveTask","rootReducer","combineReducers","Object","assign","SelectRecordReducer","records","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7659a0b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash1600.4a1c4989.png\";","// Actions\r\nexport const SELECT_VIEW = 'SELECT_VIEW';\r\nexport const SELECT_TITLE = 'SELECT_TITLE';\r\nexport const UPDATE_EXP = 'UPDATE_EXP';\r\nexport const SELECT_PROJECT = 'SELECT_PROJECT';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const RESTORE_PREVIOUS_STATE = 'RESTORE_PREVIOUS_STATE';\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS';\r\nexport const SET_ACTIVE_TASK = 'SET_ACTIVE_TASK';\r\nexport const RETRIEVE_DB = 'RETRIEVE_DB';\r\nexport const REFRESH_DB = 'REFRESH_DB';\r\nexport const CHANGE_NAV = 'CHANGE_NAV';\r\n\r\n//\r\nexport const HOME = 'HOME';\r\nexport const MISSIONS = 'MISSIONS';\r\nexport const PROJECTS = 'PROJECTS';\r\nexport const TODAY = 'TODAY';\r\nexport const STATS = 'STATS';\r\nexport const SKILLS = 'SKILLS';\r\nexport const TASKS = 'TASKS';\r\nexport const INBOX = 'INBOX';\r\nexport const PROJECT = 'PROJECT';\r\nexport const TASK = 'TASK';\r\nexport const INBOX_ITEM = 'INBOX_ITEM';\r\nexport const NEW_ITEM = 'NEW_ITEM';\r\nexport const REFERENCES = 'REFERENCES';\r\nexport const REFERENCE = 'REFERENCE';\r\nexport const MISSION = 'MISSION';\r\nexport const CALENDAR = 'CALENDAR';\r\nexport const REMINDERS = 'REMINDERS';\r\nexport const SOMEDAY = 'SOMEDAY';\r\nexport const TRASH = 'TRASH';\r\nexport const COMPLETED = 'COMPLETED';\r\n\r\n\r\n//VIEWS\r\nexport const OVERVIEW = 'OVERVIEW';\r\nexport const LIST = 'LIST';\r\nexport const DETAILS = 'DETAILS';\r\nexport const NEW = 'NEW';\r\n\r\n//TITLES\r\n// export const INBOX = 'INBOX';\r\n// export const TASKS = 'TASKS';\r\n\r\n//Actions to push\r\nexport const ADD = 'ADD';\r\nexport const REMOVE = 'REMOVE';\r\nexport const UPDATE = 'UPDATE';\r\n\r\n\r\n// Status constants\r\n//STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\nexport const UNPLANNED = 'UNPLANNED';\r\nexport const UNPROCESSED = 'UNPROCESSED';\r\nexport const PROCESSED = 'PROCESSED';\r\nexport const PENDING = 'PENDING';\r\nexport const DELEGATION_PENDING = 'DELEGATION_PENDING';\r\nexport const STARTED = 'STARTED';\r\nexport const DONE = 'DONE';\r\nexport const ONGOING = 'ONGOING';\r\nexport const COMPLETE = 'COMPLETE';\r\nexport const PAUSED = 'PAUSED';\r\nexport const ACTIVE = 'ACTIVE';\r\n//\r\n\r\nexport const LOW = 'LOW';\r\nexport const MEDIUM = 'MEDIUM';\r\nexport const HIGH = 'HIGH';\r\n\r\n\r\n\r\n//For frequency/recurring\r\nexport const NONE = 'NONE';\r\nexport const DAILY = 'DAILY';\r\nexport const WEEKLY = 'WEEKLY';\r\nexport const MONTHLY = 'MONTHLY';\r\nexport const FORTHNIGHTLY = 'FORTHNIGHTLY';\r\nexport const THREE_MONTHS = 'THREE_MONTHS';\r\nexport const SIX_MONTHS = 'SIX_MONTHS';\r\nexport const YEARLY = 'YEARLY';\r\n//","import { \r\n    SELECT_VIEW, SELECT_PROJECT, SELECT_TASK, SELECT_TITLE, SELECT_ITEM, \r\n    UPDATE_EXP, RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, \r\n    SET_ACTIVE_TASK, RETRIEVE_DB, REFRESH_DB, CHANGE_NAV\r\n  } from './constants';\r\n\r\nexport const ChangeNav = (navObj) => {\r\n  return {\r\n    type: CHANGE_NAV,\r\n    payload: navObj\r\n  }\r\n}\r\nexport const selectTitle = (title) => {\r\n  return {\r\n  type: SELECT_TITLE,\r\n  payload: title\r\n}};\r\n\r\nexport const selectItem = (itemID) => {\r\n  return {\r\n  type: SELECT_ITEM,\r\n  payload: itemID\r\n}};\r\n\r\nexport const selectView = (view) => {\r\n  return {\r\n  type: SELECT_VIEW,\r\n  payload: view\r\n}};\r\n\r\nexport const selectProject = (projectID) => {\r\n    return {\r\n    type: SELECT_PROJECT,\r\n    payload: projectID\r\n}};\r\n\r\nexport const selectTask = (taskID) => {\r\n    return {\r\n    type: SELECT_TASK,\r\n    payload: taskID\r\n}};\r\n\r\nexport const UpdateExp = (exp) => {\r\n    return {\r\n    type: UPDATE_EXP,\r\n    payload: exp\r\n}};\r\n\r\nexport const RestorePreviousState = (previousState) => {\r\n    return {\r\n    type: RESTORE_PREVIOUS_STATE,\r\n    payload: previousState\r\n}};\r\n\r\nexport const UpdateTaskStatus = (status) => {\r\n    return {\r\n    type: UPDATE_TASK_STATUS,\r\n    payload: status\r\n}};\r\n\r\nexport const SetActiveTask = (task) => {\r\n    return {\r\n    type: SET_ACTIVE_TASK,\r\n    payload: task\r\n}};\r\n\r\nexport const RetrieveDB = (database) => {\r\n    return {\r\n        type: RETRIEVE_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\nexport const RefreshDB = (database) => {\r\n    return {\r\n        type: REFRESH_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\n////////////////////\r\n\r\n// ASYNC REQUESTS\r\n\r\nexport const SELECT_RECORD = 'SELECT_RECORD';\r\n\r\nexport function SelectRecord(record) {\r\n  return {\r\n    type: SELECT_RECORD,\r\n    payload: record\r\n  }\r\n}\r\n\r\nexport const INVALIDATE_RECORD = 'INVALIDATE_RECORD';\r\n\r\nexport function InvalidateRecord(record) {\r\n  return {\r\n    type: INVALIDATE_RECORD,\r\n    record\r\n  }\r\n}\r\n\r\nexport const REQUEST_ITEMS = 'REQUEST_ITEMS';\r\n\r\nexport function RequestItems(record) {\r\n  return {\r\n    type: REQUEST_ITEMS,\r\n    record\r\n  }\r\n}\r\n\r\nexport const RECEIVE_ITEMS = 'RECEIVE_ITEMS';\r\n\r\nexport function ReceiveItems(record, json) {\r\n  return {\r\n    type: RECEIVE_ITEMS,\r\n    record,\r\n    items: json,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n\r\n//import fetch from 'cross-fetch'\r\n\r\n\r\n\r\nexport function FetchItems(record) {\r\n  return dispatch => {\r\n    dispatch(RequestItems(record))\r\n    return fetch(serverLink) //https://secret-citadel-16777.herokuapp.com/\r\n      .then(response => response.json())\r\n      .then(json => { console.log(json); dispatch(ReceiveItems(record, json))})\r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  // Note that the function also receives getState()\r\n  // which lets you choose what to dispatch next.\r\n\r\n  // This is useful for avoiding a network request if\r\n  // a cached value is already available.\r\n\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      // Dispatch a thunk from thunk!\r\n      return dispatch(FetchItems(subreddit))\r\n    } else {\r\n      // Let the calling code know there's nothing to wait for.\r\n      return Promise.resolve()\r\n    }\r\n  }\r\n}\r\n\r\n////////////////////////////////////\r\n\r\nexport const PACK_ITEMS = 'PACK_ITEMS';\r\n\r\nexport function PackItems(items) {\r\n  return {\r\n    type: PACK_ITEMS,\r\n    payload: items\r\n  }\r\n}\r\n\r\nexport const DELIVER_ITEMS = 'DELIVER_ITEMS';\r\n\r\nexport function DeliverItems(agent, json) { // record/agent/destination\r\n  return {\r\n    type: DELIVER_ITEMS,\r\n    agent,\r\n    payload: json,\r\n    deliveredAt: Date.now()\r\n  }\r\n}\r\n\r\n// const testItem = {\r\n//   content: \"this is a test item fom the front end\"\r\n// }\r\n\r\nconst agent1 = \"amen\"\r\n\r\n\r\nexport function ShipItems(items, agent, record) {\r\n  return dispatch => {\r\n    dispatch(PackItems(items))\r\n    console.log(\"packed items: \", items)\r\n    return fetch(`${serverLink}${agent1}`, { \r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(items)\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => dispatch(DeliverItems(agent, json)))\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n      })\r\n  }\r\n}\r\n\r\nconst serverLink = \"https://secret-citadel-16777.herokuapp.com/\";\r\n//const serverLink2 = \"http://localhost:5000/\";","import React from 'react';\r\n\r\nexport default function HomeButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"HOME\" onClick={touchFunction}>\r\n            <h3 className='tc'>H</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function ProjectsButton({touchFunction}) {\r\n    return (\r\n        <div className='w-20 center bg-white ba b--black-10 flex items-center justify-center' title=\"PROJECTS\" onClick={touchFunction}>\r\n            <h3 className='tc'>M</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function TasksButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"TASKS\" onClick={touchFunction}>\r\n            <h3 className='tc'>T</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function InboxButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"INBOX\" onClick={touchFunction}>\r\n            <h3 className='tc'>I</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function StatsButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"STATS\" onClick={touchFunction}>\r\n            <h3 className='tc'>S</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","/// For all the extra functions required in multiple places\r\n\r\nimport { CALENDAR, COMPLETED, DAILY, DETAILS, HOME, INBOX, PROJECTS, REFERENCES, REMINDERS, SOMEDAY, STATS, TASKS, TODAY, TRASH } from \"./constants\";\r\n\r\nexport function passTitle(e, ChangeTitleFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n}\r\n\r\n// function passKey(e, changeIDFunction) {\r\n//     //Takes the events target and checks for title attribute \r\n//     //If no title attribute, check parent node for title attribute\r\n//     //If not found, repeat step 2\r\n//     let targ = e.target;\r\n//     checkForID(targ);\r\n//     function checkForID (t) {\r\n//         if (t.id) {\r\n//             changeIDFunction(t.id);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForID (t);   \r\n//         }\r\n//     }\r\n// }\r\n\r\nexport function passTitleAndID(e, ChangeTitleFunction, changeIDFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            changeIDFunction(t.id);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n}\r\n\r\nexport function setNavValues(e, navChanger, state){\r\n    let targ = e.target;\r\n    let navTitle;\r\n    checkForTitle(targ);\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            navTitle = t.title;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    let navID;\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            navID = t.id;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n    \r\n    let navView;\r\n    navTitle === \"STATS\" ? navView = \"OVERVIEW\" : navView = \"LIST\";\r\n    navTitle === \"NEW_ITEM\" ? navView = \"NEW\" : navView = \"LIST\";\r\n\r\n   \r\n    !(parseInt(navID) >= 0) ? navID = 0 : console.log(\"\");\r\n\r\n    const titles = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY, DAILY, SOMEDAY, TRASH, CALENDAR, REMINDERS, STATS, HOME, COMPLETED ]\r\n    if (titles.indexOf(navTitle) === -1){\r\n        navTitle = state.title;\r\n    }\r\n    console.log(\"this is state: \", state)\r\n    console.log(\"this is navID: \", navID)\r\n    if (parseInt(state.itemID) === 0 && parseInt(navID) > 0 ) {\r\n        navView = DETAILS;\r\n    }\r\n\r\n    const nav = {\r\n        title: navTitle,\r\n        view: navView,\r\n        ID: navID\r\n    }\r\n    console.log(nav)\r\n    navChanger(nav);\r\n}\r\n\r\n\r\nexport function pushChanges(action, item, list, shippingFunction){\r\n    let state = {\r\n        action: action,\r\n        list: list,\r\n        item: item,\r\n        pushDate: (new Date()).getTime()\r\n    }\r\n    shippingFunction(state);\r\n}\r\n\r\n//time spent calc\r\n\r\nexport function calculateTime(timeSpent){\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let seconds = s % 60;\r\n    s = (s - seconds) / 60;\r\n    let minutes = s % 60;\r\n    let hours = (s - minutes) / 60;\r\n    return `${hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n    ${seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})}` \r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeButton from '../components/HomeButton';\r\nimport ProjectsButton from '../components/ProjectsButton';\r\nimport TasksButton from '../components/TasksButton';\r\nimport InboxButton from '../components/InboxButton';\r\nimport StatsButton from '../components/StatsButton';\r\nimport { ChangeNav } from '../actions';\r\nimport { setNavValues } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { changeNav, state } = props;\r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='navbar center flex'>\r\n            <HomeButton touchFunction={handleEvent} />\r\n            <InboxButton touchFunction={handleEvent} />\r\n            <TasksButton touchFunction={handleEvent} />\r\n            <ProjectsButton touchFunction={handleEvent} />\r\n            <StatsButton touchFunction={handleEvent} />\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { PROJECT, TASK, INBOX_ITEM, TASKS, DONE, COMPLETED } from '../constants';\r\n\r\n\r\nexport default function ListItem( { touchFunction, item }){\r\n\r\n    switch(item.type){\r\n        case PROJECT:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80 '>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        <p className='fw3 white'>Due: {(new Date(item.dueDate)).toISOString().substr(0, 10)}, Tasks: {item.taskList.length}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case TASK:\r\n            let nextTitle;\r\n            item.status === DONE ? nextTitle = COMPLETED : nextTitle = TASKS;\r\n            console.log(nextTitle);\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between items-center b--grey min-h-50' title={nextTitle} id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{item.requiredContext}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>{item.status}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX_ITEM:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{(new Date(item.entryDate)).toISOString().substr(0, 10)}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>PROCESS</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='bb' title='new item' onClick={touchFunction}>\r\n                    <h3>Enter New Item</h3>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='h-100' style={{overflowY: 'scroll', overflowX: 'hidden'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, ChangeNav } from '../actions';\r\nimport ListItem from './ListItem';\r\nimport Scroll from './Scroll';\r\nimport { TASK, TASKS, PROJECTS, PROJECT, INBOX_ITEM, TODAY, DAILY, DONE, REFERENCE, REFERENCES, COMPLETED } from '../constants';\r\nimport { setNavValues  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/////////////////////////////////////////////////\r\n\r\n\r\nfunction List({ content, changeItemID, title, state, changeNav }) {\r\n\r\n    // function passKey(e, changeIDFunction) {\r\n    //     //Takes the events target and checks for title attribute \r\n    //     //If no title attribute, check parent node for title attribute\r\n    //     //If not found, repeat step 2\r\n    //     let targ = e.target;\r\n    //     checkForID(targ);\r\n    //     function checkForID (t) {\r\n    //         if (t.id) {\r\n    //             changeIDFunction(t.id);\r\n    //         } else {\r\n    //             t = t.parentNode;\r\n    //             checkForID (t);   \r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    function handleEvent(e ) {\r\n        //passKey(e, changeItemID);\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n\r\n    // A Mission's Tasklist\r\n    const missionTasks = content.map((entry,i ) => {\r\n        return <ListItem item={content[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n    // Today's Mission\r\n    const dueToday = content.filter((entry) => ( \r\n        ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ) );\r\n    const todaysTasks = dueToday.map((entry,i ) => {\r\n        return <ListItem item={dueToday[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n    /////\r\n\r\n    // Daily exercises\r\n    const dailyEx = content.filter((entry) => (entry.frequency === DAILY ));\r\n    const dailyTasks = dailyEx.map((entry, i) => {\r\n        return <ListItem item={dailyEx[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n    ///////\r\n\r\n    // Project, Task, Inbox and Reference Lists \r\n    let type = '';\r\n    let status;\r\n    let filteredContent = []\r\n    switch(title){\r\n        case TASKS:\r\n            type = TASK;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n        break;\r\n        case PROJECTS:\r\n            type = PROJECT;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n            break;\r\n        case REFERENCES:\r\n            type = REFERENCE;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n        break;\r\n        case COMPLETED:\r\n            status = DONE;\r\n            filteredContent = content.filter((entry) => (entry.status === status));\r\n        break;\r\n        default:\r\n            type = INBOX_ITEM;\r\n            filteredContent = content.filter((entry) => (entry.type === type));\r\n    }\r\n\r\n    console.log(\"filtered COntent: \", filteredContent);\r\n    console.log(\"COntent: \", content);\r\n     \r\n\r\n    const ListItems = filteredContent.map((entry,i) => {\r\n        return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n\r\n    switch(title){\r\n        case TODAY:\r\n            return (\r\n                <Scroll>\r\n                    {todaysTasks}\r\n                </Scroll>\r\n            )\r\n        case DAILY:\r\n            return (\r\n                <Scroll>\r\n                    {dailyTasks}\r\n                </Scroll>\r\n            )\r\n        case PROJECTS:\r\n            return (\r\n                <Scroll>\r\n                    {missionTasks}\r\n                </Scroll>\r\n            )\r\n        default:\r\n            return (\r\n                <Scroll>\r\n                    {ListItems}\r\n                </Scroll>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from '../actions';\r\nimport { NEW } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeView: (view) => {\r\n            return dispatch(selectView(view))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItemButton({ changeView }) {\r\n\r\n    return (\r\n        <div className='whiteB w2 h2 flex items-center justify-center' onClick={ () => changeView(NEW)}>\r\n            <h1 className=' white b f8 fw9 ma0'>+</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItemButton);","import {TASK, PENDING, PROJECT, UNPLANNED } from './constants';\r\n\r\nexport class Task{\r\n    constructor(name,outcome, requiredContext, associatedProjectID, dueDate) {\r\n        const d = new Date();\r\n        this.type = TASK;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.priority = 'NONE';\r\n        this.frequency = 0;\r\n        this.timeSpent = 0;\r\n        this.outcomeRecordID = 0;\r\n        this.name = name;\r\n        this.outcome = outcome;\r\n        this.requiredContext = requiredContext;\r\n        this.note = '';\r\n        this.dueDate =dueDate//(new Date()).toISOString().substr(0, 10);\r\n        this.timeRequired = 0;\r\n        this.timeRemaining = 0;\r\n        this.requirements = '';\r\n        this.associatedProjectID = associatedProjectID;\r\n        this.exp = 10;\r\n        this.description = '';\r\n        this.agent = '';\r\n        \r\n    }\r\n}\r\n\r\nexport class Project{\r\n    constructor(outcome, purpose, description) {\r\n        const d = new Date();\r\n        this.type = PROJECT;        \r\n        this.id = d.getTime();\r\n        this.name = outcome;\r\n        this.description = '';\r\n        this.outputRecordID = null;\r\n        this.dueDate = (new Date(parseInt((d.getTime() + 7776000000)))).toISOString().substr(0, 10); // 3 months from the date the project is planned \r\n        this.timeRequired = 7776000000;\r\n        this.timeRemaining = setInterval(()=> {\r\n            let timeNow = (new Date()).getTime();\r\n            return (this.dueDate - timeNow)\r\n        }, 1);\r\n        this.status = UNPLANNED;\r\n        this.nextAction = {};\r\n        this.taskList = [];\r\n        this.principles = '';\r\n        this.requirements = '';\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, TASK, MEDIUM, HIGH, PROJECTS } from '../constants';\r\nimport { selectView, selectItem, ShipItems, ChangeNav } from '../actions';\r\nimport { Task, Project } from '../classes';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewTask({ changeItemID, updateExp, shipItems, itemID, db, changeNav, title }) {\r\n\r\n    const TaskList = db.Tasks;\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState((new Date()).toISOString().substr(0, 10));\r\n    const [ agent, setAgent ] = useState('');\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ associatedProjectID, setAssociatedProjectID ] = useState(itemID);\r\n\r\n    // class Task{\r\n    //     constructor() {\r\n    //         const d= new Date();\r\n\r\n    //         setFrequency(0);\r\n    //         setAssociatedProject({});\r\n\r\n    //         this.type = TASK;\r\n    //         this.id = d.getTime();\r\n    //         this.entryDate = d.getTime();\r\n    //         this.status = PENDING;\r\n    //         this.priority = priority;\r\n    //         this.frequency = frequency;\r\n    //         this.timeSpent = 0;\r\n    //         this.outcomeRecordID = 0;\r\n    //         this.name = name;\r\n    //         this.outcome = outcome;\r\n    //         this.requiredContext = requiredContext;\r\n    //         this.note = note;\r\n    //         this.dueDate = dueDate;\r\n    //         this.timeRequired = 0;\r\n    //         this.requirements = requirements;\r\n    //         this.associatedProject = associatedProject;\r\n    //         this.exp = 10;\r\n    //     }\r\n    // }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        let t = new Task(name, outcome, requiredContext, associatedProjectID, dueDate);\r\n        console.log(t);\r\n        updateExp(5);\r\n        TaskList.unshift(t);\r\n        pushChanges(\"ADD\", t, \"Tasks\");\r\n        if(title === PROJECTS){\r\n           addToProjectTasks(t, associatedProjectID);\r\n        }\r\n        //changeItemID(t.id);\r\n        changeNavigation(t.id)\r\n        event.preventDefault();\r\n    }\r\n\r\n    function changeNavigation(id){\r\n        let nav;\r\n        if(title === PROJECTS) {\r\n            nav = {\r\n                title: PROJECTS,\r\n                view: \"DETAILS\",\r\n                ID: itemID\r\n            }\r\n        } else {\r\n            nav = {\r\n                title: title,\r\n                view: \"DETAILS\",\r\n                ID: id\r\n            }\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    function addToProjectTasks(task, projID){\r\n        let id = parseInt(projID);\r\n        let content = db.Projects;\r\n        let proj;\r\n        for (let i=0; i<content.length; i++){\r\n            console.log(content[i].id)\r\n            if (content[i].id === id){\r\n                console.log(content[i].id)\r\n\r\n                proj = content[i];\r\n                proj.taskList.unshift(task.id);\r\n\r\n                pushChanges(\"UPDATE\", proj, \"Projects\");\r\n            }\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW TASK</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={TASK}>\r\n                <input type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea placeholder='Required Context' value={requiredContext} onChange={(e) => setRequiredContext(e.target.value)} />\r\n                <textarea placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label htmlFor=\"due date\" className=''>Due Date:</label>\r\n                <input id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                <input type='text' placeholder='Assigned Agent' value={agent} onChange={(e)=> setAgent(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask);","import { PROJECT, UNPLANNED } from \"./constants\";\r\n\r\nexport const ProjectList = [\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001530,\r\n        exp: 50,\r\n        name: \"Upload Church service\",\r\n        note: 'About Project 1',\r\n        outcome: \"Last week's church service available to watch on Barking Church's website\",\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds (Average Time it has historically taken for the whole project to be completed by you or someone else)\r\n        timeRemaining: 2629746,\r\n        status: UNPLANNED, //STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action',\r\n            output: 'recordable product of task completion' //information, document etc\r\n        },\r\n        taskList: [ 1589657001522, 1589657001523 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001531,\r\n        exp: 50,\r\n        name: 'Project 2',\r\n        note: 'About Project 2',\r\n        outcome: 'What done looks like for Project 2',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: UNPLANNED,\r\n        nextAction: {\r\n            id: 17,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001524 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001532,\r\n        exp: 50,\r\n        name: 'Project 3',\r\n        note: 'About Project 3',\r\n        outcome: 'What done looks like for Project 3',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001525 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001533,\r\n        exp: 50,\r\n        name: 'Project 4',\r\n        note: 'About Project 4',\r\n        outcome: 'What done looks like for Project 4',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001526 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001534,\r\n        exp: 50,\r\n        name: 'Project 5',\r\n        note: 'About Project 5',\r\n        outcome: 'What done looks like for Project 5',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: []\r\n    }\r\n]","import React, { useState } from 'react';\r\nimport { PENDING, LOW, MEDIUM, HIGH, MISSION, PROJECT } from '../constants';\r\nimport { ProjectList } from '../ProjectList';\r\nimport { selectView, selectItem } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewMission({ changeItemID, updateExp }) {\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ purpose, setPurpose ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    //const [ taskList, setTaskList ] = useState([]);\r\n\r\n\r\n    class Mission{\r\n        constructor() {\r\n            const d= new Date();\r\n\r\n            this.type = PROJECT;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.status = PENDING;\r\n            this.priority = priority;\r\n            this.frequency = frequency;\r\n            this.timeSpent = 0;\r\n            this.outcomeRecordID = 0;\r\n            this.name = name;\r\n            this.purpose = purpose;\r\n            this.outcome = outcome;\r\n            this.principles = '';\r\n            this.note = note;\r\n            this.dueDate = dueDate;\r\n            this.timeRequired = 0;\r\n            this.requirements = requirements;\r\n            this.taskList = [];\r\n            this.exp = 50;\r\n        }\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let m = new Mission();\r\n        console.log(m);\r\n        // console.log(m.id);\r\n        ProjectList.unshift(m);\r\n        updateExp(5);\r\n        changeItemID(m.id);\r\n        event.preventDefault();\r\n        setFrequency(0);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc b gold f3'>NEW MISSION</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={MISSION}>\r\n                <input type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea placeholder='What is the purpose of the mission?' value={purpose} onChange={(e) => setPurpose(e.target.value)} />\r\n                <textarea placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label htmlFor=\"due date\" className=''>Due Date:</label>\r\n                <input id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMission);","import React, { useState } from 'react';\r\nimport { INBOX_ITEM, TASK, INBOX, UNPROCESSED, MISSION, PROJECTS, TASKS } from '../constants';\r\n//import  InboxItems  from '../InboxItems'\r\nimport NewTask from './NewTask';\r\nimport NewMission from './NewMission';\r\nimport { selectItem, ShipItems, selectTitle } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);\r\n\r\n\r\nfunction NewItem({ submitFunction, title, updateExp, changeItemID, shipItems, db, changeTitle, itemID }) {\r\n\r\n    // const [ type, setType ] = useState(title);\r\n    const [ name, setName ] = useState('Enter item name');\r\n    \r\n    const InboxItems = db.Inbox;\r\n    //console.log(InboxItems);\r\n\r\n    function reset(){\r\n        //changeTitle(INBOX);\r\n        setName('Enter item name');\r\n        // setDescription('');\r\n    }\r\n\r\n    class Item{\r\n        constructor(name,description='None') {\r\n            const d= new Date();\r\n    \r\n            this.type = INBOX_ITEM;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.name = name;\r\n            this.description = '';\r\n            this.status = UNPROCESSED;\r\n    \r\n        }\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        if(name !== 'Enter item name' && name !== '' ){\r\n            //console.log('name is set')\r\n            let i = new Item(name);\r\n            console.log(i)\r\n            InboxItems.unshift(i);\r\n            pushChanges(\"ADD\", i, \"Inbox\");\r\n            console.log(\"new inbox: \", InboxItems)\r\n            updateExp(5);\r\n            changeItemID(i.id);\r\n            //submitFunction(event);\r\n            reset();\r\n            event.preventDefault();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n    \r\n    function displayTypeForm(){\r\n        switch(true) {\r\n            case title === TASKS:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === PROJECTS && itemID == 0:\r\n                return <NewMission updateExp={updateExp} />\r\n            case title === PROJECTS && itemID != 0:\r\n                return <NewTask updateExp={updateExp} />\r\n            default:\r\n                return (\r\n                    <div className='h-100 w-100 center ba b--black-10 '>\r\n                        <h1 className='tc gold b'>NEW ITEM</h1>\r\n                        <form onSubmit={submitNewItem} className='flex flex-column' title={INBOX}>\r\n                            <input type='text' onChange={(e)=> setName(e.target.value)} placeholder='Enter item name...' className='pa2 mb2' />\r\n                            {/* <textarea value={description} onChange={(e) => setDescription(e.target.value)} /> */}\r\n                            <input type='submit' value='submit' />\r\n                        </form>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='pa1 w-100'>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(INBOX)}>INBOX</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(TASKS)}>TASK</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(PROJECTS)}>MISSION</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>REF</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>FINANCE</button>\r\n            {displayTypeForm()}\r\n            {/* <label htmlFor=\"type\" className=''>Type:</label>\r\n            <select id=\"type\" value={type} onChange={(e)=> setType(e.target.value)}>\r\n                <option value=\"INBOX_ITEM\">INBOX</option>\r\n                <option value=\"TASK\">TASK</option>\r\n                <option value=\"MISSION\">MISSION</option>\r\n                <option value=\"REFERENCE\">REFERENCE</option>\r\n                <option value=\"EXPENSE\">EXPENSE</option>\r\n                <option value=\"INCOME\">INCOME</option>\r\n            </select> */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function QuestionAndOptions({ question, yes, no }) {\r\n    return (\r\n        <div className='h-100 w-100 br1 pa3 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <div>\r\n                <button className=\"button\" onClick={yes}>YES</button>\r\n                <button className=\"button\" onClick={no} >NO</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function QuestionandInput({ question, submitFunction }) {\r\n\r\n    const [ answer, setAnswer ] = useState('');\r\n\r\n    function submit(event) {\r\n\r\n        if(answer !==''){\r\n            submitFunction(answer);\r\n            setAnswer('');\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <form onSubmit={submit}>\r\n                <input type='text' value={answer} onChange={(e)=> setAnswer(e.target.value)} />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}","export const ReferenceList = []","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function DatePicker({ item, dueDate }){\r\n    \r\n    const [ date, setdate ] = useState((new Date(dueDate)).toISOString().substr(0, 10));\r\n    const [ changeDate, setchangeDate ] = useState(false);\r\n    const changeD = false;\r\n\r\n\r\n    useEffect(() => {\r\n        setdate((new Date(dueDate)).toISOString().substr(0, 10));\r\n        setchangeDate(false);\r\n    }, [dueDate, changeD])\r\n\r\n    switch(changeDate){\r\n        case true:\r\n            return (\r\n                <div>\r\n                    <input type='date' defaultValue={date} onChange={(e)=> {setdate(e.target.value);} } onBlur={() =>{item.dueDate=date; setchangeDate(false)}} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n                )\r\n        default:\r\n            if (dueDate === \"ASAP\"){\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw3 white' onClick={() => setchangeDate(true)}>Due: {dueDate} </h5>\r\n                        <div>\r\n                            <button className=\"button\" onClick={() => { setdate(\"ASAP\"); }}>DUE ASAP</button>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n            }\r\n            return (\r\n            <h5 className='fw3 white' onClick={() => setchangeDate(true)}>Due: {new Date(item.dueDate).toISOString().substr(0, 10)} </h5>\r\n            )\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport QuestionAndOptions from '../components/QuestionAndOptions';\r\nimport QuestionandInput from '../components/QuestionAndInput';\r\nimport { Task, Project } from '../classes';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport {  PROCESSED, TASK, PENDING, UNPROCESSED, REFERENCE, ADD, UPDATE, REMOVE, REFERENCES, SOMEDAY, PROJECTS, TASKS } from '../constants';\r\nimport { selectView, selectItem, ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems } from '../actions';\r\nimport DatePicker from '../components/DatePicker';\r\nimport { pushChanges  } from '../functions';\r\n\r\n\r\n//shipItems(items, agent, record)\r\n//\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Processor({ nextItemID, item, touchFunction, changeItemID, itemIndex, db, shipItems, changeNav }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n    const ProcessedItems = db.Processed;\r\n\r\n    \r\n\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ isActionable, setIsActionable ] = useState(null);\r\n    const [ taskName, setTaskName ] = useState('');\r\n    const [ isMultistep, setIsMultistep ] = useState(null);\r\n    const [ isDoneInFive, setIsDoneInFive ] = useState(null);\r\n    const [ isDelegatable, setIsDelegatable ] = useState(null);\r\n    const [ step, setStep ] = useState(0);\r\n    const [ nextID, setNextID ] = useState(0);\r\n    const [ isDoneInaYear, setIsDoneInaYear ] = useState(null);\r\n    //const [ newProjectID, setNewProjectID ] = useState(0);\r\n    const [ newTaskID, setNewTaskID ] = useState(0);\r\n    const [ newProject, setNewProject ] = useState(null);\r\n    const [ newTask, setNewTask ] = useState(null);\r\n    const [ assignedAgent, setAssignedAgent ] = useState(null);\r\n    const [ dueDate, setDueDate ] = useState(null);\r\n\r\n    // function pushChanges(action, item, list){\r\n    //     let state = {\r\n    //         action: action,\r\n    //         list: list,\r\n    //         item: item,\r\n    //         pushDate: (new Date()).getTime()\r\n    //     }\r\n    //     shipItems(state);\r\n    // }\r\n\r\n    function processNextItem(e){\r\n        setStep(0);\r\n        //touchFunction(e);\r\n    }\r\n\r\n    function makeNewProject(){\r\n        let proj = new Project( outcome );\r\n        setNewProject(proj);\r\n        //ProjectList.unshift(proj);\r\n        // pushChanges(ADD, proj, \"Projects\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(proj.id);\r\n    }\r\n\r\n    function makeNewTask(name){\r\n        let asProjID;\r\n        let theOutcome = outcome;\r\n        if (isMultistep === true) {\r\n            theOutcome = '';\r\n            asProjID = newProject.id;\r\n        }\r\n        let task = new Task(name, theOutcome, isDelegatable, requiredContext, asProjID);\r\n        setNewTask(task);\r\n        //TaskList.unshift(task);\r\n        console.log(\"new task = \",task);\r\n        //pushChanges(ADD, task, \"Tasks\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        //pushChanges(REMOVE, item, \"Inbox\");\r\n        //setNewTaskID(task.id);  \r\n        setNextID(task.id);  \r\n    }\r\n\r\n    function ammendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case ProjectList:\r\n                dbList = \"Projects\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case REFERENCES:\r\n                dbList = \"References\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            case SOMEDAY:\r\n                dbList = \"Someday\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                list.splice(itemndx, 1);\r\n                pushChanges(REMOVE, item, dbList, shipItems);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                pushChanges(ADD, item, dbList, shipItems);\r\n            break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    function updateStatus() {\r\n        item.status = PROCESSED;\r\n        ProcessedItems.unshift(item);\r\n        InboxItems.splice(itemIndex,1);\r\n        pushChanges(UPDATE, item, \"Inbox\", shipItems);\r\n        pushChanges(ADD, item, \"Processed\", shipItems);\r\n        pushChanges(REMOVE, item, \"Inbox\", shipItems);\r\n    }\r\n\r\n    function proceed() {\r\n        setStep((step+1));\r\n    }\r\n\r\n    function refresh(){\r\n        changeItemID(item.id);\r\n    }\r\n    \r\n    if (item.status === UNPROCESSED && step === 0){\r\n        proceed();\r\n    }\r\n\r\n    function addToReferences(){\r\n        item.type = REFERENCE;\r\n        updateStatus();\r\n        InboxItems.splice(itemIndex,1);\r\n        ReferenceList.unshift(item);\r\n        pushChanges(ADD, item, \"References\", shipItems);\r\n    }\r\n\r\n    function addToSomedayList(){\r\n        InboxItems.splice(itemIndex,1);\r\n        ReferenceList.unshift(item);\r\n        pushChanges(ADD, item, \"References\", shipItems);\r\n    }\r\n\r\n    // if ( step === 10 ){\r\n    //     ammendList(ADD, TaskList, newTask, itemIndex);\r\n    //     ammendList(REMOVE,InboxItems, item, itemIndex);\r\n    // }\r\n\r\n    let nav;\r\n    if (isMultistep){\r\n        nav = {\r\n            title: PROJECTS,\r\n            view: \"DETAILS\",\r\n            ID: newProject.id\r\n        }\r\n    } else if(isMultistep === false && step >4){\r\n        nav = {\r\n            title: TASKS,\r\n            view: \"DETAILS\",\r\n            ID: newTask.id\r\n        }\r\n    }\r\n\r\n    switch(true) {\r\n        case ( step === 1 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Is this Actionable?' \r\n                    yes={() => { setIsActionable(true); proceed() }} \r\n                    no={() => { setIsActionable(false); addToReferences(); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 2 ):\r\n        // Added to references\r\n        return (\r\n            <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                <h3 className='white tc pb2'>Item was added to References</h3>\r\n                <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                <button className=\"button\" id={nextItemID} onClick={() => changeItemID(item.id)} >VIEW ITEM</button>\r\n            </div>\r\n        )\r\n        case ( isActionable === true && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the desired outcome?\" submitFunction={(answer) => { setOutcome(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the outcome be reached with just one task?' \r\n                    yes={() => { setIsMultistep(false); proceed(); } } \r\n                    no={() => { setIsMultistep(true); proceed();  makeNewProject(); }} />\r\n                </div>\r\n            )\r\n            \r\n        case ( isMultistep === false && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the task?\" \r\n                    submitFunction={(answer) => {\r\n                        setTaskName(answer);\r\n                        makeNewTask(answer);\r\n                        proceed(); \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the first task?\" \r\n                    submitFunction={(answer) => { \r\n                        setTaskName(answer);\r\n                        makeNewTask(answer); \r\n                        proceed(); \r\n                        }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { \r\n                        setIsDoneInaYear(true); \r\n                        TaskList.unshift(newTask);\r\n                        newProject.taskList.unshift(newTask.id); \r\n                        ammendList(ADD, ProjectList, newProject, 0); proceed() \r\n                    }} \r\n                    no={() => { \r\n                        setIsDoneInaYear(false); \r\n                        newProject.taskList.unshift(newTask.id); \r\n                        TaskList.unshift(newTask);\r\n                        addToSomedayList(newProject);\r\n                        updateStatus(); \r\n                        proceed() \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { setIsDoneInaYear(true); proceed() }} \r\n                    no={() => { setIsDoneInaYear(false); addToSomedayList(newTask); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === true ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW MISSION</button>\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === false ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === false ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Task has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === true ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can it be done now in 5 minutes or less?' \r\n                    yes={() => { setIsDoneInFive(true); proceed() }} \r\n                    no={() => { setIsDoneInFive(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case (isDoneInFive === true && step === 7):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h3>LET'S DO IT!</h3>\r\n                    <h2>TIMER</h2>\r\n                    <p>Once timer is done, you get the option to mark as completed. You also get the option ot defer the action.</p>\r\n                    <button className=\"button\" onClick={() => { updateStatus(); setStep(0); refresh() }} >DONE</button>\r\n                </div>\r\n            )\r\n        case ( isDoneInFive === false && step === 7 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can this task be delegated?' \r\n                    yes={() => { setIsDelegatable(true); proceed(); }} \r\n                    no={() => { setIsDelegatable(false); proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === true && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Who would you like to assign this task to?\" \r\n                    submitFunction={(answer) => { setAssignedAgent(answer); newTask.agent = assignedAgent; proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Where should this task be done?\" \r\n                    submitFunction={(answer) => { \r\n                        setRequiredContext(answer); \r\n                        newTask.requiredContext = answer;\r\n                        ammendList(ADD, TaskList, newTask, 0)\r\n                        proceed(); }} />\r\n                </div>\r\n            )\r\n        // case ( isDelegatable === false && step === 9 ):\r\n        //     return (\r\n        //         <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n        //             <h2>By when should this task to be done</h2>\r\n        //             <DatePicker item={newTask} dueDate={newTask.dueDate} />\r\n        //             <div>\r\n        //                 <button className=\"button\" onClick={() => { setDueDate(\"ASAP\"); console.log(newTask); proceed(); }}>ASAP</button>\r\n        //                 <button className=\"button\" onClick={() => { setDueDate(newTask.dueDate); console.log(newTask); proceed(); }} >SAVE DATE</button>\r\n        //             </div>\r\n        //         </div>\r\n        //     )\r\n        case ( step === 9 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show flex items-center flex-column' >\r\n                    <h3 className='white tc pb2'>A new Task has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={ processNextItem } >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Processor);","import React from 'react';\r\n\r\nexport default function PrevItemButton({ selectAnother, prevID, currentID }){\r\n\r\n    if(currentID !== prevID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(prevID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NextItemButton({ selectAnother, nextID, currentID }){\r\n    if(currentID !== nextID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(nextID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Processor from '../containers/Processor'\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport NewItemButton from '../components/NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        db: state.items.record.items//state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nfunction ItemDetails({ id, touchFunction, selectAnother, prevID, nextID, db }) {\r\n\r\n\r\n    const InboxItems = db.Inbox\r\n\r\n    const [ readyToProcess, setReadyToProcess ] = useState(false);\r\n\r\n    let item = {};\r\n    let nextItemID = null;\r\n    let indx;\r\n    for (let i=0; i<InboxItems.length; i++){\r\n\r\n        if (InboxItems[i].id === id){\r\n           item = InboxItems[i];\r\n           indx = i;\r\n           if (InboxItems[i+1]) {\r\n               nextItemID = InboxItems[i+1].id;\r\n           } else {\r\n            nextItemID = 0;\r\n           }\r\n           break;\r\n        }    \r\n    }\r\n\r\n    console.log(item);\r\n\r\n    if (item.name) {\r\n        switch(readyToProcess){\r\n        case false:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                        <button onClick={()=> setReadyToProcess(true)} >PROCESS THIS</button>\r\n                    </div>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prevID} currentID={id} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={nextID} currentID={id} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    <br />\r\n                    <Processor item={item} nextItemID={nextItemID} touchFunction={touchFunction} itemIndex={indx} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n\r\nfunction Timer({ timeSpent, task, activeTask, activeSince, timeNow }){\r\n\r\n\r\n    if (task.id === parseInt(activeTask.id) ){\r\n        const dateNow = (new Date()).getTime();\r\n        timeSpent = timeSpent + (dateNow - activeSince);\r\n    }\r\n    console.log('time spent = '+timeSpent)\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n    \r\n\r\n    // let totalTimeSpent = (seconds*1000)+(minutes*60*1000)+(hours*3600*1000); //Time spent in milliseconds\r\n\r\n\r\n\r\n    // function reset() {\r\n    //     setSeconds(0);\r\n    //     setminutes(0);\r\n    //     sethours(0);\r\n    //     setIsActive(false);\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        setSeconds(secs);\r\n        setminutes(mins);\r\n        sethours(hrs);\r\n        if (task.id !== parseInt(activeTask.id) ){\r\n            setIsUpdated(false);\r\n            setIsActive(false)\r\n        }\r\n    },[ secs, mins, hrs, activeTask.timeSpent, activeTask.id, activeSince, task.id ])\r\n\r\n\r\n    if( (task.id === parseInt(activeTask.id)) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive && (task.id === parseInt(activeTask.id)) ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        \r\n        return () => clearInterval(interval);\r\n        \r\n    }, [ isActive, seconds, minutes, hours, isUpdated, activeTask.id, task.id ]);\r\n\r\n\r\n    switch(task.id){\r\n        case activeTask.id:\r\n            return (\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: \r\n                        <span className='fw3 yellow b'> {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} \r\n                        </span>\r\n                    </h5>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h5>\r\n                </div>\r\n                {/* <div className=\"\">\r\n                    <button className='' onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n                    <button className='' onClick={reset}>Reset</button>\r\n                </div> */}\r\n                </div>\r\n            );\r\n    }\r\n};\r\n","import React from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, UpdateTaskStatus, SetActiveTask, ShipItems, ChangeNav } from '../actions';\r\nimport { DONE, ACTIVE, PAUSED, PENDING, UPDATE, ADD, REMOVE, COMPLETED } from '../constants';\r\nimport { pushChanges  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskControls);\r\n\r\nfunction TaskControls({ task, position, changeNav, updateExp, changeItemID, setActiveTask, activeSince, activeTask, shipItems, db }){\r\n\r\n    const prevTimeSpent = task.timeSpent;\r\n\r\n    function startTimer(){\r\n        setActiveTask(task);\r\n        task.status = ACTIVE;\r\n        \r\n    }\r\n\r\n    function pauseTask(){\r\n        const dateNow = (new Date()).getTime();\r\n        setActiveTask({});\r\n        task.status = PAUSED;\r\n        task.timeSpent = prevTimeSpent + (dateNow - activeSince);\r\n        console.log(\"previos time spent:, \", prevTimeSpent)\r\n        console.log(\"time spent:, \", task.timeSpent)\r\n    }\r\n\r\n    function markAsDone(){\r\n        const dateNow = (new Date()).getTime();\r\n        task.status = DONE;\r\n        task.timeSpent = prevTimeSpent + (dateNow - activeSince);\r\n        updateExp(task.exp);\r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n        db.Completed.unshift(task);\r\n        pushChanges(ADD, task, \"Completed\", shipItems);\r\n        db.Tasks.splice(position,1);\r\n        pushChanges(REMOVE, task, \"Tasks\", shipItems);\r\n        const nav = {\r\n            title: COMPLETED,\r\n            view: \"DETAILS\",\r\n            ID: task.id\r\n        }\r\n        changeNav(nav);\r\n    }\r\n\r\n    switch(task.status){\r\n        case ACTIVE:\r\n            console.log(activeTask.id === true)\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={pauseTask}>PAUSE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PAUSED:\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={startTimer}>CONTINUE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PENDING:\r\n            console.log(typeof activeTask)\r\n            console.log(activeTask.id)\r\n            if(activeTask.id === undefined) {\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                    </div>)\r\n            }   \r\n        default:\r\n            return <div></div>\r\n    }\r\n    // Different controls are displayed based on if a task is ongoing\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, UpdateTaskStatus, ShipItems } from '../actions';\r\nimport DatePicker from './DatePicker';\r\nimport Timer from './Timer';\r\nimport TaskControls from './TaskControls';\r\nimport { pushChanges  } from '../functions';\r\nimport { COMPLETED, UPDATE } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items //state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);\r\n\r\n\r\nfunction TaskDetails({ id , title, updateExp, status, updateTaskStatus, activeSince, activeTask, db, shipItems }) {\r\n\r\n    const ProjectList = db.Projects;\r\n    const tasks = db.Tasks;\r\n    let task = {};\r\n    let position;\r\n\r\n    for (let i=0; i<tasks.length; i++){\r\n\r\n        if (tasks[i].id === id){\r\n           task = tasks[i];\r\n           position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n    let associatedProject = {};\r\n    if(task.associatedProjectID === 0){\r\n        associatedProject.name = \"Getting Things Done\";\r\n    } else if (task.associatedProjectID > 0){\r\n        for(let i=0; i<ProjectList.length; i++){\r\n            if(parseInt(task.associatedProjectID) === parseInt(ProjectList[i].id)){\r\n                associatedProject = ProjectList[i];\r\n                console.log('associated project name: ', associatedProject.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // console.log(task)\r\n    // console.log('associated project ID: ', task.associatedProjectID)\r\n    // console.log('associated project name: ', associatedProject.name)\r\n\r\n    const [ name, setName ] = useState(task.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(task.requiredContext);\r\n    const [ outcome, setoutcome ] = useState(task.outcome);\r\n    const [ dueDate, setdueDate ] = useState(task.dueDate);\r\n  //  const [ timeRequired, settimeRequired ] = useState(task.timeRequired);\r\n    const [ note, setnote ] = useState(task.note);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n    //const [ associatedProjectName, setAssociatedProjectName ] = useState(associatedProject.name);\r\n\r\n\r\n    useEffect(() => {\r\n        setName(task.name);\r\n        setrequiredContext(task.requiredContext);\r\n        setoutcome(task.outcome);\r\n        setnote(task.note);\r\n        setdueDate(task.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [task.name, task.requiredContext, task.outcome, task.note, task.dueDate, task.timeSpent, activeSince, activeTask, task.id, db.lastUpdated ])\r\n\r\n\r\n\r\n    function updateDB(change) {\r\n        console.log(\"changes\")\r\n     \r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n        // if (oldValue !== newValue){\r\n        //     oldValue = newValue;\r\n        //     console.log(oldValue)\r\n        //     console.log(\"old time: \", lastUpdated);\r\n        //     db.lastUpdated = (new Date()).getTime();\r\n        //     setlastUpdated(db.lastUpdated);\r\n            \r\n        // }\r\n    }\r\n\r\n    switch (title){\r\n        case COMPLETED:\r\n            \r\n        default:\r\n            return (\r\n                <div className='' >\r\n                    <div>\r\n                        <div className='w-100 pa2 pb3' >\r\n                            {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                            <h4 className='fw1 white'>{task.requiredContext}</h4> */}\r\n        \r\n                            <input type='text' onChange={(e)=> {setName(e.target.value);} } onBlur={() => {task.name = name; updateDB();} } \r\n                            value={name} className='bn fw9 b white bg-transparent' />\r\n        \r\n                            <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } \r\n                                onBlur={() =>{ task.requiredContext = requiredContext; updateDB(); }} \r\n                                value={requiredContext} className='fw1 white bn bg-transparent' />\r\n                            \r\n                        </div>\r\n        \r\n                        <div className='w-100 pl2 pb3'>\r\n                            <h5 className='fw3 white'>Mission: </h5>\r\n                            <h4 className='fw5 white'>{associatedProject.name}</h4>\r\n                        </div>\r\n        \r\n                        <div className='w-100 pl2 pb3'>\r\n                            <h5 className='fw3 white'>Outcome: </h5>\r\n                            {/* <h5 className='fw3 white'>{task.outcome} </h5> */}\r\n                            <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setoutcome(e.target.value);} } onBlur={() =>{ task.outcome = outcome; updateDB(); }} value={outcome} className='w-80 fw3 white bn bg-transparent' />\r\n                        </div>\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>\r\n                            <Timer timeSpent={task.timeSpent} task={task} />\r\n                            <DatePicker item={task} dueDate={dueDate} />\r\n                            {/* <input type='date' defaultValue={dueDate} onChange={(e)=> {setdueDate(e.target.value);} } onBlur={() =>task.dueDate=dueDate} className='fw3 white bn bg-transparent' /> */}\r\n                        </div>\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>                    \r\n                            {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                            <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                        </div>\r\n                        <h5 className='fw3 white'>Status: {task.status}</h5>\r\n                        <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                        <div className='pa2'>\r\n                            {/* <p className='fw3 white'>{task.note}</p> */}\r\n                            <textarea rows=\"4\" cols=\"45\" onChange={(e)=> {setnote(e.target.value);} } onBlur={ () =>{ updateDB(); task.note = note }} value={note} className='fw3 white bn bg-transparent' />\r\n                        </div>\r\n                        <TaskControls task={task} position={position} />\r\n                        {/* <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>DONE</button> */}\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport List from './List';\r\nimport { MISSION } from '../constants';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, RestorePreviousState, ShipItems } from '../actions';\r\nimport { pushChanges  } from '../functions';\r\nimport { UPDATE } from '../constants';\r\nimport DatePicker from './DatePicker';\r\nimport NewItemButton from './NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetails);\r\n\r\nfunction ProjectDetails({ project, view, changeItemID, db, shipItems }) {\r\n    console.log('project: ', project);\r\n\r\n    const TaskList = db.Tasks.concat(db.Completed);\r\n\r\n    function passKey(e) {\r\n        //Takes the events target and checks for title attribute \r\n        //If no title attribute, check parent node for title attribute\r\n        //If not found, repeat step 2\r\n        let targ = e.target;\r\n        checkForID(targ);\r\n        function checkForID (t) {\r\n            if (t.id) {\r\n                changeItemID(t.id);\r\n            } else {\r\n                t = t.parentNode;\r\n                checkForID (t);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTasks(){\r\n        let tasks = [];\r\n        if(project.taskList !== []){\r\n            for(let i=0; i<project.taskList.length; i++){\r\n                for(let j=0; j<TaskList.length; j++){\r\n                    if(project.taskList[i] === TaskList[j].id ){\r\n                        tasks.push(TaskList[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(tasks);\r\n        return tasks;\r\n    }\r\n\r\n    const projectTasks = getTasks();\r\n\r\n    const [ name, setName ] = useState(project.name);\r\n    const [ purpose, setPurpose ] = useState(project.purpose);\r\n    const [ description, setDescription ] = useState(project.description);\r\n    const [ dueDate, setdueDate ] = useState(project.dueDate);\r\n    const [ timeRequired, setTimeRequired ] = useState(project.timeRequired);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n    useEffect(() => {\r\n        setName(project.name);\r\n        setTimeRequired(project.timeRequired);\r\n        setPurpose(project.purpose);\r\n        setDescription(project.description);\r\n        setdueDate(project.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [project.name, project.timeRequired, project.purpose, project.dueDate, project.description, db.lastUpdated ])\r\n\r\n    function updateDB(change) {\r\n        console.log(\"changes\")\r\n     \r\n        pushChanges(UPDATE, project, \"Projects\", shipItems);\r\n        // if (oldValue !== newValue){\r\n        //     oldValue = newValue;\r\n        //     console.log(oldValue)\r\n        //     console.log(\"old time: \", lastUpdated);\r\n        //     db.lastUpdated = (new Date()).getTime();\r\n        //     setlastUpdated(db.lastUpdated);\r\n            \r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className='h-80 ba bw1 b--white'>\r\n            <div className='w-100 h-10 pa2 pb3' >\r\n\r\n                <input type='text' \r\n                className='bn fw7 b white bg-transparent'\r\n                value={name} \r\n                onChange={(e)=> {setName(e.target.value);} } \r\n                onBlur={() => {project.name = name; updateDB();} }  \r\n                />\r\n\r\n                <h4 className='fw1 white'>{project.type}</h4>\r\n            </div>\r\n\r\n            <div className='w-100 h-20 pl2 pt3'>\r\n                <div className='w-100 pl2 pb1'>\r\n                    <h5 className='fw3 white'>Description: </h5>\r\n                    <textarea rows=\"2\" cols=\"100\" \r\n                    className='w-80 fw3 white bn bg-transparent' \r\n                    value={description} \r\n                    onChange={(e)=> {setDescription(e.target.value);} } \r\n                    onBlur={() =>{ project.description = description; updateDB(); }} \r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className='w-100 h-10 pl2 pb2'>\r\n                <h5 className='fw3 white'>Purpose: </h5>\r\n                {/* <h5 className='fw3 white'>{project.purpose} </h5> */}\r\n\r\n                <input type='text' \r\n                className='bn fw3 b white bg-transparent' \r\n                value={purpose} \r\n                onChange={(e)=> {setPurpose(e.target.value);} } \r\n                onBlur={() => {project.purpose = purpose; updateDB();} } \r\n                />\r\n\r\n            </div>\r\n            <div className='w-100 h-10 pl2 pb2 flex justify-between'>\r\n                {/* <h5 className='fw3 white'>Due: {project.dueDate} </h5> */}\r\n                <DatePicker item={project} dueDate={dueDate} />\r\n                {/* <h5 className='fw3 white'>Time Required: {project.timeRequired}</h5> */}\r\n            </div>\r\n            <div className='w-100 h-10 pl2 pb3 flex justify-between'>\r\n                <h5 className='fw3 white'>Status: {project.status}</h5>\r\n                {/* <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n            </div>\r\n            <div className='flex justify-between items-center'>\r\n                <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n                <NewItemButton />\r\n            </div> \r\n            <div className='pa2 h-30'>\r\n                <List content={projectTasks} filter={MISSION} touchFunction={passKey} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, RestorePreviousState } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        previousItemID: state.values.previousItemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BackButton);\r\n\r\n\r\n\r\nfunction BackButton({ restorePreviousState, previousState, changeItemID, onTouch, previousView, previousItemID, id }) {\r\n\r\n    function goBack(){\r\n        //onTouch(previousView)\r\n        changeItemID(id);\r\n        \r\n    }\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={goBack}>\r\n            <h1 className=' white b f8 fw9 ma0'>&lt;</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.selectViewReducer.view,\r\n        previousView: state.selectViewReducer.previousView,\r\n        itemID: state.selectItemReducer.itemID,\r\n        exp: state.UpdateExpReducer.exp\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReferenceDetails);\r\n\r\n\r\nfunction ReferenceDetails({ id , changeItemID, updateExp }) {\r\n\r\n    const db = ReferenceList;\r\n    let reference = {};\r\n    //let position;\r\n\r\n    for (let i=0; i<db.length; i++){\r\n\r\n        if (db[i].id === id){\r\n           reference = db[i];\r\n           //position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    <h3 className='fw7 b white pb2'>{reference.name}</h3>\r\n                    <h5 className='fw3 white'>Status: {reference.status}</h5>\r\n                </div>\r\n                <h5 className='bb b--white pa2 fw3 white b' >Description</h5>\r\n                <div className='pa2'>\r\n                    <p className='fw3 white'>{reference.description}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\nimport trashCan from '../assets/trash1600.png';\r\nimport { INBOX, PROJECTS, REMOVE, TASKS, REFERENCES, SOMEDAY, ADD, PROCESSED, COMPLETED } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashButton);\r\n\r\n\r\nfunction TrashButton({ shipItems, changeNav, db, title, ID }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n    const References = db.References;\r\n    const SomedayList = db.Someday;\r\n    const ProcessedList = db.Process;\r\n    const Completed = db.Completed;\r\n    const Trash = db.Trash;\r\n\r\n    \r\n\r\n    let currentlist, indx, currentItem;\r\n\r\n    switch(title) {\r\n        case PROJECTS:\r\n            currentlist = ProjectList;\r\n        break;\r\n        case TASKS:\r\n            currentlist = TaskList;\r\n        break;\r\n        case INBOX:\r\n            currentlist = InboxItems;\r\n        break;\r\n        case REFERENCES:\r\n            currentlist = References;\r\n        break;\r\n        case SOMEDAY:\r\n            currentlist = SomedayList;\r\n        break;\r\n        case PROCESSED:\r\n            currentlist = ProcessedList;\r\n        break;\r\n        case COMPLETED:\r\n            currentlist = Completed;\r\n        break;\r\n        default:\r\n    }\r\n\r\n    for (let i=0; i<currentlist.length; i++){\r\n\r\n        if (currentlist[i].id === parseInt(ID)){\r\n            currentItem = currentlist[i];\r\n            indx = i;\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function ammendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case ProjectList:\r\n                dbList = \"Projects\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case REFERENCES:\r\n                dbList = \"References\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            case SOMEDAY:\r\n                dbList = \"Someday\"\r\n            break;\r\n            case Trash:\r\n                dbList = \"Trash\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                list.splice(itemndx, 1);\r\n                pushChanges(REMOVE, item, dbList);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                pushChanges(ADD, item, dbList);\r\n            break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //Change Nav to List\r\n    const nav = {\r\n        title: title,\r\n        view: \"LIST\",\r\n        ID: 0\r\n    }\r\n\r\n    function deleteItem() {\r\n        console.log('delete button clicked');\r\n        ammendList(ADD, Trash, currentItem, indx);\r\n        ammendList(REMOVE, currentlist, currentItem, indx);\r\n        changeNav(nav);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img src={trashCan} alt='trash icon' className='h2' onClick={() => {deleteItem()}} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PROJECT, TASK, INBOX_ITEM, REFERENCE, COMPLETED, PROCESSED, DONE, INBOX, TRASH, REFERENCES, PROJECTS, TASKS } from '../constants';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport ItemDetails from '../components/ItemDetails';\r\nimport TaskDetails from '../components/TaskDetails';\r\nimport ProjectDetails from '../components/ProjectDetails';\r\nimport BackButton from '../components/BackButton';\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport ReferenceDetails from '../components/ReferenceDetails';\r\nimport { selectItem } from '../actions';\r\nimport TrashButton from '../components/TrashButton';\r\nimport { calculateTime } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction Details( { db, itemID, touchFunction, updateExp, selectAnother, title, changeItemID }){\r\n    let itemType;\r\n    let item = {};\r\n    let prev = itemID;\r\n    let next = itemID;\r\n    const id = parseInt(itemID);\r\n    let content = db.Inbox\r\n    const ProjectList = db.Projects\r\n\r\n    console.log(\"type of item id: \", typeof itemID)\r\n\r\n    switch(title) {\r\n        case PROJECTS:\r\n            content = db.Projects\r\n            console.log(\"Project list from details: \", content)\r\n        break;\r\n        case TASKS:\r\n            content = db.Tasks\r\n            console.log(\"list from details: \", content)\r\n        break;\r\n        case COMPLETED:\r\n            content = db.Completed\r\n            console.log(\"Completed list from details: \", content)\r\n        break;\r\n        case REFERENCES:\r\n            content = db.References\r\n        break;\r\n        case TRASH:\r\n            content = db.Trash\r\n        break;\r\n        default:\r\n            content = db.Inbox\r\n    }\r\n    console.log(\"content list from details: \", content)\r\n\r\n    for (let i=0; i<content.length; i++){\r\n        console.log(content[i].id)\r\n        if (content[i].id === id){\r\n            console.log(content[i].id)\r\n            itemType = content[i].type;\r\n            item = content[i];\r\n            console.log(\"item from loop: \", item)\r\n            i === 0 ? prev = content[i].id : prev = content[i-1].id;\r\n            i === (content.length-1) ? next = content[i].id : next = content[i+1].id;\r\n        }\r\n    }\r\n\r\n    switch(title) {\r\n        case PROJECTS:\r\n            return (\r\n                <div className='w-100 h-100 center br1 pa2 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <ProjectDetails project={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={changeItemID} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={changeItemID} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case TASKS:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Task</h2>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Inbox Item</h2>\r\n                    <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                </div>        \r\n            )\r\n        case (PROCESSED):\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Inbox Item</h2>\r\n                    <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                </div>        \r\n            )\r\n        case REFERENCE:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>REFERENCE</h1>\r\n                    <ReferenceDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case COMPLETED:\r\n            console.log(\"reached completed stage\");\r\n            let associatedProject = {}\r\n            if(item.associatedProjectID === 0){\r\n                associatedProject.name = \"Getting Things Done\";\r\n            } else if (item.associatedProjectID > 0){\r\n                for(let i=0; i<ProjectList.length; i++){\r\n                    if(parseInt(item.associatedProjectID) === parseInt(ProjectList[i].id)){\r\n                        associatedProject = ProjectList[i];\r\n                        console.log('associated project name: ', associatedProject.name)\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 content-between '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>COMPLETED</h2>\r\n                    <div className='' >\r\n                    <div>\r\n                        <div className='w-100 pa2 pb3' >\r\n                            <h3 className='fw7 b white pb2'>{item.name}</h3>\r\n                            <h4 className='fw1 white'>{item.requiredContext}</h4>\r\n                            \r\n                        </div>\r\n        \r\n                        <div className='w-100 pl2 pb3'>\r\n                            <h5 className='fw3 white'>Mission: </h5>\r\n                            <h4 className='fw5 white'>{associatedProject.name}</h4>\r\n                        </div>\r\n        \r\n                        <div className='w-100 pl2 pb3'>\r\n                            <h5 className='fw3 white'>Outcome: </h5>\r\n                            <h5 className='fw3 white'>{item.outcome} </h5>\r\n                        </div>\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>\r\n                            <h5 className='fw3 white'>Time Spent: {calculateTime(item.timeSpent)}</h5>\r\n                            <h5 className='fw3 white'>Due Date: {item.dueDate} </h5>\r\n                        </div>\r\n                        <div className='w-100 pl2 pb3 flex justify-between'>                    \r\n                            {/* <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                            <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5> */}\r\n                        </div>\r\n                        <h5 className='fw3 white'>Status: {item.status}</h5>\r\n                        <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                        <div className='pa2'>\r\n                            <p className='fw3 white'>{item.note}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 pb2'>\r\n                    <BackButton />\r\n                    <h1 className='tc b white'>Error</h1>\r\n                    <p>Item Not Found</p>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTaskTimer);\r\n\r\nfunction ActiveTaskTimer({changeItemID, activeSince, activeTask}) {\r\n    const dateNow = (new Date()).getTime();\r\n    const timeSpent = activeTask.timeSpent + (dateNow - activeSince);\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    if( (parseInt(activeTask.id) !== undefined) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [ isActive, seconds, minutes, hours ]);\r\n\r\n    function goToTask(event){\r\n        event.stopPropagation();\r\n        changeItemID(activeTask.id)\r\n    }\r\n\r\n    switch(activeTask.id){\r\n        case undefined:\r\n            return (\r\n                <div></div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className=\"\" onClick={goToTask} >\r\n                    <div className=\" pt3 \">\r\n                        <h2 className=\"pa1 \">CURRENT TASK</h2>\r\n                        <h2 className=\"pa1 red \">{activeTask.name}</h2>\r\n                        <h2 className='pa1 fw3 b red'>{hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h2>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport ActiveTaskTimer from './ActiveTaskTimer';\r\n//import React, { useState, useEffect } from 'react';\r\n\r\n// import { connect } from 'react-redux';\r\n// import { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         activeTask: state.SetActiveTaskReducer.activeTask,\r\n//         status: state.UpdateTaskStatusReducer.taskStatus,\r\n//         activeSince: state.SetActiveTaskReducer.activeSince,\r\n//         timeNow: state.SetActiveTaskReducer.timeNow\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateTaskStatus: (status) => {\r\n//             return dispatch(UpdateTaskStatus(status))\r\n//         },\r\n//         setActiveTask: (task) => {\r\n//             return dispatch(SetActiveTask(task))\r\n//         },\r\n//         changeItemID: (id) => {\r\n//             return dispatch(selectItem(id))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(StatsOverview);\r\n\r\nexport default function StatsOverview({ touchFunction, exp }) {\r\n\r\n    return (\r\n        <article className=\"h-100 w-100 center bg-white pa2 \" title = \"STATS\" onClick={touchFunction}>\r\n            <div className=\"tc w-100 h-100\">\r\n                <h1 className=\"f2 mb0 \">Amen Christ</h1>\r\n                <h3 className=\"f6 pa1 gray \">Engineer</h3>\r\n                <h4 className=\"f6 gray \">Exp: {exp}</h4>\r\n                <ActiveTaskTimer />\r\n            </div>\r\n        </article>  \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function TaskOverview({ touchFunction, tasks }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"TASKS\" onClick={touchFunction}> \r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Tasks</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ tasks.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function ProjectsOverview({ touchFunction, projects }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"PROJECTS\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Missions</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ projects.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function InboxOverview({ touchFunction , inbox }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white br1 ba b--black-10\" title=\"INBOX\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">{ inbox.length }</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">Inbox</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NEW_ITEM } from '../constants'\r\n\r\nexport default function NewItemTile({ touchFunction }) {\r\n    return (\r\n        <div className='bg-white h-100 center w-100 flex items-center justify-center' title={NEW_ITEM} onClick={touchFunction}>\r\n            <div className='tc '>\r\n                <h3 className='' >Add New Item</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { TODAY } from '../constants';\r\n\r\nexport default function TodaysMission({ touchFunction }) {\r\n\r\n    return (\r\n        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={TODAY} onClick={touchFunction}>\r\n            <h2 className='tc'>Today's<br />Mission</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StatsOverview from '../components/StatsOverview';\r\nimport TaskOverview from '../components/TasksOverview';\r\nimport ProjectsOverview from '../components/ProjectsOverview';\r\nimport InboxOverview from '../components/InboxOverview';\r\nimport { ChangeNav } from '../actions';\r\nimport {  CALENDAR, DAILY } from '../constants';\r\nimport './Home.css';\r\nimport NewItemTile from '../components/NewItemTile';\r\nimport TodaysMission from '../components/TodaysMission';\r\nimport { setNavValues  } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    \r\n    const { changeItemID, exp, db, changeNav, state } = props;\r\n\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 pa1' >\r\n            <div className='pa1 ph1 h-40 ba' title=\"STATS\">\r\n                <StatsOverview touchFunction={handleEvent} exp={exp} />\r\n            </div>\r\n            <div className=\"flex justify-center h-20 \">\r\n                <div className='w-50 pa1'>\r\n                    <ProjectsOverview touchFunction={handleEvent} projects={db.Projects} />\r\n                </div>\r\n                <div className='w-50 pa1'>\r\n                    <TaskOverview touchFunction={handleEvent} tasks={db.Tasks}/>\r\n                </div>\r\n            </div>\r\n            <div className='flex w-100 h-10 pa1'>\r\n                <NewItemTile touchFunction={handleEvent} />\r\n            </div>\r\n            <div className=\"flex justify-center h-30\">\r\n                <div className='w-50 h-100 pa1'>\r\n                    <div className=' w-100 h-50 pb1'>\r\n                        <TodaysMission touchFunction={handleEvent} gotoItem={changeItemID} />\r\n                    </div>\r\n                    <div className=' w-100 h-50 pt1'>\r\n                        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={DAILY} onClick={handleEvent}>\r\n                            <h2 className='tc'>Daily<br />Exercises</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=' w-50 h-100'>\r\n                    <div className=' w-100 h-50'>\r\n                        <div className=' h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' title={\"SOMEDAY\"} onClick={handleEvent} >\r\n                                <h4 className='tc'>Someday</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' title={'REFERENCES'} onClick={handleEvent}>\r\n                                <h4 className='tc'>References</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='w-100 h-50 flex'>\r\n                        <div className='w-50 h-100 pa1' >\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={CALENDAR} onClick={handleEvent}>\r\n                                <h4 className='tc'>Calendar</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='w-50 h-100 pa1'>\r\n                            <InboxOverview touchFunction={handleEvent} inbox={db.Inbox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ChangeNav } from '../actions';\r\nimport { COMPLETED, PROCESSED, TRASH } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Stats( { changeNav}) {\r\n\r\n    function openList(title){\r\n        const nav = {\r\n            title: title,\r\n            view: \"LIST\",\r\n            ID: 0\r\n        }\r\n\r\n            changeNav(nav);\r\n    }\r\n    return (\r\n        <div className='h-75 w-90 center pa3 pa4-ns ba b--black-10'>\r\n            <div className=' w-90 center bg-white br1 pa3 pa4-ns ba b--black-10'>\r\n                <h1 className='tc'>STATS</h1>\r\n            </div>\r\n            <div className=' pt2 '>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(COMPLETED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Completed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(PROCESSED)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Processed</h1>\r\n                </div>\r\n                <div className='whiteB h3 flex items-center justify-center' onClick={() => {openList(TRASH)}}>\r\n                    <h1 className=' white b f8 fw9 ma0'>Trash</h1>\r\n                </div>\r\n            </div>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stats);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, selectTitle,ChangeNav } from '../actions';\r\nimport { PROJECTS, STATS, TASKS, INBOX, TASK, MISSION, DAILY, REFERENCES, TODAY, NEW, SOMEDAY, CALENDAR, DETAILS, DONE, PROCESSED, TRASH, COMPLETED } from '../constants';\r\nimport List from '../components/List';\r\nimport './Home.css';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport NewItem from '../components/NewItem';\r\nimport Details from './Details';\r\nimport Home from './Home';\r\nimport Stats from './Stats';\r\nimport { setNavValues } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        recordState: state.items.record.isFetching,\r\n        db: state.items.record.items,\r\n        record: state.items.record,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        changeNav: (navObj => {\r\n            return dispatch(ChangeNav(navObj))\r\n        })\r\n    }\r\n}\r\n\r\nfunction Main(props) {\r\n\r\n    const { state, title, view, itemID, changeItemID, previousView, updateExp, exp, db, record, changeNav } = props;\r\n    \r\n    let type;\r\n    switch(previousView) {\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case PROJECTS:\r\n            type = MISSION;\r\n        break;\r\n        default:\r\n    } \r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    const lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY, DAILY, SOMEDAY, CALENDAR, COMPLETED, PROCESSED, TRASH ];\r\n\r\n    console.log('Title: ', title)\r\n    console.log('Item ID: ', itemID)\r\n    console.log('View: ', view)\r\n\r\n    if(record.isFetching){\r\n        return <div className=\"f5 fw4 white\">Loading...</div>;\r\n    } else {\r\n\r\n        let content;\r\n        switch(title) {\r\n            case TASKS:\r\n                content = db.Tasks;\r\n            break;\r\n            case PROJECTS:\r\n                content = db.Projects;\r\n            break;\r\n            case INBOX:\r\n                content = db.Inbox;\r\n            break;\r\n            case COMPLETED:\r\n                content = db.Completed;\r\n            break;\r\n            case PROCESSED:\r\n                content = db.Processed;\r\n            break;\r\n            case REFERENCES:\r\n                content = db.References;\r\n            break;\r\n            case TRASH:\r\n                content = db.Trash;\r\n            break;\r\n            default:\r\n                content = []\r\n        } \r\n\r\n        switch( true ) {\r\n            case view === DETAILS:\r\n                return (\r\n                    <div className='h-100 pa2 '>\r\n                        <div className='h-10'>\r\n                            <h5>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <Details selectAnother={changeItemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case (title === STATS):\r\n                return (\r\n                    <Stats />\r\n                )\r\n            case (lists.indexOf(title) !== -1) && view === 'LIST' :\r\n                if (parseInt(itemID) !== 0){\r\n                    return (\r\n                        <div className='h-100 pa2 '>\r\n                            <div className='h-10'>\r\n                                <h5>EXP: {exp}</h5>\r\n                            </div>\r\n                            <div className='h-90 pa1'>\r\n                                <Details selectAnother={changeItemID} />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div className='h-100'>\r\n                            <div className='h-10'>\r\n                                <h5>EXP: {exp}</h5>\r\n                            </div>\r\n                            <div className='h-90 pa1'>\r\n                                <div className='h-100 w-100 center pa1'>\r\n                                    <h1 className='tc b gold ma0 pb2'>{title}</h1>\r\n                                    <div className=' h-80 '>\r\n                                        <List content={content} />\r\n                                    </div>\r\n                                    <div className='h-10 flex w-100 content-end pa2'>\r\n                                        <NewItemButton touchFunction={handleEvent} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    )\r\n                }\r\n            case view === NEW:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className=' h-10'>\r\n                            <h5>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90'>\r\n                            <NewItem submitFunction={\"\"} view={type} updateExp={updateExp} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <Home />\r\n                );\r\n        }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from './actions';\r\nimport NavBar from './containers/NavBar';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        }\r\n    }\r\n}\r\n\r\nfunction App2(props) {\r\n\r\n    const { onTouch } = props;\r\n\r\n    \r\n    return (\r\n        <div className='app'>\r\n            <div className='home-container'>\r\n                <Main />\r\n            </div>\r\n            <NavBar touchFunction={onTouch} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(App2);\r\n\r\n\r\n//https://cdn.internetmultimediaonline.org/241F21/loveworldlive/ixilrao9.m3u8","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SELECT_VIEW, OVERVIEW, SELECT_ITEM, UPDATE_EXP, TASKS, INBOX, REFERENCES, TODAY,\r\n    RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, SET_ACTIVE_TASK, HOME, SELECT_TITLE, PROJECTS, LIST, NEW_ITEM, NEW, CHANGE_NAV\r\n} from \"./constants\"\r\n\r\nimport { SELECT_RECORD, INVALIDATE_RECORD, REQUEST_ITEMS, RECEIVE_ITEMS, PACK_ITEMS, DELIVER_ITEMS } from './actions';\r\n\r\nconst initialState = {\r\n    title: HOME, \r\n    itemID: 0,\r\n    view: OVERVIEW,\r\n    previousTitle: HOME,\r\n    previousItemID: 0,\r\n    previousView: OVERVIEW,\r\n    previousState: {},\r\n    taskStatus: '',\r\n    agent: '',\r\n    record: {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        receivedAt: 0,\r\n        items: {}\r\n    },\r\n    latestUpdate: {\r\n        items: {},\r\n        isShipping: false,\r\n        deliveredAt: 0\r\n    },\r\n    exp: 0,\r\n    db: { lastUpdated: 0}\r\n}\r\n\r\n// const selectTitleReducer = (state=initialState, action={}) => {\r\n//     switch(action.type){\r\n//         case SELECT_TITLE:\r\n//             let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, DUE_TODAY]\r\n//             let view = OVERVIEW;\r\n//             if (lists.indexOf(action.payload) !== -1) {\r\n//                 view = LIST;\r\n//             }\r\n//             return Object.assign({}, state, {title: action.payload, view: view, previousTitle: state.title, previousState: state});\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\nconst values = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SELECT_TITLE:\r\n            let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY ]\r\n            let view = OVERVIEW;\r\n            let ID = 0;\r\n            if (lists.indexOf(action.payload) !== -1) {\r\n                view = LIST;\r\n            } \r\n            if (((lists.indexOf(action.payload) !== -1) && state.view === NEW) || (action.payload === NEW_ITEM) ) {\r\n                view = \"NEW\"\r\n            }\r\n            return Object.assign({}, state, {title: action.payload, view: view, itemID:ID, previousTitle: state.title, previousState: state});\r\n        case CHANGE_NAV:\r\n            return Object.assign({}, state, {title: action.payload.title, view: action.payload.view, itemID:action.payload.ID, previousTitle: state.title, previousState: state});\r\n        case SELECT_ITEM:\r\n            return Object.assign({}, state, {itemID: action.payload, previousItemID: state.itemID, previousState: state});\r\n        case SELECT_VIEW:\r\n            return Object.assign({}, state, {view: action.payload, previousView: state.view, previousState: state});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst RestorePreviousStateReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case RESTORE_PREVIOUS_STATE:\r\n            if(state.previousState === {}) {\r\n                break;\r\n            } else {\r\n                return Object.assign({}, state.previousState );\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateExpReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_EXP:\r\n            return Object.assign({}, state, {exp: (state.exp + action.payload)});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateTaskStatusReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_TASK_STATUS:\r\n            return Object.assign({}, state, {taskStatus: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialActiveTask = {\r\n    activeTask: {},\r\n    activeSince: null,\r\n    timeNow: (new Date()).getTime()\r\n}\r\n\r\nconst SetActiveTaskReducer = (state=initialActiveTask, action={}) => {\r\n    switch(action.type){\r\n        case SET_ACTIVE_TASK:\r\n            return Object.assign({}, state, {activeTask: action.payload, activeSince: (new Date()).getTime() });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n//let serverLink = \"http://localhost:5000\";// \"https://secret-citadel-16777.herokuapp.com/\"\r\n\r\n\r\n//////////////////////////////////////////////// 17.10.2020 async app upgrade\r\n\r\n/// State shape\r\n\r\n\r\nfunction SelectRecordReducer(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_RECORD:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction items(\r\n  state = initialState,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_RECORD:\r\n      return Object.assign({}, state, { records: {didInvalidate: true} })\r\n    case REQUEST_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: true,\r\n          didInvalidate: false\r\n        }\r\n      })\r\n    case RECEIVE_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: false,\r\n          didInvalidate: false,\r\n          receivedAt: action.receivedAt,\r\n          items: action.items\r\n        }\r\n      })\r\n    case PACK_ITEMS:\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: true,\r\n                deliveredAt: 0\r\n            },\r\n        })\r\n    case DELIVER_ITEMS:\r\n        console.log(\"Special Delivery: \", action.payload)\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: false,\r\n                deliveredAt: action.deliveredAt\r\n            },\r\n        })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({r\n    values, UpdateExpReducer, RestorePreviousStateReducer, \r\n    UpdateTaskStatusReducer, SetActiveTaskReducer, \r\n    SelectRecordReducer, items\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './tachyonBoost.css';\r\nimport rootReducer from './reducers';\r\nimport { SelectRecord, FetchItems } from './actions';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\n// store\r\n//   .dispatch(fetchPostsIfNeeded('reactjs'))\r\n//   .then(() => console.log(store.getState()))\r\n\r\nstore.dispatch(SelectRecord('reactjs')) ;\r\nstore.dispatch(FetchItems('reactjs'));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}