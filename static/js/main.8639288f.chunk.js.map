{"version":3,"sources":["constants.js","actions.js","components/HomeButton.js","components/ProjectsButton.js","components/TasksButton.js","components/InboxButton.js","components/StatsButton.js","functions.js","containers/NavBar.js","components/ListItem.js","components/Scroll.js","components/List.js","components/NewItemButton.js","TaskList.js","components/NewTask.js","ProjectList.js","components/NewMission.js","components/NewItem.js","components/QuestionAndOptions.js","components/QuestionAndInput.js","ReferenceList.js","containers/Processor.js","components/PrevItemButton.js","components/NextItemButton.js","components/ItemDetails.js","components/DatePicker.js","components/Timer.js","components/TaskControls.js","components/TaskDetails.js","components/ProjectDetails.js","components/BackButton.js","components/ReferenceDetails.js","containers/Details.js","components/ActiveTaskTimer.js","components/StatsOverview.js","components/TasksOverview.js","components/ProjectsOverview.js","components/InboxOverview.js","components/NewItemTile.js","components/TodaysMission.js","containers/Home.js","containers/Stats.js","containers/Main.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["TASKS","PROJECT","TASK","LOW","ChangeNav","navObj","type","payload","selectTitle","title","selectItem","itemID","selectView","view","UpdateExp","exp","RestorePreviousState","previousState","UpdateTaskStatus","status","SetActiveTask","task","FetchItems","record","dispatch","RequestItems","fetch","then","response","json","console","log","items","receivedAt","Date","now","ReceiveItems","ShipItems","agent","PackItems","method","mode","headers","body","JSON","stringify","deliveredAt","DeliverItems","catch","error","HomeButton","touchFunction","className","onClick","ProjectsButton","TasksButton","InboxButton","StatsButton","setNavValues","e","navChanger","state","navTitle","navID","navView","targ","target","checkForTitle","t","parentNode","checkForID","id","parseInt","indexOf","nav","ID","connect","values","changeNav","props","handleEvent","ListItem","item","name","dueDate","toISOString","substr","taskList","length","requiredContext","entryDate","Scroll","style","overflowY","overflowX","children","db","changeItemID","content","missionTasks","map","entry","i","key","dueToday","filter","todaysTasks","dailyEx","frequency","dailyTasks","filteredContent","ListItems","changeView","TaskList","timeSpent","priority","outcomeRecordID","outcome","note","timeRequired","associatedProject","requirements","onTouch","shipItems","updateExp","today","useState","setName","setOutcome","setRequiredContext","setNote","setDueDate","setPriority","setFrequency","setRequirements","setAssociatedProject","Task","d","this","getTime","onSubmit","event","unshift","action","list","pushDate","pushChanges","preventDefault","placeholder","value","onChange","htmlFor","min","disabled","defaultValue","ProjectList","output","outputRecordID","timeRemaining","nextAction","purpose","setPurpose","Mission","principles","m","changeTitle","submitFunction","InboxItems","Inbox","Item","description","submitNewItem","displayTypeForm","QuestionAndOptions","question","yes","no","QuestionandInput","answer","setAnswer","ReferenceList","nextItemID","itemIndex","Projects","Tasks","isDelegatable","Project","goal","setInterval","timeNow","isActionable","setIsActionable","setAction","isMultistep","setIsMultistep","isDoneInFive","setIsDoneInFive","setIsDelegatable","step","setStep","nextID","setNextID","processNextItem","makeNewTask","updateStatus","splice","proceed","proj","makeNewProject","PrevItemButton","selectAnother","prevID","currentID","NextItemButton","indx","readyToProcess","setReadyToProcess","DatePicker","date","setdate","changeDate","setchangeDate","useEffect","onBlur","activeTask","SetActiveTaskReducer","UpdateTaskStatusReducer","taskStatus","activeSince","updateTaskStatus","setActiveTask","dateNow","s","secs","mins","hrs","seconds","setSeconds","minutes","setminutes","hours","sethours","isActive","setIsActive","isUpdated","setIsUpdated","interval","clearInterval","toLocaleString","undefined","minimumIntegerDigits","UpdateExpReducer","prevTimeSpent","startTimer","markAsDone","previousView","position","tasks","setrequiredContext","setoutcome","setdueDate","setnote","lastUpdated","updateDB","change","rows","cols","TaskControls","RestorePreviousStateReducer","restorePreviousState","project","projectTasks","j","push","getTasks","previousItemID","selectViewReducer","selectItemReducer","reference","itemType","prev","next","concat","BackButton","ProjectDetails","TaskDetails","ReferenceDetails","stopPropagation","StatsOverview","ActiveTaskTimer","TaskOverview","ProjectsOverview","projects","InboxOverview","inbox","NewItemTile","TodaysMission","gotoItem","Stats","recordState","isFetching","lists","NewItem","Boolean","window","location","hostname","match","initialState","previousTitle","didInvalidate","latestUpdate","isShipping","initialActiveTask","rootReducer","combineReducers","Object","assign","SelectRecordReducer","records","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8639288f.chunk.js","sourcesContent":["// Actions\r\nexport const SELECT_VIEW = 'SELECT_VIEW';\r\nexport const SELECT_TITLE = 'SELECT_TITLE';\r\nexport const UPDATE_EXP = 'UPDATE_EXP';\r\nexport const SELECT_PROJECT = 'SELECT_PROJECT';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const RESTORE_PREVIOUS_STATE = 'RESTORE_PREVIOUS_STATE';\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS';\r\nexport const SET_ACTIVE_TASK = 'SET_ACTIVE_TASK';\r\nexport const RETRIEVE_DB = 'RETRIEVE_DB';\r\nexport const REFRESH_DB = 'REFRESH_DB';\r\nexport const CHANGE_NAV = 'CHANGE_NAV';\r\n\r\n//\r\nexport const HOME = 'HOME';\r\nexport const MISSIONS = 'MISSIONS';\r\nexport const PROJECTS = 'PROJECTS';\r\nexport const TODAY = 'TODAY';\r\nexport const STATS = 'STATS';\r\nexport const SKILLS = 'SKILLS';\r\nexport const TASKS = 'TASKS';\r\nexport const INBOX = 'INBOX';\r\nexport const PROJECT = 'PROJECT';\r\nexport const TASK = 'TASK';\r\nexport const INBOX_ITEM = 'INBOX_ITEM';\r\nexport const NEW_ITEM = 'NEW_ITEM';\r\nexport const REFERENCES = 'REFERENCES';\r\nexport const REFERENCE = 'REFERENCE';\r\nexport const MISSION = 'MISSION';\r\nexport const CALENDAR = 'CALENDAR';\r\nexport const REMINDERS = 'REMINDERS';\r\nexport const SOMEDAY = 'SOMEDAY';\r\nexport const TRASH = 'TRASH';\r\n\r\n//VIEWS\r\nexport const OVERVIEW = 'OVERVIEW';\r\nexport const LIST = 'LIST';\r\nexport const DETAILS = 'DETAILS';\r\nexport const NEW = 'NEW';\r\n\r\n//TITLES\r\n// export const INBOX = 'INBOX';\r\n// export const TASKS = 'TASKS';\r\n\r\n//Actions to push\r\nexport const ADD = 'ADD';\r\nexport const REMOVE = 'REMOVE';\r\nexport const UPDATE = 'UPDATE';\r\n\r\n\r\n// Status constants\r\n//STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\nexport const UNPLANNED = 'UNPLANNED';\r\nexport const UNPROCESSED = 'UNPROCESSED';\r\nexport const PROCESSED = 'PROCESSED';\r\nexport const PENDING = 'PENDING';\r\nexport const DELEGATION_PENDING = 'DELEGATION_PENDING';\r\nexport const STARTED = 'STARTED';\r\nexport const DONE = 'DONE';\r\nexport const ONGOING = 'ONGOING';\r\nexport const COMPLETE = 'COMPLETE';\r\nexport const PAUSED = 'PAUSED';\r\nexport const ACTIVE = 'ACTIVE';\r\n//\r\n\r\nexport const LOW = 'LOW';\r\nexport const MEDIUM = 'MEDIUM';\r\nexport const HIGH = 'HIGH';\r\n\r\n\r\n\r\n//For frequency/recurring\r\nexport const NONE = 'NONE';\r\nexport const DAILY = 'DAILY';\r\nexport const WEEKLY = 'WEEKLY';\r\nexport const MONTHLY = 'MONTHLY';\r\nexport const FORTHNIGHTLY = 'FORTHNIGHTLY';\r\nexport const THREE_MONTHS = 'THREE_MONTHS';\r\nexport const SIX_MONTHS = 'SIX_MONTHS';\r\nexport const YEARLY = 'YEARLY';\r\n//","import { \r\n    SELECT_VIEW, SELECT_PROJECT, SELECT_TASK, SELECT_TITLE, SELECT_ITEM, \r\n    UPDATE_EXP, RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, \r\n    SET_ACTIVE_TASK, RETRIEVE_DB, REFRESH_DB, CHANGE_NAV\r\n  } from './constants';\r\n\r\nexport const ChangeNav = (navObj) => {\r\n  return {\r\n    type: CHANGE_NAV,\r\n    payload: navObj\r\n  }\r\n}\r\nexport const selectTitle = (title) => {\r\n  return {\r\n  type: SELECT_TITLE,\r\n  payload: title\r\n}};\r\n\r\nexport const selectItem = (itemID) => {\r\n  return {\r\n  type: SELECT_ITEM,\r\n  payload: itemID\r\n}};\r\n\r\nexport const selectView = (view) => {\r\n  return {\r\n  type: SELECT_VIEW,\r\n  payload: view\r\n}};\r\n\r\nexport const selectProject = (projectID) => {\r\n    return {\r\n    type: SELECT_PROJECT,\r\n    payload: projectID\r\n}};\r\n\r\nexport const selectTask = (taskID) => {\r\n    return {\r\n    type: SELECT_TASK,\r\n    payload: taskID\r\n}};\r\n\r\nexport const UpdateExp = (exp) => {\r\n    return {\r\n    type: UPDATE_EXP,\r\n    payload: exp\r\n}};\r\n\r\nexport const RestorePreviousState = (previousState) => {\r\n    return {\r\n    type: RESTORE_PREVIOUS_STATE,\r\n    payload: previousState\r\n}};\r\n\r\nexport const UpdateTaskStatus = (status) => {\r\n    return {\r\n    type: UPDATE_TASK_STATUS,\r\n    payload: status\r\n}};\r\n\r\nexport const SetActiveTask = (task) => {\r\n    return {\r\n    type: SET_ACTIVE_TASK,\r\n    payload: task\r\n}};\r\n\r\nexport const RetrieveDB = (database) => {\r\n    return {\r\n        type: RETRIEVE_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\nexport const RefreshDB = (database) => {\r\n    return {\r\n        type: REFRESH_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\n////////////////////\r\n\r\n// ASYNC REQUESTS\r\n\r\nexport const SELECT_RECORD = 'SELECT_RECORD';\r\n\r\nexport function SelectRecord(record) {\r\n  return {\r\n    type: SELECT_RECORD,\r\n    payload: record\r\n  }\r\n}\r\n\r\nexport const INVALIDATE_RECORD = 'INVALIDATE_RECORD';\r\n\r\nexport function InvalidateRecord(record) {\r\n  return {\r\n    type: INVALIDATE_RECORD,\r\n    record\r\n  }\r\n}\r\n\r\nexport const REQUEST_ITEMS = 'REQUEST_ITEMS';\r\n\r\nexport function RequestItems(record) {\r\n  return {\r\n    type: REQUEST_ITEMS,\r\n    record\r\n  }\r\n}\r\n\r\nexport const RECEIVE_ITEMS = 'RECEIVE_ITEMS';\r\n\r\nexport function ReceiveItems(record, json) {\r\n  return {\r\n    type: RECEIVE_ITEMS,\r\n    record,\r\n    items: json,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n\r\n//import fetch from 'cross-fetch'\r\n\r\n\r\n\r\nexport function FetchItems(record) {\r\n  return dispatch => {\r\n    dispatch(RequestItems(record))\r\n    return fetch(`https://secret-citadel-16777.herokuapp.com/`) //https://secret-citadel-16777.herokuapp.com/\r\n      .then(response => response.json())\r\n      .then(json => { console.log(json); dispatch(ReceiveItems(record, json))})\r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  // Note that the function also receives getState()\r\n  // which lets you choose what to dispatch next.\r\n\r\n  // This is useful for avoiding a network request if\r\n  // a cached value is already available.\r\n\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      // Dispatch a thunk from thunk!\r\n      return dispatch(FetchItems(subreddit))\r\n    } else {\r\n      // Let the calling code know there's nothing to wait for.\r\n      return Promise.resolve()\r\n    }\r\n  }\r\n}\r\n\r\n////////////////////////////////////\r\n\r\nexport const PACK_ITEMS = 'PACK_ITEMS';\r\n\r\nexport function PackItems(items) {\r\n  return {\r\n    type: PACK_ITEMS,\r\n    payload: items\r\n  }\r\n}\r\n\r\nexport const DELIVER_ITEMS = 'DELIVER_ITEMS';\r\n\r\nexport function DeliverItems(agent, json) { // record/agent/destination\r\n  return {\r\n    type: DELIVER_ITEMS,\r\n    agent,\r\n    payload: json,\r\n    deliveredAt: Date.now()\r\n  }\r\n}\r\n\r\n// const testItem = {\r\n//   content: \"this is a test item fom the front end\"\r\n// }\r\n\r\nconst agent1 = \"amen\"\r\n\r\n\r\nexport function ShipItems(items, agent, record) {\r\n  return dispatch => {\r\n    dispatch(PackItems(items))\r\n    console.log(\"packed items: \", items)\r\n    return fetch(`https://secret-citadel-16777.herokuapp.com/${agent1}`, { //http://localhost:5000/\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(items)\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => dispatch(DeliverItems(agent, json)))\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n      })\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function HomeButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"HOME\" onClick={touchFunction}>\r\n            <h3 className='tc'>H</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function ProjectsButton({touchFunction}) {\r\n    return (\r\n        <div className='w-20 center bg-white ba b--black-10 flex items-center justify-center' title=\"PROJECTS\" onClick={touchFunction}>\r\n            <h3 className='tc'>M</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function TasksButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"TASKS\" onClick={touchFunction}>\r\n            <h3 className='tc'>T</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function InboxButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"INBOX\" onClick={touchFunction}>\r\n            <h3 className='tc'>I</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function StatsButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"STATS\" onClick={touchFunction}>\r\n            <h3 className='tc'>S</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","/// For all the extra functions required in multiple places\r\n\r\nimport { CALENDAR, DAILY, DETAILS, HOME, INBOX, PROJECTS, REFERENCES, REMINDERS, SOMEDAY, STATS, TASKS, TODAY, TRASH } from \"./constants\";\r\n\r\nexport function passTitle(e, ChangeTitleFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n}\r\n\r\n// function passKey(e, changeIDFunction) {\r\n//     //Takes the events target and checks for title attribute \r\n//     //If no title attribute, check parent node for title attribute\r\n//     //If not found, repeat step 2\r\n//     let targ = e.target;\r\n//     checkForID(targ);\r\n//     function checkForID (t) {\r\n//         if (t.id) {\r\n//             changeIDFunction(t.id);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForID (t);   \r\n//         }\r\n//     }\r\n// }\r\n\r\nexport function passTitleAndID(e, ChangeTitleFunction, changeIDFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            changeIDFunction(t.id);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n}\r\n\r\nexport function setNavValues(e, navChanger, state){\r\n    let targ = e.target;\r\n    let navTitle;\r\n    checkForTitle(targ);\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            navTitle = t.title;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    let navID;\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            navID = t.id;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n    \r\n    let navView;\r\n    navTitle === \"STATS\" ? navView = \"OVERVIEW\" : navView = \"LIST\";\r\n    navTitle === \"NEW_ITEM\" ? navView = \"NEW\" : navView = \"LIST\";\r\n    console.log(\"Nav ID is a \", typeof navID)\r\n    console.log(\"Nav ID parsed= \", parseInt(navID))\r\n   \r\n    //typeof navID !== \"number\" ? navID = 0 : navID = navID;\r\n    !(parseInt(navID) >= 0) ? navID = 0 : navID = navID;\r\n\r\n    const titles = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY, DAILY, SOMEDAY, TRASH, CALENDAR, REMINDERS, STATS, HOME ]\r\n    if (titles.indexOf(navTitle) === -1){\r\n        navTitle = state.title;\r\n    }\r\n    console.log(\"this is state: \", state)\r\n    console.log(\"this is navID: \", navID)\r\n    if (parseInt(state.itemID) === 0 && parseInt(navID) > 0 ) {\r\n        navView = DETAILS;\r\n    }\r\n\r\n    const nav = {\r\n        title: navTitle,\r\n        view: navView,\r\n        ID: navID\r\n    }\r\n    console.log(nav)\r\n    navChanger(nav);\r\n}\r\n\r\n\r\nexport function pushChanges(action, item, list, shippingFunction){\r\n    let state = {\r\n        action: action,\r\n        list: list,\r\n        item: item,\r\n        pushDate: (new Date()).getTime()\r\n    }\r\n    shippingFunction(state);\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeButton from '../components/HomeButton';\r\nimport ProjectsButton from '../components/ProjectsButton';\r\nimport TasksButton from '../components/TasksButton';\r\nimport InboxButton from '../components/InboxButton';\r\nimport StatsButton from '../components/StatsButton';\r\nimport { ChangeNav } from '../actions';\r\nimport { setNavValues } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { changeNav, state } = props;\r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='navbar center flex'>\r\n            <HomeButton touchFunction={handleEvent} />\r\n            <InboxButton touchFunction={handleEvent} />\r\n            <TasksButton touchFunction={handleEvent} />\r\n            <ProjectsButton touchFunction={handleEvent} />\r\n            <StatsButton touchFunction={handleEvent} />\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { PROJECT, TASK, INBOX_ITEM } from '../constants';\r\n\r\n\r\nexport default function ListItem( { touchFunction, item }){\r\n\r\n    switch(item.type){\r\n        case PROJECT:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80 '>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        <p className='fw3 white'>Due: {(new Date(item.dueDate)).toISOString().substr(0, 10)}. Tasks: {item.taskList.length}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case TASK:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{item.requiredContext}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX_ITEM:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{(new Date(item.entryDate)).toISOString().substr(0, 10)}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>PROCESS</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='bb' title='new item' onClick={touchFunction}>\r\n                    <h3>Enter New Item</h3>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='h-100' style={{overflowY: 'scroll', overflowX: 'hidden'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, ChangeNav } from '../actions';\r\nimport ListItem from './ListItem';\r\nimport Scroll from './Scroll';\r\nimport { TASK, TASKS, PROJECTS, PROJECT, INBOX_ITEM, TODAY, DAILY, DONE, REFERENCE, REFERENCES } from '../constants';\r\nimport { setNavValues  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/////////////////////////////////////////////////\r\n\r\n\r\nfunction List({ content, changeItemID, title, state, changeNav }) {\r\n\r\n    // function passKey(e, changeIDFunction) {\r\n    //     //Takes the events target and checks for title attribute \r\n    //     //If no title attribute, check parent node for title attribute\r\n    //     //If not found, repeat step 2\r\n    //     let targ = e.target;\r\n    //     checkForID(targ);\r\n    //     function checkForID (t) {\r\n    //         if (t.id) {\r\n    //             changeIDFunction(t.id);\r\n    //         } else {\r\n    //             t = t.parentNode;\r\n    //             checkForID (t);   \r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    function handleEvent(e ) {\r\n        //passKey(e, changeItemID);\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n\r\n    // A Mission's Tasklist\r\n    const missionTasks = content.map((entry,i ) => {\r\n        return <ListItem item={content[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n    // Today's Mission\r\n    const dueToday = content.filter((entry) => ( \r\n        ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ) );\r\n    const todaysTasks = dueToday.map((entry,i ) => {\r\n        return <ListItem item={dueToday[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n    /////\r\n\r\n    // Daily exercises\r\n    const dailyEx = content.filter((entry) => (entry.frequency === DAILY ));\r\n    const dailyTasks = dailyEx.map((entry, i) => {\r\n        return <ListItem item={dailyEx[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n    ///////\r\n\r\n    // Project, Task, Inbox and Reference Lists \r\n    let type = '';\r\n    switch(title){\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case PROJECTS:\r\n            type = PROJECT;\r\n            break;\r\n        case REFERENCES:\r\n            type = REFERENCE;\r\n            break;\r\n        default:\r\n            type = INBOX_ITEM;\r\n    }\r\n\r\n    const filteredContent = content.filter((entry) => (entry.type === type))\r\n\r\n    const ListItems = filteredContent.map((entry,i) => {\r\n        return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n\r\n    switch(title){\r\n        case TODAY:\r\n            return (\r\n                <Scroll>\r\n                    {todaysTasks}\r\n                </Scroll>\r\n            )\r\n        case DAILY:\r\n            return (\r\n                <Scroll>\r\n                    {dailyTasks}\r\n                </Scroll>\r\n            )\r\n        case PROJECTS:\r\n            return (\r\n                <Scroll>\r\n                    {missionTasks}\r\n                </Scroll>\r\n            )\r\n        default:\r\n            return (\r\n                <Scroll>\r\n                    {ListItems}\r\n                </Scroll>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from '../actions';\r\nimport { NEW } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeView: (view) => {\r\n            return dispatch(selectView(view))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItemButton({ changeView }) {\r\n\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={ () => changeView(NEW)}>\r\n            <h1 className=' white b f8 fw9 ma0'>+</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItemButton);","import { TASK, LOW, DAILY } from \"./constants\";\r\n\r\nexport const TaskList = [\r\n    {\r\n        type: TASK,\r\n        id: 1589657001522,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: 0,\r\n        timeSpent: 600000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 5 ',\r\n        outcome: 'Bread in the fridge',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: new Date().toISOString().substr(0, 10), //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001530\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001523,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: 0,\r\n        timeSpent: 300000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 4 ',\r\n        outcome: 'Bread in the fridge',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001523, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001530\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001524,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: DAILY,\r\n        timeSpent: 150000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 3 ',\r\n        outcome: 'Bread in the fridge',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001526, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001531\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001525,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: DAILY,\r\n        timeSpent: 400000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 2',\r\n        outcome: 'recordable product of task completion',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001526, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001532\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001526,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: 0,\r\n        timeSpent: 500000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread',\r\n        outcome: 'recordable product of task completion',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001526, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001533\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    }\r\n]\r\n\r\n/*\r\nthis.type = INBOX_ITEM;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.frequency = ONCE;\r\n        this.timeSpent = 0;\r\n        this.name = name;\r\n        this.outcome = '';\r\n        this.requiredContext = '';\r\n        this.description = description;\r\n        this.requirements = '';\r\n*/","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, TASK, MEDIUM, HIGH } from '../constants';\r\nimport { TaskList } from '../TaskList';\r\nimport { selectView, selectItem,ShipItems } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewTask({ changeItemID, updateExp, shipItems }) {\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ associatedProject, setAssociatedProject ] = useState({});\r\n\r\n    class Task{\r\n        constructor() {\r\n            const d= new Date();\r\n\r\n            setFrequency(0);\r\n            setAssociatedProject({});\r\n\r\n            this.type = TASK;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.status = PENDING;\r\n            this.priority = priority;\r\n            this.frequency = frequency;\r\n            this.timeSpent = 0;\r\n            this.outcomeRecordID = 0;\r\n            this.name = name;\r\n            this.outcome = outcome;\r\n            this.requiredContext = requiredContext;\r\n            this.note = note;\r\n            this.dueDate = dueDate;\r\n            this.timeRequired = 0;\r\n            this.requirements = requirements;\r\n            this.associatedProject = associatedProject;\r\n            this.exp = 10;\r\n        }\r\n    }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        let t = new Task();\r\n        console.log(t);\r\n        TaskList.unshift(t);\r\n        pushChanges(\"ADD\", t, \"Tasks\");\r\n        updateExp(5);\r\n        changeItemID(t.id);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc'>NEW TASK</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={TASK}>\r\n                <input type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea placeholder='Required Context' value={requiredContext} onChange={(e) => setRequiredContext(e.target.value)} />\r\n                <textarea placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label htmlFor=\"due date\" className=''>Due Date:</label>\r\n                <input id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask);","import { PROJECT, UNPLANNED } from \"./constants\";\r\n\r\nexport const ProjectList = [\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001530,\r\n        exp: 50,\r\n        name: \"Upload Church service\",\r\n        note: 'About Project 1',\r\n        outcome: \"Last week's church service available to watch on Barking Church's website\",\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds (Average Time it has historically taken for the whole project to be completed by you or someone else)\r\n        timeRemaining: 2629746,\r\n        status: UNPLANNED, //STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action',\r\n            output: 'recordable product of task completion' //information, document etc\r\n        },\r\n        taskList: [ 1589657001522, 1589657001523 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001531,\r\n        exp: 50,\r\n        name: 'Project 2',\r\n        note: 'About Project 2',\r\n        outcome: 'What done looks like for Project 2',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: UNPLANNED,\r\n        nextAction: {\r\n            id: 17,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001524 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001532,\r\n        exp: 50,\r\n        name: 'Project 3',\r\n        note: 'About Project 3',\r\n        outcome: 'What done looks like for Project 3',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001525 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001533,\r\n        exp: 50,\r\n        name: 'Project 4',\r\n        note: 'About Project 4',\r\n        outcome: 'What done looks like for Project 4',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001526 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001534,\r\n        exp: 50,\r\n        name: 'Project 5',\r\n        note: 'About Project 5',\r\n        outcome: 'What done looks like for Project 5',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: []\r\n    }\r\n]","import React, { useState } from 'react';\r\nimport { PENDING, LOW, MEDIUM, HIGH, MISSION, PROJECT } from '../constants';\r\nimport { ProjectList } from '../ProjectList';\r\nimport { selectView, selectItem } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewMission({ changeItemID, updateExp }) {\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ purpose, setPurpose ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    //const [ taskList, setTaskList ] = useState([]);\r\n\r\n\r\n    class Mission{\r\n        constructor() {\r\n            const d= new Date();\r\n\r\n            this.type = PROJECT;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.status = PENDING;\r\n            this.priority = priority;\r\n            this.frequency = frequency;\r\n            this.timeSpent = 0;\r\n            this.outcomeRecordID = 0;\r\n            this.name = name;\r\n            this.purpose = purpose;\r\n            this.outcome = outcome;\r\n            this.principles = '';\r\n            this.note = note;\r\n            this.dueDate = dueDate;\r\n            this.timeRequired = 0;\r\n            this.requirements = requirements;\r\n            this.taskList = [];\r\n            this.exp = 50;\r\n        }\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let m = new Mission();\r\n        console.log(m);\r\n        // console.log(m.id);\r\n        ProjectList.unshift(m);\r\n        updateExp(5);\r\n        changeItemID(m.id);\r\n        event.preventDefault();\r\n        setFrequency(0);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc'>New Mission</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={MISSION}>\r\n                <input type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea placeholder='What is the purpose of the mission?' value={purpose} onChange={(e) => setPurpose(e.target.value)} />\r\n                <textarea placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label htmlFor=\"due date\" className=''>Due Date:</label>\r\n                <input id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMission);","import React, { useState } from 'react';\r\nimport { INBOX_ITEM, TASK, INBOX, UNPROCESSED, MISSION, PROJECTS, TASKS } from '../constants';\r\n//import  InboxItems  from '../InboxItems'\r\nimport NewTask from './NewTask';\r\nimport NewMission from './NewMission';\r\nimport { selectItem, ShipItems, selectTitle } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);\r\n\r\n\r\nfunction NewItem({ submitFunction, title, updateExp, changeItemID, shipItems, db, changeTitle }) {\r\n\r\n    // const [ type, setType ] = useState(title);\r\n    const [ name, setName ] = useState('Enter item name');\r\n    \r\n    const InboxItems = db.Inbox;\r\n    //console.log(InboxItems);\r\n\r\n    function reset(){\r\n        //changeTitle(INBOX);\r\n        setName('Enter item name');\r\n        // setDescription('');\r\n    }\r\n\r\n    class Item{\r\n        constructor(name,description='None') {\r\n            const d= new Date();\r\n    \r\n            this.type = INBOX_ITEM;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.name = name;\r\n            this.description = '';\r\n            this.status = UNPROCESSED;\r\n    \r\n        }\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        if(name !== 'Enter item name' && name !== '' ){\r\n            //console.log('name is set')\r\n            let i = new Item(name);\r\n            console.log(i)\r\n            InboxItems.unshift(i);\r\n            pushChanges(\"ADD\", i, \"Inbox\");\r\n            console.log(\"new inbox: \", InboxItems)\r\n            updateExp(5);\r\n            changeItemID(i.id);\r\n            //submitFunction(event);\r\n            reset();\r\n            event.preventDefault();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n    \r\n    function displayTypeForm(){\r\n        switch(true) {\r\n            case title === TASKS:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === PROJECTS:\r\n                return <NewMission updateExp={updateExp} />\r\n            default:\r\n                return (\r\n                    <div className='h-100 w-100 center ba b--black-10 '>\r\n                        <h1 className='tc gold b'>NEW ITEM</h1>\r\n                        <form onSubmit={submitNewItem} className='flex flex-column' title={INBOX}>\r\n                            <input type='text' onChange={(e)=> setName(e.target.value)} placeholder='Enter item name...' className='pa2 mb2' />\r\n                            {/* <textarea value={description} onChange={(e) => setDescription(e.target.value)} /> */}\r\n                            <input type='submit' value='submit' />\r\n                        </form>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='pa1 w-100'>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(INBOX)}>INBOX</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(TASKS)}>TASK</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(PROJECTS)}>MISSION</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>REF</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>FINANCE</button>\r\n            {displayTypeForm()}\r\n            {/* <label htmlFor=\"type\" className=''>Type:</label>\r\n            <select id=\"type\" value={type} onChange={(e)=> setType(e.target.value)}>\r\n                <option value=\"INBOX_ITEM\">INBOX</option>\r\n                <option value=\"TASK\">TASK</option>\r\n                <option value=\"MISSION\">MISSION</option>\r\n                <option value=\"REFERENCE\">REFERENCE</option>\r\n                <option value=\"EXPENSE\">EXPENSE</option>\r\n                <option value=\"INCOME\">INCOME</option>\r\n            </select> */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function QuestionAndOptions({ question, yes, no }) {\r\n    return (\r\n        <div className='h-100 w-100 br1 pa3 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <div>\r\n                <button className=\"button\" onClick={yes}>YES</button>\r\n                <button className=\"button\" onClick={no} >NO</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function QuestionandInput({ question, submitFunction }) {\r\n\r\n    const [ answer, setAnswer ] = useState('');\r\n\r\n    function submit(event) {\r\n\r\n        if(answer !==''){\r\n            submitFunction(answer);\r\n            setAnswer('');\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <form onSubmit={submit}>\r\n                <input type='text' value={answer} onChange={(e)=> setAnswer(e.target.value)} />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}","export const ReferenceList = []","import React, { useState } from 'react';\r\nimport QuestionAndOptions from '../components/QuestionAndOptions';\r\nimport QuestionandInput from '../components/QuestionAndInput';\r\n//import InboxItems  from '../InboxItems';\r\n//import { ProjectList } from '../ProjectList';\r\n//import { TaskList } from '../TaskList';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport { PROJECT, UNPLANNED, PROCESSED, TASK, PENDING, UNPROCESSED, REFERENCE, ADD, UPDATE, REMOVE } from '../constants';\r\nimport { selectView, selectItem } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems } from '../actions';\r\n\r\n//shipItems(items, agent, record)\r\n//\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Processor({ nextItemID, item, touchFunction, changeItemID, itemIndex, db, shipItems }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n\r\n    class Task{\r\n        constructor(name,outcome, isDelegatable, requiredContext) {\r\n            const d = new Date();\r\n            this.type = TASK;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.status = PENDING;\r\n            this.priority = 'NONE';\r\n            this.frequency = 0;\r\n            this.timeSpent = 0;\r\n            this.outcomeRecordID = 0;\r\n            this.name = name;\r\n            this.outcome = outcome;\r\n            this.requiredContext = requiredContext;\r\n            this.note = '';\r\n            this.dueDate = (new Date()).toISOString().substr(0, 10);\r\n            this.timeRequired = 0;\r\n            this.requirements = '';\r\n            this.associatedProject = {};\r\n            this.exp = 10;\r\n            this.isDelegatable = isDelegatable;\r\n            this.description = '';\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    class Project{\r\n        constructor(name, goal) {\r\n            const d = new Date();\r\n            this.type = PROJECT;        \r\n            this.id = d.getTime();\r\n            this.name = name;\r\n            this.description = '';\r\n            this.goal = goal;\r\n            this.outcome = outcome;\r\n            this.outputRecordID = null;\r\n            this.dueDate = (new Date((d.getTime() + 7776000000))).toISOString().substr(0, 10); // 3 months from the date the project is planned \r\n            this.timeRequired = 7776000000;\r\n            this.timeRemaining = setInterval(()=> {\r\n                let timeNow = (new Date()).getTime();\r\n                return (this.dueDate - timeNow)\r\n            }, 1);\r\n            this.status = UNPLANNED;\r\n            this.nextAction = {};\r\n            this.taskList = [];\r\n        }\r\n    }\r\n\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ isActionable, setIsActionable ] = useState(null);\r\n    const [ action, setAction ] = useState('');\r\n    const [ isMultistep, setIsMultistep ] = useState(null);\r\n    const [ isDoneInFive, setIsDoneInFive ] = useState(null);\r\n    const [ isDelegatable, setIsDelegatable ] = useState(null);\r\n    const [ step, setStep ] = useState(0);\r\n    const [ nextID, setNextID ] = useState(0);\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function processNextItem(e){\r\n        setStep(0);\r\n        //touchFunction(e);\r\n    }\r\n\r\n    function makeNewProject(){\r\n        let proj = new Project( action, outcome );\r\n        ProjectList.unshift(proj);\r\n        pushChanges(ADD, proj, \"Projects\");\r\n        updateStatus();\r\n        InboxItems.splice(itemIndex,1);\r\n        pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(proj.id);\r\n    }\r\n\r\n    function makeNewTask(){\r\n        let task = new Task( action, outcome, isDelegatable, requiredContext);\r\n        TaskList.unshift(task);\r\n        console.log(\"new task = \",task);\r\n        pushChanges(ADD, task, \"Tasks\");\r\n        updateStatus();\r\n        InboxItems.splice(itemIndex,1);\r\n        pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(task.id);\r\n        \r\n    }\r\n\r\n    function updateStatus() {\r\n        item.status = PROCESSED;\r\n        pushChanges(UPDATE, item, \"Inbox\");\r\n    }\r\n\r\n    function proceed() {\r\n        setStep((step+1));\r\n    }\r\n\r\n    function refresh(){\r\n        changeItemID(item.id);\r\n    }\r\n    \r\n    if (item.status === UNPROCESSED && step === 0){\r\n        proceed();\r\n    }\r\n\r\n    function addToReferences(){\r\n        item.type = REFERENCE;\r\n        updateStatus();\r\n        InboxItems.splice(itemIndex,1);\r\n        ReferenceList.unshift(item);\r\n        pushChanges(ADD, item, \"References\");\r\n    }\r\n\r\n    switch(true) {\r\n        case ( step === 1 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Is this Actionable?' yes={() => { setIsActionable(true); proceed() }} no={() => { setIsActionable(false); addToReferences(); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 2 ):\r\n        // Added to references\r\n        return (\r\n            <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                <h3 className='white tc pb2'>Item was added to References</h3>\r\n                <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                <button className=\"button\" id={nextItemID} onClick={() => changeItemID(item.id)} >VIEW ITEM</button>\r\n            </div>\r\n        )\r\n        case ( isActionable === true && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the desired outcome?\" submitFunction={(answer) => { setOutcome(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the next action?\" submitFunction={(answer) => { setAction(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Does the action require more than one step?' yes={() => { setIsMultistep(true); proceed();  makeNewProject() } } no={() => { setIsMultistep(false); proceed();} } />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 5 ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Project has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button>\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can it be done now in 5 minutes or less?' yes={() => { setIsDoneInFive(true); proceed() }} no={() => { setIsDoneInFive(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case (isDoneInFive === true && step === 6):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h3>LET'S DO IT!</h3>\r\n                    <h2>TIMER</h2>\r\n                    <p>Once timer is done, you get the option to mark as completed. You also get the option ot defer the action.</p>\r\n                    <button className=\"button\" onClick={() => { updateStatus(); setStep(0); refresh() }} >DONE</button>\r\n                </div>\r\n            )\r\n        case ( isDoneInFive === false && step === 6 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Where should this task be done?\" submitFunction={(answer) => { setRequiredContext(answer); proceed(); }} />\r\n                </div>\r\n            )\r\n            \r\n        case ( step === 7 ): \r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can this task be delegated?' yes={() => { setIsDelegatable(true); makeNewTask(); proceed(); }} no={() => { setIsDelegatable(false); makeNewTask(); proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show flex items-center flex-column' >\r\n                    <h3 className='white tc pb2'>A new Task has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={ processNextItem } >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW TASK</button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Processor);","import React from 'react';\r\n\r\nexport default function PrevItemButton({ selectAnother, prevID, currentID }){\r\n\r\n    if(currentID !== prevID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(prevID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NextItemButton({ selectAnother, nextID, currentID }){\r\n    if(currentID !== nextID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(nextID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Processor from '../containers/Processor'\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport NewItemButton from '../components/NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        db: state.items.record.items//state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nfunction ItemDetails({ id, touchFunction, selectAnother, prevID, nextID, db }) {\r\n\r\n\r\n    const InboxItems = db.Inbox\r\n\r\n    const [ readyToProcess, setReadyToProcess ] = useState(false);\r\n\r\n    let item = {};\r\n    let nextItemID = null;\r\n    let indx;\r\n    for (let i=0; i<InboxItems.length; i++){\r\n\r\n        if (InboxItems[i].id === id){\r\n           item = InboxItems[i];\r\n           indx = i;\r\n           if (InboxItems[i+1]) {\r\n               nextItemID = InboxItems[i+1].id;\r\n           } else {\r\n            nextItemID = 0;\r\n           }\r\n           break;\r\n        }    \r\n    }\r\n\r\n    console.log(item);\r\n\r\n    if (item.name) {\r\n        switch(readyToProcess){\r\n        case false:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                        <button onClick={()=> setReadyToProcess(true)} >PROCESS THIS</button>\r\n                    </div>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prevID} currentID={id} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={nextID} currentID={id} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    <br />\r\n                    <Processor item={item} nextItemID={nextItemID} touchFunction={touchFunction} itemIndex={indx} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemDetails);","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function DatePicker({ item, dueDate }){\r\n    const [ date, setdate ] = useState((new Date(dueDate)).toISOString().substr(0, 10));\r\n    const [ changeDate, setchangeDate ] = useState(false);\r\n    const changeD = false;\r\n\r\n\r\n    useEffect(() => {\r\n        setdate((new Date(dueDate)).toISOString().substr(0, 10));\r\n        setchangeDate(false);\r\n    }, [dueDate, changeD])\r\n\r\n    switch(changeDate){\r\n        case true:\r\n            return (\r\n                <div>\r\n                    <input type='date' defaultValue={date} onChange={(e)=> {setdate(e.target.value);} } onBlur={() =>{item.dueDate=date; setchangeDate(false)}} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n                )\r\n        default:\r\n            return (\r\n            <h5 className='fw3 white' onClick={() => setchangeDate(true)}>Due: {new Date(item.dueDate).toISOString().substr(0, 10)} </h5>\r\n            )\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n\r\nfunction Timer({ timeSpent, task, activeTask, activeSince, timeNow }){\r\n\r\n\r\n    if (task.id === parseInt(activeTask.id) ){\r\n        const dateNow = (new Date()).getTime();\r\n        timeSpent = timeSpent + (dateNow - activeSince);\r\n    }\r\n    console.log('time spent = '+timeSpent)\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n    \r\n\r\n    // let totalTimeSpent = (seconds*1000)+(minutes*60*1000)+(hours*3600*1000); //Time spent in milliseconds\r\n\r\n\r\n\r\n    // function reset() {\r\n    //     setSeconds(0);\r\n    //     setminutes(0);\r\n    //     sethours(0);\r\n    //     setIsActive(false);\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        setSeconds(secs);\r\n        setminutes(mins);\r\n        sethours(hrs);\r\n        if (task.id !== parseInt(activeTask.id) ){\r\n            setIsUpdated(false);\r\n            setIsActive(false)\r\n        }\r\n    },[ secs, mins, hrs, activeTask.timeSpent, activeTask.id, activeSince, task.id ])\r\n\r\n\r\n    if( (task.id === parseInt(activeTask.id)) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive && (task.id === parseInt(activeTask.id)) ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        \r\n        return () => clearInterval(interval);\r\n        \r\n    }, [ isActive, seconds, minutes, hours, isUpdated, activeTask.id, task.id ]);\r\n\r\n\r\n    switch(task.id){\r\n        case activeTask.id:\r\n            return (\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: \r\n                        <span className='fw3 yellow b'> {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} \r\n                        </span>\r\n                    </h5>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h5>\r\n                </div>\r\n                {/* <div className=\"\">\r\n                    <button className='' onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n                    <button className='' onClick={reset}>Reset</button>\r\n                </div> */}\r\n                </div>\r\n            );\r\n    }\r\n};\r\n","import React from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, UpdateTaskStatus, SetActiveTask } from '../actions';\r\nimport { DONE, ACTIVE, PAUSED, PENDING } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskControls);\r\n\r\nfunction TaskControls({ task, status, updateTaskStatus, updateExp, changeItemID, setActiveTask, activeSince, activeTask }){\r\n\r\n    const prevTimeSpent = task.timeSpent;\r\n\r\n    function startTimer(){\r\n        setActiveTask(task);\r\n        task.status = ACTIVE;\r\n    }\r\n\r\n    function pauseTask(){\r\n        const dateNow = (new Date()).getTime();\r\n        setActiveTask({});\r\n        task.status = PAUSED;\r\n        task.timeSpent = prevTimeSpent + (dateNow - activeSince);\r\n    }\r\n\r\n    function markAsDone(){\r\n        const dateNow = (new Date()).getTime();\r\n        task.status = DONE;\r\n        task.timeSpent = prevTimeSpent + (dateNow - activeSince);\r\n        //TaskList.splice(position,1);\r\n        updateExp(task.exp);\r\n        changeItemID(task.id);\r\n    }\r\n\r\n    switch(task.status){\r\n        case ACTIVE:\r\n            console.log(activeTask.id === true)\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={pauseTask}>PAUSE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PAUSED:\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={startTimer}>CONTINUE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PENDING:\r\n            console.log(typeof activeTask)\r\n            console.log(activeTask.id)\r\n            if(activeTask.id === undefined) {\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                    </div>)\r\n            }   \r\n        default:\r\n            return <div></div>\r\n    }\r\n    // Different controls are displayed based on if a task is ongoing\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, UpdateTaskStatus, ShipItems } from '../actions';\r\nimport DatePicker from './DatePicker';\r\nimport Timer from './Timer';\r\nimport TaskControls from './TaskControls';\r\nimport { pushChanges  } from '../functions';\r\nimport { UPDATE } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items //state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);\r\n\r\n\r\nfunction TaskDetails({ id , changeItemID, updateExp, status, updateTaskStatus, activeSince, activeTask, db, shipItems }) {\r\n\r\n    const tasks = db.Tasks;\r\n    let task = {};\r\n    let position;\r\n\r\n    for (let i=0; i<tasks.length; i++){\r\n\r\n        if (tasks[i].id === id){\r\n           task = tasks[i];\r\n           position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n\r\n    const [ name, setName ] = useState(task.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(task.requiredContext);\r\n    const [ outcome, setoutcome ] = useState(task.outcome);\r\n    const [ dueDate, setdueDate ] = useState(task.dueDate);\r\n  //  const [ timeRequired, settimeRequired ] = useState(task.timeRequired);\r\n    const [ note, setnote ] = useState(task.note);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n    //const dateNow = (new Date()).getTime();\r\n\r\n    // if (task.id === activeTask.id) {\r\n    //     console.log(task.timeSpent)\r\n    //     console.log(dateNow)\r\n    //     task.timeSpent = task.timeSpent + (dateNow - activeSince)\r\n    //     console.log('aft '+ task.timeSpent)\r\n    //     console.log(dateNow)\r\n    // }\r\n\r\n    useEffect(() => {\r\n        setName(task.name);\r\n        setrequiredContext(task.requiredContext);\r\n        setoutcome(task.outcome);\r\n        setnote(task.note);\r\n        setdueDate(task.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [task.name, task.requiredContext, task.outcome, task.note, task.dueDate, task.timeSpent, activeSince, activeTask, task.id, db.lastUpdated ])\r\n\r\n    //console.log(task.id)\r\n    \r\n    // function markDate() {\r\n    //     db.lastUpdated = (new Date()).getTime();\r\n    //     setlastUpdated(db.lastUpdated);\r\n    // }\r\n\r\n    function updateDB(change) {\r\n        console.log(\"changes\")\r\n     \r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n        // if (oldValue !== newValue){\r\n        //     oldValue = newValue;\r\n        //     console.log(oldValue)\r\n        //     console.log(\"old time: \", lastUpdated);\r\n        //     db.lastUpdated = (new Date()).getTime();\r\n        //     setlastUpdated(db.lastUpdated);\r\n            \r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                    <h4 className='fw1 white'>{task.requiredContext}</h4> */}\r\n                    <input type='text' onChange={(e)=> {setName(e.target.value);} } onBlur={() => {task.name = name; updateDB();} } value={name} className='bn fw7 b white bg-transparent' />\r\n                    <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } onBlur={() =>{ task.requiredContext = requiredContext; updateDB(); }} value={requiredContext} className='fw1 white bn bg-transparent' />\r\n                </div>\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Outcome: </h5>\r\n                    {/* <h5 className='fw3 white'>{task.outcome} </h5> */}\r\n                    <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setoutcome(e.target.value);} } onBlur={() =>{ task.outcome = outcome; updateDB(); }} value={outcome} className='w-80 fw3 white bn bg-transparent' />\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    {/* <h5 className='fw3 white'>Due: {task.dueDate} </h5> */}\r\n                    <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                    <DatePicker item={task} dueDate={dueDate} />\r\n                    {/* <input type='date' defaultValue={dueDate} onChange={(e)=> {setdueDate(e.target.value);} } onBlur={() =>task.dueDate=dueDate} className='fw3 white bn bg-transparent' /> */}\r\n                    {/* <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } onBlur={() =>task.outcome=outcome} value={outcome} className='fw3 white bn bg-transparent' /> */}\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    {/* <h5 className='fw3 white'>Time Spent: {task.timeSpent}</h5> */}\r\n                    <Timer timeSpent={task.timeSpent} task={task} />\r\n                    <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5>\r\n                </div>\r\n                <h5 className='fw3 white'>Status: {task.status}</h5>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    {/* <p className='fw3 white'>{task.note}</p> */}\r\n                    <textarea rows=\"4\" cols=\"45\" onChange={(e)=> {setnote(e.target.value);} } onBlur={ () =>{ updateDB(); task.note = note }} value={note} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n                <TaskControls task={task} position={position} />\r\n                {/* <button className=\"button\" onClick={startTimer}>START</button>\r\n                <button className=\"button\" onClick={markAsDone}>DONE</button> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport List from './List';\r\nimport { MISSION } from '../constants';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, RestorePreviousState } from '../actions';\r\nimport { TaskList } from '../TaskList';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetails);\r\n\r\nfunction ProjectDetails({ project, view, changeItemID }) {\r\n    \r\n\r\n    function passKey(e) {\r\n        //Takes the events target and checks for title attribute \r\n        //If no title attribute, check parent node for title attribute\r\n        //If not found, repeat step 2\r\n        let targ = e.target;\r\n        checkForID(targ);\r\n        function checkForID (t) {\r\n            if (t.id) {\r\n                changeItemID(t.id);\r\n            } else {\r\n                t = t.parentNode;\r\n                checkForID (t);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTasks(){\r\n        let tasks = [];\r\n        if(project.taskList !== []){\r\n            for(let i=0; i<project.taskList.length; i++){\r\n                for(let j=0; j<TaskList.length; j++){\r\n                    if(project.taskList[i] === TaskList[j].id ){\r\n                        tasks.push(TaskList[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(tasks);\r\n        return tasks;\r\n    }\r\n\r\n    const projectTasks = getTasks();\r\n\r\n    return (\r\n        <div>\r\n            <div className='w-100 pa2 pb3' >\r\n                <h3 className='fw7 b white pb2'>{project.name}</h3>\r\n                <h4 className='fw1 white'>{project.type}</h4>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Outcome: </h5>\r\n                <h5 className='fw3 white'>{project.outcome} </h5>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Purpose: </h5>\r\n                <h5 className='fw3 white'>{project.purpose} </h5>\r\n            </div>\r\n            <div className='w-100 pl2 pb3 flex justify-between'>\r\n                <h5 className='fw3 white'>Due: {project.dueDate} </h5>\r\n                <h5 className='fw3 white'>Time Required: {project.timeRequired}</h5>\r\n            </div>\r\n            <div className='w-100 pl2 pb3 flex justify-between'>\r\n                <h5 className='fw3 white'>Status: {project.status}</h5>\r\n                <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5>\r\n            </div>\r\n            <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n            <div className='pa2'>\r\n                <List content={projectTasks} filter={MISSION} touchFunction={passKey} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, RestorePreviousState } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        previousItemID: state.values.previousItemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BackButton);\r\n\r\n\r\n\r\nfunction BackButton({ restorePreviousState, previousState, changeItemID, onTouch, previousView, previousItemID, id }) {\r\n\r\n    function goBack(){\r\n        //onTouch(previousView)\r\n        changeItemID(id);\r\n        \r\n    }\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={goBack}>\r\n            <h1 className=' white b f8 fw9 ma0'>&lt;</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.selectViewReducer.view,\r\n        previousView: state.selectViewReducer.previousView,\r\n        itemID: state.selectItemReducer.itemID,\r\n        exp: state.UpdateExpReducer.exp\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReferenceDetails);\r\n\r\n\r\nfunction ReferenceDetails({ id , changeItemID, updateExp }) {\r\n\r\n    const db = ReferenceList;\r\n    let reference = {};\r\n    //let position;\r\n\r\n    for (let i=0; i<db.length; i++){\r\n\r\n        if (db[i].id === id){\r\n           reference = db[i];\r\n           //position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    <h3 className='fw7 b white pb2'>{reference.name}</h3>\r\n                    <h5 className='fw3 white'>Status: {reference.status}</h5>\r\n                </div>\r\n                <h5 className='bb b--white pa2 fw3 white b' >Description</h5>\r\n                <div className='pa2'>\r\n                    <p className='fw3 white'>{reference.description}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PROJECT, TASK, INBOX_ITEM, REFERENCE } from '../constants';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport ItemDetails from '../components/ItemDetails';\r\nimport TaskDetails from '../components/TaskDetails';\r\nimport ProjectDetails from '../components/ProjectDetails';\r\nimport BackButton from '../components/BackButton';\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport ReferenceDetails from '../components/ReferenceDetails';\r\nimport { selectItem } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction Details( { db, itemID, touchFunction, updateExp, selectAnother }){\r\n    let itemType, item;\r\n    let prev = itemID;\r\n    let next = itemID;\r\n    const id = parseInt(itemID);\r\n    let content = db.Inbox.concat(db.Projects, db.Tasks)\r\n\r\n    for (let i=0; i<content.length; i++){\r\n\r\n        if (content[i].id === id){\r\n        itemType = content[i].type;\r\n        item = content[i];\r\n\r\n        if((content[i-1]) && content[i-1].type === itemType){\r\n            prev = content[i-1].id;\r\n        }\r\n        if((content[i+1]) && content[i+1].type === itemType){\r\n            next = content[i+1].id;\r\n        }\r\n        break;\r\n        }\r\n    }\r\n\r\n\r\n    switch(itemType) {\r\n        case PROJECT:\r\n            return (\r\n                <div className='w-100 center br1 pa3 ba b--black-10'>\r\n                    <BackButton id={0} />\r\n                    <ProjectDetails project={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case TASK:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 '>\r\n                    <BackButton id={0} />\r\n                    <h1 className='tc b gold'>Task</h1>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX_ITEM:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <BackButton id={0} />\r\n                    <h1 className='tc b gold'>Inbox Item</h1>\r\n                    <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                </div>        \r\n            )\r\n        case REFERENCE:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <BackButton id={0} />\r\n                    <h1 className='tc b gold'>REFERENCE</h1>\r\n                    <ReferenceDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 pb2'>\r\n                    <BackButton />\r\n                    <h1 className='tc b white'>Error</h1>\r\n                    <p>Item Not Found</p>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTaskTimer);\r\n\r\nfunction ActiveTaskTimer({changeItemID, activeSince, activeTask}) {\r\n    const dateNow = (new Date()).getTime();\r\n    const timeSpent = activeTask.timeSpent + (dateNow - activeSince);\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    if( (parseInt(activeTask.id) !== undefined) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [ isActive, seconds, minutes, hours ]);\r\n\r\n    function goToTask(event){\r\n        event.stopPropagation();\r\n        changeItemID(activeTask.id)\r\n    }\r\n\r\n    switch(activeTask.id){\r\n        case undefined:\r\n            return (\r\n                <div></div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className=\"\" onClick={goToTask} >\r\n                    <div className=\" pt3 \">\r\n                        <h2 className=\"pa1 \">CURRENT TASK</h2>\r\n                        <h2 className=\"pa1 red \">{activeTask.name}</h2>\r\n                        <h2 className='pa1 fw3 b red'>{hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h2>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport ActiveTaskTimer from './ActiveTaskTimer';\r\n//import React, { useState, useEffect } from 'react';\r\n\r\n// import { connect } from 'react-redux';\r\n// import { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         activeTask: state.SetActiveTaskReducer.activeTask,\r\n//         status: state.UpdateTaskStatusReducer.taskStatus,\r\n//         activeSince: state.SetActiveTaskReducer.activeSince,\r\n//         timeNow: state.SetActiveTaskReducer.timeNow\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateTaskStatus: (status) => {\r\n//             return dispatch(UpdateTaskStatus(status))\r\n//         },\r\n//         setActiveTask: (task) => {\r\n//             return dispatch(SetActiveTask(task))\r\n//         },\r\n//         changeItemID: (id) => {\r\n//             return dispatch(selectItem(id))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(StatsOverview);\r\n\r\nexport default function StatsOverview({ touchFunction, exp }) {\r\n\r\n    return (\r\n        <article className=\"h-100 w-100 center bg-white pa2 \" title = \"STATS\" onClick={touchFunction}>\r\n            <div className=\"tc w-100 h-100\">\r\n                <h1 className=\"f2 mb0 \">Amen Christ</h1>\r\n                <h3 className=\"f6 pa1 gray \">Engineer</h3>\r\n                <h4 className=\"f6 gray \">Exp: {exp}</h4>\r\n                <ActiveTaskTimer />\r\n            </div>\r\n        </article>  \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function TaskOverview({ touchFunction, tasks }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"TASKS\" onClick={touchFunction}> \r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Tasks</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ tasks.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function ProjectsOverview({ touchFunction, projects }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"PROJECTS\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Missions</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ projects.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function InboxOverview({ touchFunction , inbox }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white br1 ba b--black-10\" title=\"INBOX\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">{ inbox.length }</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">Inbox</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NEW_ITEM } from '../constants'\r\n\r\nexport default function NewItemTile({ touchFunction }) {\r\n    return (\r\n        <div className='bg-white h-100 center w-100 flex items-center justify-center' title={NEW_ITEM} onClick={touchFunction}>\r\n            <div className='tc '>\r\n                <h3 className='' >Add New Item</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { TODAY } from '../constants';\r\n\r\nexport default function TodaysMission({ touchFunction }) {\r\n\r\n    return (\r\n        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={TODAY} onClick={touchFunction}>\r\n            <h2 className='tc'>Today's<br />Mission</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StatsOverview from '../components/StatsOverview';\r\nimport TaskOverview from '../components/TasksOverview';\r\nimport ProjectsOverview from '../components/ProjectsOverview';\r\nimport InboxOverview from '../components/InboxOverview';\r\nimport { ChangeNav } from '../actions';\r\nimport {  CALENDAR, DAILY } from '../constants';\r\nimport './Home.css';\r\nimport NewItemTile from '../components/NewItemTile';\r\nimport TodaysMission from '../components/TodaysMission';\r\nimport { setNavValues  } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    \r\n    const { changeItemID, exp, db, changeNav, state } = props;\r\n\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 pa1' >\r\n            <div className='pa1 ph1 h-40 ba' title=\"STATS\">\r\n                <StatsOverview touchFunction={handleEvent} exp={exp} />\r\n            </div>\r\n            <div className=\"flex justify-center h-20 \">\r\n                <div className='w-50 pa1'>\r\n                    <ProjectsOverview touchFunction={handleEvent} projects={db.Projects} />\r\n                </div>\r\n                <div className='w-50 pa1'>\r\n                    <TaskOverview touchFunction={handleEvent} tasks={db.Tasks}/>\r\n                </div>\r\n            </div>\r\n            <div className='flex w-100 h-10 pa1'>\r\n                <NewItemTile touchFunction={handleEvent} />\r\n            </div>\r\n            <div className=\"flex justify-center h-30\">\r\n                <div className='w-50 h-100 pa1'>\r\n                    <div className=' w-100 h-50 pb1'>\r\n                        <TodaysMission touchFunction={handleEvent} gotoItem={changeItemID} />\r\n                    </div>\r\n                    <div className=' w-100 h-50 pt1'>\r\n                        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={DAILY} onClick={handleEvent}>\r\n                            <h2 className='tc'>Daily<br />Exercises</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=' w-50 h-100'>\r\n                    <div className=' w-100 h-50'>\r\n                        <div className=' h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' title={\"SOMEDAY\"} onClick={handleEvent} >\r\n                                <h4 className='tc'>Someday</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' title={'REFERENCES'} onClick={handleEvent}>\r\n                                <h4 className='tc'>References</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='w-100 h-50 flex'>\r\n                        <div className='w-50 h-100 pa1' >\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={CALENDAR} onClick={handleEvent}>\r\n                                <h4 className='tc'>Calendar</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='w-50 h-100 pa1'>\r\n                            <InboxOverview touchFunction={handleEvent} inbox={db.Inbox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\n\r\nexport default function Stats() {\r\n    return (\r\n        <div className='h-75 w-90 center bg-white br1 pa3 pa4-ns ba b--black-10'>\r\n            <h1 className='tc'>STATS</h1>\r\n        </div>       \r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, selectTitle,ChangeNav } from '../actions';\r\nimport { PROJECTS, STATS, TASKS, INBOX, TASK, MISSION, DAILY, REFERENCES, TODAY, NEW, SOMEDAY, CALENDAR } from '../constants';\r\nimport List from '../components/List';\r\nimport './Home.css';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport NewItem from '../components/NewItem';\r\nimport Details from './Details';\r\nimport Home from './Home';\r\nimport Stats from './Stats';\r\nimport { setNavValues } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        recordState: state.items.record.isFetching,\r\n        db: state.items.record.items,\r\n        record: state.items.record,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        changeNav: (navObj => {\r\n            return dispatch(ChangeNav(navObj))\r\n        })\r\n    }\r\n}\r\n\r\nfunction Main(props) {\r\n\r\n    const { state, title, view, itemID, changeItemID, previousView, updateExp, exp, db, record, changeNav } = props;\r\n    \r\n    let type;\r\n    switch(previousView) {\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case PROJECTS:\r\n            type = MISSION;\r\n        break;\r\n        default:\r\n    } \r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    const lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY, DAILY, SOMEDAY, CALENDAR ];\r\n\r\n    console.log('Title: ', title)\r\n    console.log('Item ID: ', itemID)\r\n    console.log('View: ', view)\r\n\r\n    if(record.isFetching){\r\n        return <div className=\"f5 fw4 white\">Loading...</div>;\r\n    } else {\r\n\r\n        let content;\r\n        switch(title) {\r\n            case TASKS:\r\n                content = db.Tasks;\r\n            break;\r\n            case PROJECTS:\r\n                content = db.Projects;\r\n            break;\r\n            case INBOX:\r\n                content = db.Inbox;\r\n                break;\r\n            default:\r\n                content = []\r\n        } \r\n\r\n        switch( true ) {\r\n            case parseInt(itemID) !== 0:\r\n                return (\r\n                    <div className='h-100 pa2 '>\r\n                        <div className='h-10'>\r\n                            <h5>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <Details selectAnother={changeItemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case (title === STATS):\r\n                return (\r\n                    <Stats />\r\n                )\r\n            case (lists.indexOf(title) !== -1) && view === 'LIST' :\r\n                if (parseInt(itemID) !== 0){\r\n                    return (\r\n                        <div className='h-100 pa2 '>\r\n                            <div className='h-10'>\r\n                                <h5>EXP: {exp}</h5>\r\n                            </div>\r\n                            <div className='h-90 pa1'>\r\n                                <Details selectAnother={changeItemID} />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div className='h-100'>\r\n                            <div className='h-10'>\r\n                                <h5>EXP: {exp}</h5>\r\n                            </div>\r\n                            <div className='h-90 pa1'>\r\n                                <div className='h-100 w-100 center pa1'>\r\n                                    <h1 className='tc b gold ma0 pb2'>{title}</h1>\r\n                                    <div className=' h-80 '>\r\n                                        <List content={content} />\r\n                                    </div>\r\n                                    <div className='h-10 flex w-100 content-end pa2'>\r\n                                        <NewItemButton touchFunction={handleEvent} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    )\r\n                }\r\n            case view === NEW:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className=' h-10'>\r\n                            <h5>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90'>\r\n                            <NewItem submitFunction={\"\"} view={type} updateExp={updateExp} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <Home />\r\n                );\r\n        }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from './actions';\r\nimport NavBar from './containers/NavBar';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        }\r\n    }\r\n}\r\n\r\nfunction App2(props) {\r\n\r\n    const { onTouch } = props;\r\n\r\n    \r\n    return (\r\n        <div className='app'>\r\n            <div className='home-container'>\r\n                <Main />\r\n            </div>\r\n            <NavBar touchFunction={onTouch} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(App2);\r\n\r\n\r\n//https://cdn.internetmultimediaonline.org/241F21/loveworldlive/ixilrao9.m3u8","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SELECT_VIEW, OVERVIEW, SELECT_ITEM, UPDATE_EXP, TASKS, INBOX, REFERENCES, TODAY,\r\n    RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, SET_ACTIVE_TASK, HOME, SELECT_TITLE, PROJECTS, LIST, NEW_ITEM, NEW, CHANGE_NAV\r\n} from \"./constants\"\r\n\r\nimport { SELECT_RECORD, INVALIDATE_RECORD, REQUEST_ITEMS, RECEIVE_ITEMS, PACK_ITEMS, DELIVER_ITEMS } from './actions';\r\n\r\nconst initialState = {\r\n    title: HOME, \r\n    itemID: 0,\r\n    view: OVERVIEW,\r\n    previousTitle: HOME,\r\n    previousItemID: 0,\r\n    previousView: OVERVIEW,\r\n    previousState: {},\r\n    taskStatus: '',\r\n    agent: '',\r\n    record: {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        receivedAt: 0,\r\n        items: {}\r\n    },\r\n    latestUpdate: {\r\n        items: {},\r\n        isShipping: false,\r\n        deliveredAt: 0\r\n    },\r\n    exp: 0,\r\n    db: { lastUpdated: 0}\r\n}\r\n\r\n// const selectTitleReducer = (state=initialState, action={}) => {\r\n//     switch(action.type){\r\n//         case SELECT_TITLE:\r\n//             let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, DUE_TODAY]\r\n//             let view = OVERVIEW;\r\n//             if (lists.indexOf(action.payload) !== -1) {\r\n//                 view = LIST;\r\n//             }\r\n//             return Object.assign({}, state, {title: action.payload, view: view, previousTitle: state.title, previousState: state});\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\nconst values = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SELECT_TITLE:\r\n            let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY ]\r\n            let view = OVERVIEW;\r\n            let ID = 0;\r\n            if (lists.indexOf(action.payload) !== -1) {\r\n                view = LIST;\r\n            } \r\n            if (((lists.indexOf(action.payload) !== -1) && state.view === NEW) || (action.payload === NEW_ITEM) ) {\r\n                view = \"NEW\"\r\n            }\r\n            return Object.assign({}, state, {title: action.payload, view: view, itemID:ID, previousTitle: state.title, previousState: state});\r\n        case CHANGE_NAV:\r\n            return Object.assign({}, state, {title: action.payload.title, view: action.payload.view, itemID:action.payload.ID, previousTitle: state.title, previousState: state});\r\n        case SELECT_ITEM:\r\n            return Object.assign({}, state, {itemID: action.payload, previousItemID: state.itemID, previousState: state});\r\n        case SELECT_VIEW:\r\n            return Object.assign({}, state, {view: action.payload, previousView: state.view, previousState: state});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst RestorePreviousStateReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case RESTORE_PREVIOUS_STATE:\r\n            if(state.previousState === {}) {\r\n                break;\r\n            } else {\r\n                return Object.assign({}, state.previousState );\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateExpReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_EXP:\r\n            return Object.assign({}, state, {exp: (state.exp + action.payload)});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateTaskStatusReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_TASK_STATUS:\r\n            return Object.assign({}, state, {taskStatus: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialActiveTask = {\r\n    activeTask: {},\r\n    activeSince: null,\r\n    timeNow: (new Date()).getTime()\r\n}\r\n\r\nconst SetActiveTaskReducer = (state=initialActiveTask, action={}) => {\r\n    switch(action.type){\r\n        case SET_ACTIVE_TASK:\r\n            return Object.assign({}, state, {activeTask: action.payload, activeSince: (new Date()).getTime() });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n//let serverLink = \"http://localhost:5000\";// \"https://secret-citadel-16777.herokuapp.com/\"\r\n\r\n\r\n//////////////////////////////////////////////// 17.10.2020 async app upgrade\r\n\r\n/// State shape\r\n\r\n\r\nfunction SelectRecordReducer(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_RECORD:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction items(\r\n  state = initialState,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_RECORD:\r\n      return Object.assign({}, state, { records: {didInvalidate: true} })\r\n    case REQUEST_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: true,\r\n          didInvalidate: false\r\n        }\r\n      })\r\n    case RECEIVE_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: false,\r\n          didInvalidate: false,\r\n          receivedAt: action.receivedAt,\r\n          items: action.items\r\n        }\r\n      })\r\n    case PACK_ITEMS:\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: true,\r\n                deliveredAt: 0\r\n            },\r\n        })\r\n    case DELIVER_ITEMS:\r\n        console.log(\"Special Delivery: \", action.payload)\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: false,\r\n                deliveredAt: action.deliveredAt\r\n            },\r\n        })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({r\n    values, UpdateExpReducer, RestorePreviousStateReducer, \r\n    UpdateTaskStatusReducer, SetActiveTaskReducer, \r\n    SelectRecordReducer, items\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './tachyonBoost.css';\r\nimport rootReducer from './reducers';\r\nimport { SelectRecord, FetchItems } from './actions';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\n// store\r\n//   .dispatch(fetchPostsIfNeeded('reactjs'))\r\n//   .then(() => console.log(store.getState()))\r\n\r\nstore.dispatch(SelectRecord('reactjs')) ;\r\nstore.dispatch(FetchItems('reactjs'));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}