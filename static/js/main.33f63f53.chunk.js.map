{"version":3,"sources":["assets/trash1600.png","constants.js","actions.js","components/HomeButton.js","components/ProjectsButton.js","components/TasksButton.js","components/InboxButton.js","components/StatsButton.js","functions.js","containers/NavBar.js","components/ListItem.js","components/Scroll.js","components/List.js","components/NewItemButton.js","TaskList.js","components/NewTask.js","ProjectList.js","components/NewMission.js","components/NewItem.js","components/QuestionAndOptions.js","components/QuestionAndInput.js","classes.js","ReferenceList.js","components/DatePicker.js","containers/Processor.js","components/PrevItemButton.js","components/NextItemButton.js","components/ItemDetails.js","components/Timer.js","components/TaskControls.js","components/TaskDetails.js","components/ProjectDetails.js","components/BackButton.js","components/ReferenceDetails.js","components/TrashButton.js","containers/Details.js","components/ActiveTaskTimer.js","components/StatsOverview.js","components/TasksOverview.js","components/ProjectsOverview.js","components/InboxOverview.js","components/NewItemTile.js","components/TodaysMission.js","containers/Home.js","containers/Stats.js","containers/Main.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","PROJECTS","TASKS","INBOX","PROJECT","TASK","ADD","LOW","ChangeNav","navObj","type","payload","selectTitle","title","selectItem","itemID","selectView","view","UpdateExp","exp","RestorePreviousState","previousState","UpdateTaskStatus","status","SetActiveTask","task","FetchItems","record","dispatch","RequestItems","fetch","serverLink","then","response","json","console","log","items","receivedAt","Date","now","ReceiveItems","ShipItems","agent","PackItems","method","mode","headers","body","JSON","stringify","deliveredAt","DeliverItems","catch","error","HomeButton","touchFunction","className","onClick","ProjectsButton","TasksButton","InboxButton","StatsButton","setNavValues","e","navChanger","state","navTitle","navID","navView","targ","target","checkForTitle","t","parentNode","checkForID","id","parseInt","indexOf","nav","ID","connect","values","changeNav","props","handleEvent","ListItem","item","name","dueDate","toISOString","substr","taskList","length","requiredContext","entryDate","Scroll","style","overflowY","overflowX","children","db","changeItemID","content","missionTasks","map","entry","i","key","dueToday","filter","todaysTasks","dailyEx","frequency","dailyTasks","filteredContent","ListItems","changeView","TaskList","timeSpent","priority","outcomeRecordID","outcome","note","timeRequired","associatedProject","requirements","onTouch","shipItems","updateExp","today","useState","setName","setOutcome","setRequiredContext","setNote","setDueDate","setPriority","setFrequency","setRequirements","setAssociatedProject","Task","d","this","getTime","onSubmit","event","unshift","action","list","pushDate","pushChanges","preventDefault","placeholder","value","onChange","htmlFor","min","disabled","defaultValue","ProjectList","output","outputRecordID","timeRemaining","nextAction","purpose","setPurpose","Mission","principles","m","changeTitle","submitFunction","InboxItems","Inbox","Item","description","submitNewItem","displayTypeForm","QuestionAndOptions","question","yes","no","QuestionandInput","answer","setAnswer","isDelegatable","associatedProjectID","Project","setInterval","timeNow","ReferenceList","DatePicker","date","setdate","changeDate","setchangeDate","useEffect","onBlur","nextItemID","itemIndex","Projects","Tasks","ProcessedItems","Processed","isActionable","setIsActionable","setTaskName","isMultistep","setIsMultistep","isDoneInFive","setIsDoneInFive","setIsDelegatable","step","setStep","setNextID","isDoneInaYear","setIsDoneInaYear","newProject","setNewProject","newTask","setNewTask","assignedAgent","setAssignedAgent","processNextItem","makeNewTask","theOutcome","asProjID","updateStatus","ammendList","itemndx","dbList","splice","proceed","addToSomedayList","proj","makeNewProject","PrevItemButton","selectAnother","prevID","currentID","NextItemButton","nextID","indx","readyToProcess","setReadyToProcess","activeTask","SetActiveTaskReducer","UpdateTaskStatusReducer","taskStatus","activeSince","updateTaskStatus","setActiveTask","dateNow","s","secs","mins","hrs","seconds","setSeconds","minutes","setminutes","hours","sethours","isActive","setIsActive","isUpdated","setIsUpdated","interval","clearInterval","toLocaleString","undefined","minimumIntegerDigits","UpdateExpReducer","prevTimeSpent","startTimer","markAsDone","previousView","position","tasks","setrequiredContext","setoutcome","setdueDate","setnote","lastUpdated","updateDB","change","rows","cols","TaskControls","RestorePreviousStateReducer","restorePreviousState","project","projectTasks","j","push","getTasks","previousItemID","selectViewReducer","selectItemReducer","reference","currentlist","currentItem","Trash","src","trashCan","alt","itemType","prev","next","concat","BackButton","TrashButton","ProjectDetails","TaskDetails","ReferenceDetails","stopPropagation","StatsOverview","ActiveTaskTimer","TaskOverview","ProjectsOverview","projects","InboxOverview","inbox","NewItemTile","TodaysMission","gotoItem","Stats","recordState","isFetching","lists","NewItem","Boolean","window","location","hostname","match","initialState","previousTitle","didInvalidate","latestUpdate","isShipping","initialActiveTask","rootReducer","combineReducers","Object","assign","SelectRecordReducer","records","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.33f63f53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash1600.4a1c4989.png\";","// Actions\r\nexport const SELECT_VIEW = 'SELECT_VIEW';\r\nexport const SELECT_TITLE = 'SELECT_TITLE';\r\nexport const UPDATE_EXP = 'UPDATE_EXP';\r\nexport const SELECT_PROJECT = 'SELECT_PROJECT';\r\nexport const SELECT_TASK = 'SELECT_TASK';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const RESTORE_PREVIOUS_STATE = 'RESTORE_PREVIOUS_STATE';\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS';\r\nexport const SET_ACTIVE_TASK = 'SET_ACTIVE_TASK';\r\nexport const RETRIEVE_DB = 'RETRIEVE_DB';\r\nexport const REFRESH_DB = 'REFRESH_DB';\r\nexport const CHANGE_NAV = 'CHANGE_NAV';\r\n\r\n//\r\nexport const HOME = 'HOME';\r\nexport const MISSIONS = 'MISSIONS';\r\nexport const PROJECTS = 'PROJECTS';\r\nexport const TODAY = 'TODAY';\r\nexport const STATS = 'STATS';\r\nexport const SKILLS = 'SKILLS';\r\nexport const TASKS = 'TASKS';\r\nexport const INBOX = 'INBOX';\r\nexport const PROJECT = 'PROJECT';\r\nexport const TASK = 'TASK';\r\nexport const INBOX_ITEM = 'INBOX_ITEM';\r\nexport const NEW_ITEM = 'NEW_ITEM';\r\nexport const REFERENCES = 'REFERENCES';\r\nexport const REFERENCE = 'REFERENCE';\r\nexport const MISSION = 'MISSION';\r\nexport const CALENDAR = 'CALENDAR';\r\nexport const REMINDERS = 'REMINDERS';\r\nexport const SOMEDAY = 'SOMEDAY';\r\nexport const TRASH = 'TRASH';\r\n\r\n//VIEWS\r\nexport const OVERVIEW = 'OVERVIEW';\r\nexport const LIST = 'LIST';\r\nexport const DETAILS = 'DETAILS';\r\nexport const NEW = 'NEW';\r\n\r\n//TITLES\r\n// export const INBOX = 'INBOX';\r\n// export const TASKS = 'TASKS';\r\n\r\n//Actions to push\r\nexport const ADD = 'ADD';\r\nexport const REMOVE = 'REMOVE';\r\nexport const UPDATE = 'UPDATE';\r\n\r\n\r\n// Status constants\r\n//STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\nexport const UNPLANNED = 'UNPLANNED';\r\nexport const UNPROCESSED = 'UNPROCESSED';\r\nexport const PROCESSED = 'PROCESSED';\r\nexport const PENDING = 'PENDING';\r\nexport const DELEGATION_PENDING = 'DELEGATION_PENDING';\r\nexport const STARTED = 'STARTED';\r\nexport const DONE = 'DONE';\r\nexport const ONGOING = 'ONGOING';\r\nexport const COMPLETE = 'COMPLETE';\r\nexport const PAUSED = 'PAUSED';\r\nexport const ACTIVE = 'ACTIVE';\r\n//\r\n\r\nexport const LOW = 'LOW';\r\nexport const MEDIUM = 'MEDIUM';\r\nexport const HIGH = 'HIGH';\r\n\r\n\r\n\r\n//For frequency/recurring\r\nexport const NONE = 'NONE';\r\nexport const DAILY = 'DAILY';\r\nexport const WEEKLY = 'WEEKLY';\r\nexport const MONTHLY = 'MONTHLY';\r\nexport const FORTHNIGHTLY = 'FORTHNIGHTLY';\r\nexport const THREE_MONTHS = 'THREE_MONTHS';\r\nexport const SIX_MONTHS = 'SIX_MONTHS';\r\nexport const YEARLY = 'YEARLY';\r\n//","import { \r\n    SELECT_VIEW, SELECT_PROJECT, SELECT_TASK, SELECT_TITLE, SELECT_ITEM, \r\n    UPDATE_EXP, RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, \r\n    SET_ACTIVE_TASK, RETRIEVE_DB, REFRESH_DB, CHANGE_NAV\r\n  } from './constants';\r\n\r\nexport const ChangeNav = (navObj) => {\r\n  return {\r\n    type: CHANGE_NAV,\r\n    payload: navObj\r\n  }\r\n}\r\nexport const selectTitle = (title) => {\r\n  return {\r\n  type: SELECT_TITLE,\r\n  payload: title\r\n}};\r\n\r\nexport const selectItem = (itemID) => {\r\n  return {\r\n  type: SELECT_ITEM,\r\n  payload: itemID\r\n}};\r\n\r\nexport const selectView = (view) => {\r\n  return {\r\n  type: SELECT_VIEW,\r\n  payload: view\r\n}};\r\n\r\nexport const selectProject = (projectID) => {\r\n    return {\r\n    type: SELECT_PROJECT,\r\n    payload: projectID\r\n}};\r\n\r\nexport const selectTask = (taskID) => {\r\n    return {\r\n    type: SELECT_TASK,\r\n    payload: taskID\r\n}};\r\n\r\nexport const UpdateExp = (exp) => {\r\n    return {\r\n    type: UPDATE_EXP,\r\n    payload: exp\r\n}};\r\n\r\nexport const RestorePreviousState = (previousState) => {\r\n    return {\r\n    type: RESTORE_PREVIOUS_STATE,\r\n    payload: previousState\r\n}};\r\n\r\nexport const UpdateTaskStatus = (status) => {\r\n    return {\r\n    type: UPDATE_TASK_STATUS,\r\n    payload: status\r\n}};\r\n\r\nexport const SetActiveTask = (task) => {\r\n    return {\r\n    type: SET_ACTIVE_TASK,\r\n    payload: task\r\n}};\r\n\r\nexport const RetrieveDB = (database) => {\r\n    return {\r\n        type: RETRIEVE_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\nexport const RefreshDB = (database) => {\r\n    return {\r\n        type: REFRESH_DB,\r\n        payload: database\r\n    }\r\n}\r\n\r\n////////////////////\r\n\r\n// ASYNC REQUESTS\r\n\r\nexport const SELECT_RECORD = 'SELECT_RECORD';\r\n\r\nexport function SelectRecord(record) {\r\n  return {\r\n    type: SELECT_RECORD,\r\n    payload: record\r\n  }\r\n}\r\n\r\nexport const INVALIDATE_RECORD = 'INVALIDATE_RECORD';\r\n\r\nexport function InvalidateRecord(record) {\r\n  return {\r\n    type: INVALIDATE_RECORD,\r\n    record\r\n  }\r\n}\r\n\r\nexport const REQUEST_ITEMS = 'REQUEST_ITEMS';\r\n\r\nexport function RequestItems(record) {\r\n  return {\r\n    type: REQUEST_ITEMS,\r\n    record\r\n  }\r\n}\r\n\r\nexport const RECEIVE_ITEMS = 'RECEIVE_ITEMS';\r\n\r\nexport function ReceiveItems(record, json) {\r\n  return {\r\n    type: RECEIVE_ITEMS,\r\n    record,\r\n    items: json,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////\r\n\r\n//import fetch from 'cross-fetch'\r\n\r\n\r\n\r\nexport function FetchItems(record) {\r\n  return dispatch => {\r\n    dispatch(RequestItems(record))\r\n    return fetch(serverLink) //https://secret-citadel-16777.herokuapp.com/\r\n      .then(response => response.json())\r\n      .then(json => { console.log(json); dispatch(ReceiveItems(record, json))})\r\n  }\r\n}\r\n\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\n\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  // Note that the function also receives getState()\r\n  // which lets you choose what to dispatch next.\r\n\r\n  // This is useful for avoiding a network request if\r\n  // a cached value is already available.\r\n\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      // Dispatch a thunk from thunk!\r\n      return dispatch(FetchItems(subreddit))\r\n    } else {\r\n      // Let the calling code know there's nothing to wait for.\r\n      return Promise.resolve()\r\n    }\r\n  }\r\n}\r\n\r\n////////////////////////////////////\r\n\r\nexport const PACK_ITEMS = 'PACK_ITEMS';\r\n\r\nexport function PackItems(items) {\r\n  return {\r\n    type: PACK_ITEMS,\r\n    payload: items\r\n  }\r\n}\r\n\r\nexport const DELIVER_ITEMS = 'DELIVER_ITEMS';\r\n\r\nexport function DeliverItems(agent, json) { // record/agent/destination\r\n  return {\r\n    type: DELIVER_ITEMS,\r\n    agent,\r\n    payload: json,\r\n    deliveredAt: Date.now()\r\n  }\r\n}\r\n\r\n// const testItem = {\r\n//   content: \"this is a test item fom the front end\"\r\n// }\r\n\r\nconst agent1 = \"amen\"\r\n\r\n\r\nexport function ShipItems(items, agent, record) {\r\n  return dispatch => {\r\n    dispatch(PackItems(items))\r\n    console.log(\"packed items: \", items)\r\n    return fetch(`${serverLink}${agent1}`, { \r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(items)\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => dispatch(DeliverItems(agent, json)))\r\n      .catch((error) => {\r\n        console.log(\"Error: \", error);\r\n      })\r\n  }\r\n}\r\n\r\nconst serverLink = \"https://secret-citadel-16777.herokuapp.com/\";\r\n//const serverLink2 = \"http://localhost:5000/\";","import React from 'react';\r\n\r\nexport default function HomeButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"HOME\" onClick={touchFunction}>\r\n            <h3 className='tc'>H</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function ProjectsButton({touchFunction}) {\r\n    return (\r\n        <div className='w-20 center bg-white ba b--black-10 flex items-center justify-center' title=\"PROJECTS\" onClick={touchFunction}>\r\n            <h3 className='tc'>M</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function TasksButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"TASKS\" onClick={touchFunction}>\r\n            <h3 className='tc'>T</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function InboxButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"INBOX\" onClick={touchFunction}>\r\n            <h3 className='tc'>I</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function StatsButton({ touchFunction }) {\r\n    return (\r\n        <div className='w-20 center bg-white b--black-10 ba flex items-center justify-center' title=\"STATS\" onClick={touchFunction}>\r\n            <h3 className='tc'>S</h3>\r\n        </div>       \r\n    )\r\n}\r\n\r\n","/// For all the extra functions required in multiple places\r\n\r\nimport { CALENDAR, DAILY, DETAILS, HOME, INBOX, PROJECTS, REFERENCES, REMINDERS, SOMEDAY, STATS, TASKS, TODAY, TRASH } from \"./constants\";\r\n\r\nexport function passTitle(e, ChangeTitleFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n}\r\n\r\n// function passKey(e, changeIDFunction) {\r\n//     //Takes the events target and checks for title attribute \r\n//     //If no title attribute, check parent node for title attribute\r\n//     //If not found, repeat step 2\r\n//     let targ = e.target;\r\n//     checkForID(targ);\r\n//     function checkForID (t) {\r\n//         if (t.id) {\r\n//             changeIDFunction(t.id);\r\n//         } else {\r\n//             t = t.parentNode;\r\n//             checkForID (t);   \r\n//         }\r\n//     }\r\n// }\r\n\r\nexport function passTitleAndID(e, ChangeTitleFunction, changeIDFunction) {\r\n    let targ = e.target;\r\n    checkForTitle(targ)\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            ChangeTitleFunction(t.title);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            changeIDFunction(t.id);\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n}\r\n\r\nexport function setNavValues(e, navChanger, state){\r\n    let targ = e.target;\r\n    let navTitle;\r\n    checkForTitle(targ);\r\n    function checkForTitle (t) {\r\n        if (t.title) {\r\n            navTitle = t.title;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForTitle (t);   \r\n        }\r\n    }\r\n    let navID;\r\n    checkForID(targ);\r\n    function checkForID (t) {\r\n        if (t.id) {\r\n            navID = t.id;\r\n        } else {\r\n            t = t.parentNode;\r\n            checkForID (t);   \r\n        }\r\n    }\r\n    \r\n    let navView;\r\n    navTitle === \"STATS\" ? navView = \"OVERVIEW\" : navView = \"LIST\";\r\n    navTitle === \"NEW_ITEM\" ? navView = \"NEW\" : navView = \"LIST\";\r\n    console.log(\"Nav ID is a \", typeof navID)\r\n    console.log(\"Nav ID parsed= \", parseInt(navID))\r\n   \r\n    //typeof navID !== \"number\" ? navID = 0 : navID = navID;\r\n    !(parseInt(navID) >= 0) ? navID = 0 : navID = navID;\r\n\r\n    const titles = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY, DAILY, SOMEDAY, TRASH, CALENDAR, REMINDERS, STATS, HOME ]\r\n    if (titles.indexOf(navTitle) === -1){\r\n        navTitle = state.title;\r\n    }\r\n    console.log(\"this is state: \", state)\r\n    console.log(\"this is navID: \", navID)\r\n    if (parseInt(state.itemID) === 0 && parseInt(navID) > 0 ) {\r\n        navView = DETAILS;\r\n    }\r\n\r\n    const nav = {\r\n        title: navTitle,\r\n        view: navView,\r\n        ID: navID\r\n    }\r\n    console.log(nav)\r\n    navChanger(nav);\r\n}\r\n\r\n\r\nexport function pushChanges(action, item, list, shippingFunction){\r\n    let state = {\r\n        action: action,\r\n        list: list,\r\n        item: item,\r\n        pushDate: (new Date()).getTime()\r\n    }\r\n    shippingFunction(state);\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeButton from '../components/HomeButton';\r\nimport ProjectsButton from '../components/ProjectsButton';\r\nimport TasksButton from '../components/TasksButton';\r\nimport InboxButton from '../components/InboxButton';\r\nimport StatsButton from '../components/StatsButton';\r\nimport { ChangeNav } from '../actions';\r\nimport { setNavValues } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NavBar(props) {\r\n\r\n    const { changeNav, state } = props;\r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='navbar center flex'>\r\n            <HomeButton touchFunction={handleEvent} />\r\n            <InboxButton touchFunction={handleEvent} />\r\n            <TasksButton touchFunction={handleEvent} />\r\n            <ProjectsButton touchFunction={handleEvent} />\r\n            <StatsButton touchFunction={handleEvent} />\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { PROJECT, TASK, INBOX_ITEM } from '../constants';\r\n\r\n\r\nexport default function ListItem( { touchFunction, item }){\r\n\r\n    switch(item.type){\r\n        case PROJECT:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80 '>\r\n                        <p className='fw7 b white pb2'>{item.name}</p>\r\n                        <p className='fw3 white'>Due: {(new Date(item.dueDate)).toISOString().substr(0, 10)}. Tasks: {item.taskList.length}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case TASK:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{item.requiredContext}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className='gold fw7 b'>EXP</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX_ITEM:\r\n            return (\r\n                <div className='ba pa2 listItem w-100 flex justify-between h-20 items-center b--grey' id={item.id} onClick={touchFunction}>\r\n                    <div className='w-80'>\r\n                    <p className='fw7 b white pb2'>{item.name}</p>\r\n                    <p className='fw3 white'>{(new Date(item.entryDate)).toISOString().substr(0, 10)}</p>\r\n                    </div>\r\n                    <div className='pa2' >\r\n                        <p className='fw7 b bg-white pa2'>PROCESS</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='bb' title='new item' onClick={touchFunction}>\r\n                    <h3>Enter New Item</h3>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function Scroll(props) {\r\n    return (\r\n        <div className='h-100' style={{overflowY: 'scroll', overflowX: 'hidden'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, ChangeNav } from '../actions';\r\nimport ListItem from './ListItem';\r\nimport Scroll from './Scroll';\r\nimport { TASK, TASKS, PROJECTS, PROJECT, INBOX_ITEM, TODAY, DAILY, DONE, REFERENCE, REFERENCES } from '../constants';\r\nimport { setNavValues  } from '../functions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/////////////////////////////////////////////////\r\n\r\n\r\nfunction List({ content, changeItemID, title, state, changeNav }) {\r\n\r\n    // function passKey(e, changeIDFunction) {\r\n    //     //Takes the events target and checks for title attribute \r\n    //     //If no title attribute, check parent node for title attribute\r\n    //     //If not found, repeat step 2\r\n    //     let targ = e.target;\r\n    //     checkForID(targ);\r\n    //     function checkForID (t) {\r\n    //         if (t.id) {\r\n    //             changeIDFunction(t.id);\r\n    //         } else {\r\n    //             t = t.parentNode;\r\n    //             checkForID (t);   \r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    function handleEvent(e ) {\r\n        //passKey(e, changeItemID);\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n\r\n    // A Mission's Tasklist\r\n    const missionTasks = content.map((entry,i ) => {\r\n        return <ListItem item={content[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n    // Today's Mission\r\n    const dueToday = content.filter((entry) => ( \r\n        ( entry.dueDate === new Date().toISOString().substr(0, 10) ) && entry.status !== DONE ) );\r\n    const todaysTasks = dueToday.map((entry,i ) => {\r\n        return <ListItem item={dueToday[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n    /////\r\n\r\n    // Daily exercises\r\n    const dailyEx = content.filter((entry) => (entry.frequency === DAILY ));\r\n    const dailyTasks = dailyEx.map((entry, i) => {\r\n        return <ListItem item={dailyEx[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n    ///////\r\n\r\n    // Project, Task, Inbox and Reference Lists \r\n    let type = '';\r\n    switch(title){\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case PROJECTS:\r\n            type = PROJECT;\r\n            break;\r\n        case REFERENCES:\r\n            type = REFERENCE;\r\n            break;\r\n        default:\r\n            type = INBOX_ITEM;\r\n    }\r\n\r\n    const filteredContent = content.filter((entry) => (entry.type === type))\r\n\r\n    const ListItems = filteredContent.map((entry,i) => {\r\n        return <ListItem item={filteredContent[i]} touchFunction={handleEvent} key={content[i].id}/>\r\n    })\r\n\r\n\r\n    switch(title){\r\n        case TODAY:\r\n            return (\r\n                <Scroll>\r\n                    {todaysTasks}\r\n                </Scroll>\r\n            )\r\n        case DAILY:\r\n            return (\r\n                <Scroll>\r\n                    {dailyTasks}\r\n                </Scroll>\r\n            )\r\n        case PROJECTS:\r\n            return (\r\n                <Scroll>\r\n                    {missionTasks}\r\n                </Scroll>\r\n            )\r\n        default:\r\n            return (\r\n                <Scroll>\r\n                    {ListItems}\r\n                </Scroll>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from '../actions';\r\nimport { NEW } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeView: (view) => {\r\n            return dispatch(selectView(view))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewItemButton({ changeView }) {\r\n\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={ () => changeView(NEW)}>\r\n            <h1 className=' white b f8 fw9 ma0'>+</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItemButton);","import { TASK, LOW, DAILY } from \"./constants\";\r\n\r\nexport const TaskList = [\r\n    {\r\n        type: TASK,\r\n        id: 1589657001522,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: 0,\r\n        timeSpent: 600000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 5 ',\r\n        outcome: 'Bread in the fridge',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: new Date().toISOString().substr(0, 10), //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001530\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001523,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: 0,\r\n        timeSpent: 300000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 4 ',\r\n        outcome: 'Bread in the fridge',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001523, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001530\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001524,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: DAILY,\r\n        timeSpent: 150000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 3 ',\r\n        outcome: 'Bread in the fridge',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001526, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001531\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001525,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: DAILY,\r\n        timeSpent: 400000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread 2',\r\n        outcome: 'recordable product of task completion',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001526, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001532\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    },\r\n    {\r\n        type: TASK,\r\n        id: 1589657001526,\r\n        entryDate: 20,\r\n        status: 'PENDING' ,//PENDING, STARTED, UNFINISHED, DEFERED, NOT_STARTED, COMPLETED\r\n        frequency: 0,\r\n        timeSpent: 500000,\r\n        priority : LOW,\r\n        outcomeRecordID: 0, //Assigned on task completion\r\n        name: 'Buy bread',\r\n        outcome: 'recordable product of task completion',\r\n        requiredContext: 'At the Supermarket',\r\n        note: 'Brown bread preferably',\r\n        dueDate: 1589657001526, //gmt timestamp\r\n        timeRequired: 900, //In seconds\r\n        associatedProject: {\r\n            name: 'Project',\r\n            id: 1589657001533\r\n        },\r\n        requirements: '£1 minimum',\r\n        exp: 10\r\n    }\r\n]\r\n\r\n/*\r\nthis.type = INBOX_ITEM;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.frequency = ONCE;\r\n        this.timeSpent = 0;\r\n        this.name = name;\r\n        this.outcome = '';\r\n        this.requiredContext = '';\r\n        this.description = description;\r\n        this.requirements = '';\r\n*/","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PENDING, LOW, TASK, MEDIUM, HIGH } from '../constants';\r\nimport { TaskList } from '../TaskList';\r\nimport { selectView, selectItem,ShipItems } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewTask({ changeItemID, updateExp, shipItems }) {\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    const [ associatedProject, setAssociatedProject ] = useState({});\r\n\r\n    class Task{\r\n        constructor() {\r\n            const d= new Date();\r\n\r\n            setFrequency(0);\r\n            setAssociatedProject({});\r\n\r\n            this.type = TASK;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.status = PENDING;\r\n            this.priority = priority;\r\n            this.frequency = frequency;\r\n            this.timeSpent = 0;\r\n            this.outcomeRecordID = 0;\r\n            this.name = name;\r\n            this.outcome = outcome;\r\n            this.requiredContext = requiredContext;\r\n            this.note = note;\r\n            this.dueDate = dueDate;\r\n            this.timeRequired = 0;\r\n            this.requirements = requirements;\r\n            this.associatedProject = associatedProject;\r\n            this.exp = 10;\r\n        }\r\n    }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        let t = new Task();\r\n        console.log(t);\r\n        TaskList.unshift(t);\r\n        pushChanges(\"ADD\", t, \"Tasks\");\r\n        updateExp(5);\r\n        changeItemID(t.id);\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc'>NEW TASK</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={TASK}>\r\n                <input type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea placeholder='Required Context' value={requiredContext} onChange={(e) => setRequiredContext(e.target.value)} />\r\n                <textarea placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label htmlFor=\"due date\" className=''>Due Date:</label>\r\n                <input id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask);","import { PROJECT, UNPLANNED } from \"./constants\";\r\n\r\nexport const ProjectList = [\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001530,\r\n        exp: 50,\r\n        name: \"Upload Church service\",\r\n        note: 'About Project 1',\r\n        outcome: \"Last week's church service available to watch on Barking Church's website\",\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds (Average Time it has historically taken for the whole project to be completed by you or someone else)\r\n        timeRemaining: 2629746,\r\n        status: UNPLANNED, //STARTED, ONGOING, NOT_STARTED, COMPLETED, UNPLANNED, UNFINISHED\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action',\r\n            output: 'recordable product of task completion' //information, document etc\r\n        },\r\n        taskList: [ 1589657001522, 1589657001523 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001531,\r\n        exp: 50,\r\n        name: 'Project 2',\r\n        note: 'About Project 2',\r\n        outcome: 'What done looks like for Project 2',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: UNPLANNED,\r\n        nextAction: {\r\n            id: 17,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001524 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001532,\r\n        exp: 50,\r\n        name: 'Project 3',\r\n        note: 'About Project 3',\r\n        outcome: 'What done looks like for Project 3',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001525 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001533,\r\n        exp: 50,\r\n        name: 'Project 4',\r\n        note: 'About Project 4',\r\n        outcome: 'What done looks like for Project 4',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: [ 1589657001526 ]\r\n    },\r\n    {\r\n        type: PROJECT,\r\n        id: 1589657001534,\r\n        exp: 50,\r\n        name: 'Project 5',\r\n        note: 'About Project 5',\r\n        outcome: 'What done looks like for Project 5',\r\n        output: 'Recordable proof of completed project',\r\n        outputRecordID: null, //Assigned on completion\r\n        dueDate: 1591012800, //gmt timestamp\r\n        timeRequired: 2629746, //In seconds\r\n        timeRemaining: 2629746,\r\n        status: 'NOT_STARTED',\r\n        nextAction: {\r\n            id: 16,\r\n            task: 'First physical action'\r\n        },\r\n        taskList: []\r\n    }\r\n]","import React, { useState } from 'react';\r\nimport { PENDING, LOW, MEDIUM, HIGH, MISSION, PROJECT } from '../constants';\r\nimport { ProjectList } from '../ProjectList';\r\nimport { selectView, selectItem } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\nfunction NewMission({ changeItemID, updateExp }) {\r\n\r\n    let today = new Date().toISOString().substr(0, 10);\r\n\r\n    const [ name, setName ] = useState('');\r\n    const [ purpose, setPurpose ] = useState('');\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ note, setNote ] = useState('');\r\n    const [ dueDate, setDueDate ] = useState(today);\r\n    const [ priority, setPriority ] = useState('');\r\n    const [ frequency, setFrequency ] = useState(0);\r\n    const [ requirements, setRequirements ] = useState('');\r\n    //const [ taskList, setTaskList ] = useState([]);\r\n\r\n\r\n    class Mission{\r\n        constructor() {\r\n            const d= new Date();\r\n\r\n            this.type = PROJECT;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.status = PENDING;\r\n            this.priority = priority;\r\n            this.frequency = frequency;\r\n            this.timeSpent = 0;\r\n            this.outcomeRecordID = 0;\r\n            this.name = name;\r\n            this.purpose = purpose;\r\n            this.outcome = outcome;\r\n            this.principles = '';\r\n            this.note = note;\r\n            this.dueDate = dueDate;\r\n            this.timeRequired = 0;\r\n            this.requirements = requirements;\r\n            this.taskList = [];\r\n            this.exp = 50;\r\n        }\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        \r\n        let m = new Mission();\r\n        console.log(m);\r\n        // console.log(m.id);\r\n        ProjectList.unshift(m);\r\n        updateExp(5);\r\n        changeItemID(m.id);\r\n        event.preventDefault();\r\n        setFrequency(0);\r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 '>\r\n            <h1 className='tc'>New Mission</h1>\r\n            <form onSubmit={submitNewItem} className='flex flex-column' title={MISSION}>\r\n                <input type='text' placeholder='Name' value={name} onChange={(e)=> setName(e.target.value)} />\r\n                <input type='text' placeholder='Outcome' value={outcome} onChange={(e) => setOutcome(e.target.value)} />\r\n                <textarea placeholder='What is the purpose of the mission?' value={purpose} onChange={(e) => setPurpose(e.target.value)} />\r\n                <textarea placeholder='Note' value={note} onChange={(e) => setNote(e.target.value)} />\r\n                <label htmlFor=\"due date\" className=''>Due Date:</label>\r\n                <input id='due date' type='date' min={today} value={dueDate} onChange={(e) => setDueDate(e.target.value)} />\r\n                <select id=\"priority\" value={priority} onChange={(e)=> setPriority(e.target.value)}>\r\n                    <option value=\"\" disabled defaultValue>Priority</option>\r\n                    <option value={LOW}>Low</option>\r\n                    <option value={MEDIUM}>Medium</option>\r\n                    <option value={HIGH}>High</option>\r\n                </select>\r\n                <textarea placeholder='Requirements' value={requirements} onChange={(e) => setRequirements(e.target.value)} />\r\n                {/* <input type='text' placeholder='Frequency' value={frequency} onChange={(e) => setFrequency(e.target.value)} />\r\n                <input type='text' placeholder='Associated project name' value={associatedProject} onChange={(e) => setAssociatedProject(e.target.value)} /> */}\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewMission);","import React, { useState } from 'react';\r\nimport { INBOX_ITEM, TASK, INBOX, UNPROCESSED, MISSION, PROJECTS, TASKS } from '../constants';\r\n//import  InboxItems  from '../InboxItems'\r\nimport NewTask from './NewTask';\r\nimport NewMission from './NewMission';\r\nimport { selectItem, ShipItems, selectTitle } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewItem);\r\n\r\n\r\nfunction NewItem({ submitFunction, title, updateExp, changeItemID, shipItems, db, changeTitle }) {\r\n\r\n    // const [ type, setType ] = useState(title);\r\n    const [ name, setName ] = useState('Enter item name');\r\n    \r\n    const InboxItems = db.Inbox;\r\n    //console.log(InboxItems);\r\n\r\n    function reset(){\r\n        //changeTitle(INBOX);\r\n        setName('Enter item name');\r\n        // setDescription('');\r\n    }\r\n\r\n    class Item{\r\n        constructor(name,description='None') {\r\n            const d= new Date();\r\n    \r\n            this.type = INBOX_ITEM;\r\n            this.id = d.getTime();\r\n            this.entryDate = d.getTime();\r\n            this.name = name;\r\n            this.description = '';\r\n            this.status = UNPROCESSED;\r\n    \r\n        }\r\n    }\r\n\r\n    function submitNewItem(event) {\r\n        if(name !== 'Enter item name' && name !== '' ){\r\n            //console.log('name is set')\r\n            let i = new Item(name);\r\n            console.log(i)\r\n            InboxItems.unshift(i);\r\n            pushChanges(\"ADD\", i, \"Inbox\");\r\n            console.log(\"new inbox: \", InboxItems)\r\n            updateExp(5);\r\n            changeItemID(i.id);\r\n            //submitFunction(event);\r\n            reset();\r\n            event.preventDefault();\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n    \r\n    function displayTypeForm(){\r\n        switch(true) {\r\n            case title === TASKS:\r\n                return <NewTask updateExp={updateExp} />\r\n            case title === PROJECTS:\r\n                return <NewMission updateExp={updateExp} />\r\n            default:\r\n                return (\r\n                    <div className='h-100 w-100 center ba b--black-10 '>\r\n                        <h1 className='tc gold b'>NEW ITEM</h1>\r\n                        <form onSubmit={submitNewItem} className='flex flex-column' title={INBOX}>\r\n                            <input type='text' onChange={(e)=> setName(e.target.value)} placeholder='Enter item name...' className='pa2 mb2' />\r\n                            {/* <textarea value={description} onChange={(e) => setDescription(e.target.value)} /> */}\r\n                            <input type='submit' value='submit' />\r\n                        </form>\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='pa1 w-100'>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(INBOX)}>INBOX</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(TASKS)}>TASK</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(PROJECTS)}>MISSION</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>REF</button>\r\n            <button className=\"button w-20\" onClick={(e)=> changeTitle(e.target.value)}>FINANCE</button>\r\n            {displayTypeForm()}\r\n            {/* <label htmlFor=\"type\" className=''>Type:</label>\r\n            <select id=\"type\" value={type} onChange={(e)=> setType(e.target.value)}>\r\n                <option value=\"INBOX_ITEM\">INBOX</option>\r\n                <option value=\"TASK\">TASK</option>\r\n                <option value=\"MISSION\">MISSION</option>\r\n                <option value=\"REFERENCE\">REFERENCE</option>\r\n                <option value=\"EXPENSE\">EXPENSE</option>\r\n                <option value=\"INCOME\">INCOME</option>\r\n            </select> */}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function QuestionAndOptions({ question, yes, no }) {\r\n    return (\r\n        <div className='h-100 w-100 br1 pa3 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <div>\r\n                <button className=\"button\" onClick={yes}>YES</button>\r\n                <button className=\"button\" onClick={no} >NO</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function QuestionandInput({ question, submitFunction }) {\r\n\r\n    const [ answer, setAnswer ] = useState('');\r\n\r\n    function submit(event) {\r\n\r\n        if(answer !==''){\r\n            submitFunction(answer);\r\n            setAnswer('');\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column'>\r\n            <h2 className='white tc pb2'>{question}</h2>\r\n            <form onSubmit={submit}>\r\n                <input type='text' value={answer} onChange={(e)=> setAnswer(e.target.value)} />\r\n                <input type='submit' value='submit' />\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {TASK, PENDING, PROJECT, UNPLANNED } from './constants';\r\n\r\nexport class Task{\r\n    constructor(name,outcome, isDelegatable, requiredContext, associatedProjectID) {\r\n        const d = new Date();\r\n        this.type = TASK;\r\n        this.id = d.getTime();\r\n        this.entryDate = d.getTime();\r\n        this.status = PENDING;\r\n        this.priority = 'NONE';\r\n        this.frequency = 0;\r\n        this.timeSpent = 0;\r\n        this.outcomeRecordID = 0;\r\n        this.name = name;\r\n        this.outcome = outcome;\r\n        this.requiredContext = requiredContext;\r\n        this.note = '';\r\n        this.dueDate = (new Date()).toISOString().substr(0, 10);\r\n        this.timeRequired = 0;\r\n        this.timeRemaining = 0;\r\n        this.requirements = '';\r\n        this.associatedProjectID = 0;\r\n        this.exp = 10;\r\n        this.isDelegatable = isDelegatable;\r\n        this.description = '';\r\n        this.agent = '';\r\n        \r\n    }\r\n}\r\n\r\nexport class Project{\r\n    constructor(outcome, description) {\r\n        const d = new Date();\r\n        this.type = PROJECT;        \r\n        this.id = d.getTime();\r\n        this.name = outcome;\r\n        this.description = '';\r\n        this.outputRecordID = null;\r\n        this.dueDate = (new Date((d.getTime() + 7776000000))).toISOString().substr(0, 10); // 3 months from the date the project is planned \r\n        this.timeRequired = 7776000000;\r\n        this.timeRemaining = setInterval(()=> {\r\n            let timeNow = (new Date()).getTime();\r\n            return (this.dueDate - timeNow)\r\n        }, 1);\r\n        this.status = UNPLANNED;\r\n        this.nextAction = {};\r\n        this.taskList = [];\r\n    }\r\n}","export const ReferenceList = []","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function DatePicker({ item, dueDate }){\r\n    \r\n    const [ date, setdate ] = useState((new Date(dueDate)).toISOString().substr(0, 10));\r\n    const [ changeDate, setchangeDate ] = useState(false);\r\n    const changeD = false;\r\n\r\n\r\n    useEffect(() => {\r\n        setdate((new Date(dueDate)).toISOString().substr(0, 10));\r\n        setchangeDate(false);\r\n    }, [dueDate, changeD])\r\n\r\n    switch(changeDate){\r\n        case true:\r\n            return (\r\n                <div>\r\n                    <input type='date' defaultValue={date} onChange={(e)=> {setdate(e.target.value);} } onBlur={() =>{item.dueDate=date; setchangeDate(false)}} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n                )\r\n        default:\r\n            if (dueDate === \"ASAP\"){\r\n                return (\r\n                    <div>\r\n                        <h5 className='fw3 white' onClick={() => setchangeDate(true)}>Due: {dueDate} </h5>\r\n                        <div>\r\n                            <button className=\"button\" onClick={() => { setdate(\"ASAP\"); }}>DUE ASAP</button>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n            }\r\n            return (\r\n            <h5 className='fw3 white' onClick={() => setchangeDate(true)}>Due: {new Date(item.dueDate).toISOString().substr(0, 10)} </h5>\r\n            )\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport QuestionAndOptions from '../components/QuestionAndOptions';\r\nimport QuestionandInput from '../components/QuestionAndInput';\r\nimport { Task, Project } from '../classes';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport { PROJECT, UNPLANNED, PROCESSED, TASK, PENDING, UNPROCESSED, REFERENCE, ADD, UPDATE, REMOVE, CALENDAR, REFERENCES, SOMEDAY, PROJECTS, TASKS } from '../constants';\r\nimport { selectView, selectItem, ChangeNav } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems } from '../actions';\r\nimport DatePicker from '../components/DatePicker';\r\nimport NewTask from '../components/NewTask';\r\n\r\n\r\n//shipItems(items, agent, record)\r\n//\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Processor({ nextItemID, item, touchFunction, changeItemID, itemIndex, db, shipItems, changeNav }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n    const ProcessedItems = db.Processed;\r\n\r\n    \r\n\r\n    const [ outcome, setOutcome ] = useState('');\r\n    const [ requiredContext, setRequiredContext ] = useState('');\r\n    const [ isActionable, setIsActionable ] = useState(null);\r\n    const [ taskName, setTaskName ] = useState('');\r\n    const [ isMultistep, setIsMultistep ] = useState(null);\r\n    const [ isDoneInFive, setIsDoneInFive ] = useState(null);\r\n    const [ isDelegatable, setIsDelegatable ] = useState(null);\r\n    const [ step, setStep ] = useState(0);\r\n    const [ nextID, setNextID ] = useState(0);\r\n    const [ isDoneInaYear, setIsDoneInaYear ] = useState(null);\r\n    const [ newProjectID, setNewProjectID ] = useState(0);\r\n    const [ newTaskID, setNewTaskID ] = useState(0);\r\n    const [ newProject, setNewProject ] = useState(null);\r\n    const [ newTask, setNewTask ] = useState(null);\r\n    const [ assignedAgent, setAssignedAgent ] = useState(null);\r\n    const [ dueDate, setDueDate ] = useState(null);\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function processNextItem(e){\r\n        setStep(0);\r\n        //touchFunction(e);\r\n    }\r\n\r\n    function makeNewProject(){\r\n        let proj = new Project( outcome );\r\n        setNewProject(proj);\r\n        //ProjectList.unshift(proj);\r\n        // pushChanges(ADD, proj, \"Projects\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        // pushChanges(REMOVE, item, \"Inbox\");\r\n        setNextID(proj.id);\r\n    }\r\n\r\n    function makeNewTask(name){\r\n        let theOutcome, asProjID;\r\n        if (isMultistep === true) {\r\n            theOutcome = '';\r\n            asProjID = newProject.id;\r\n        }\r\n        let task = new Task(name, theOutcome, isDelegatable, requiredContext, asProjID);\r\n        setNewTask(task);\r\n        //TaskList.unshift(task);\r\n        console.log(\"new task = \",task);\r\n        //pushChanges(ADD, task, \"Tasks\");\r\n        updateStatus();\r\n        //InboxItems.splice(itemIndex,1);\r\n        //pushChanges(REMOVE, item, \"Inbox\");\r\n        //setNewTaskID(task.id);  \r\n        setNextID(task.id);  \r\n    }\r\n\r\n    function ammendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case ProjectList:\r\n                dbList = \"Projects\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case REFERENCES:\r\n                dbList = \"References\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            case SOMEDAY:\r\n                dbList = \"Someday\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                list.splice(itemndx, 1);\r\n                pushChanges(REMOVE, item, dbList);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                pushChanges(ADD, item, dbList);\r\n            break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    function updateStatus() {\r\n        item.status = PROCESSED;\r\n        pushChanges(UPDATE, item, \"Inbox\");\r\n        ProcessedItems.unshift(item);\r\n        InboxItems.splice(itemIndex,1);\r\n    }\r\n\r\n    function proceed() {\r\n        setStep((step+1));\r\n    }\r\n\r\n    function refresh(){\r\n        changeItemID(item.id);\r\n    }\r\n    \r\n    if (item.status === UNPROCESSED && step === 0){\r\n        proceed();\r\n    }\r\n\r\n    function addToReferences(){\r\n        item.type = REFERENCE;\r\n        updateStatus();\r\n        InboxItems.splice(itemIndex,1);\r\n        ReferenceList.unshift(item);\r\n        pushChanges(ADD, item, \"References\");\r\n    }\r\n\r\n    function addToSomedayList(){\r\n        InboxItems.splice(itemIndex,1);\r\n        ReferenceList.unshift(item);\r\n        pushChanges(ADD, item, \"References\");\r\n    }\r\n\r\n    // if ( step === 10 ){\r\n    //     ammendList(ADD, TaskList, newTask, itemIndex);\r\n    //     ammendList(REMOVE,InboxItems, item, itemIndex);\r\n    // }\r\n\r\n    let nav;\r\n    if (isMultistep){\r\n        nav = {\r\n            title: PROJECTS,\r\n            view: \"DETAILS\",\r\n            ID: newProject.id\r\n        }\r\n    } else if(isMultistep === false){\r\n        nav = {\r\n            title: TASKS,\r\n            view: \"DETAILS\",\r\n            ID: newTask.id\r\n        }\r\n    }\r\n\r\n    switch(true) {\r\n        case ( step === 1 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Is this Actionable?' \r\n                    yes={() => { setIsActionable(true); proceed() }} \r\n                    no={() => { setIsActionable(false); addToReferences(); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isActionable === false && step === 2 ):\r\n        // Added to references\r\n        return (\r\n            <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                <h3 className='white tc pb2'>Item was added to References</h3>\r\n                <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                <button className=\"button\" id={nextItemID} onClick={() => changeItemID(item.id)} >VIEW ITEM</button>\r\n            </div>\r\n        )\r\n        case ( isActionable === true && step === 2 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the desired outcome?\" submitFunction={(answer) => { setOutcome(answer); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( step === 3 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the outcome be reached with just one task?' \r\n                    yes={() => { setIsMultistep(false); proceed(); } } \r\n                    no={() => { setIsMultistep(true); proceed();  makeNewProject(); }} />\r\n                </div>\r\n            )\r\n            \r\n        case ( isMultistep === false && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the task?\" \r\n                    submitFunction={(answer) => {\r\n                        setTaskName(answer);\r\n                        makeNewTask(answer);\r\n                        proceed(); \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 4 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"What's the first task?\" \r\n                    submitFunction={(answer) => { \r\n                        setTaskName(answer);\r\n                        makeNewTask(answer); \r\n                        proceed(); \r\n                        }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { \r\n                        setIsDoneInaYear(true); \r\n                        TaskList.unshift(newTask);\r\n                        newProject.taskList.unshift(newTask.id); \r\n                        ammendList(ADD, ProjectList, newProject, 0); proceed() \r\n                    }} \r\n                    no={() => { \r\n                        setIsDoneInaYear(false); \r\n                        newProject.taskList.unshift(newTask.id); \r\n                        TaskList.unshift(newTask);\r\n                        addToSomedayList(newProject);\r\n                        updateStatus(); \r\n                        proceed() \r\n                    }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 5 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can the desired outcome be reached within the next 12 months?' \r\n                    yes={() => { setIsDoneInaYear(true); proceed() }} \r\n                    no={() => { setIsDoneInaYear(false); addToSomedayList(newTask); updateStatus(); proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === true ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW MISSION</button>\r\n                </div>\r\n            )\r\n        case ( isMultistep === true && step === 6 && isDoneInaYear === false ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Mission has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === false ):\r\n            // New project was added and page refreshed\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                    <h3 className='white tc pb2'>A new Task has been added to the Someday List</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                    {/* <button className=\"button\" id={nextItemID} onClick={() => changeItemID(nextID)} >VIEW PROJECT</button> */}\r\n                </div>\r\n            )\r\n        case ( isMultistep === false && step === 6 && isDoneInaYear === true ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can it be done now in 5 minutes or less?' \r\n                    yes={() => { setIsDoneInFive(true); proceed() }} \r\n                    no={() => { setIsDoneInFive(false); proceed() }} />\r\n                </div>\r\n            )\r\n        case (isDoneInFive === true && step === 7):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <h3>LET'S DO IT!</h3>\r\n                    <h2>TIMER</h2>\r\n                    <p>Once timer is done, you get the option to mark as completed. You also get the option ot defer the action.</p>\r\n                    <button className=\"button\" onClick={() => { updateStatus(); setStep(0); refresh() }} >DONE</button>\r\n                </div>\r\n            )\r\n        case ( isDoneInFive === false && step === 7 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionAndOptions question='Can this task be delegated?' \r\n                    yes={() => { setIsDelegatable(true); proceed(); }} \r\n                    no={() => { setIsDelegatable(false); proceed(); }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === true && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Who would you like to assign this task to?\" \r\n                    submitFunction={(answer) => { setAssignedAgent(answer); newTask.agent = assignedAgent; proceed() }} />\r\n                </div>\r\n            )\r\n        case ( isDelegatable === false && step === 8 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <QuestionandInput question=\"Where should this task be done?\" \r\n                    submitFunction={(answer) => { \r\n                        setRequiredContext(answer); \r\n                        newTask.requiredContext = answer;\r\n                        ammendList(ADD, TaskList, newTask, 0)\r\n                        proceed(); }} />\r\n                </div>\r\n            )\r\n        // case ( isDelegatable === false && step === 9 ):\r\n        //     return (\r\n        //         <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n        //             <h2>By when should this task to be done</h2>\r\n        //             <DatePicker item={newTask} dueDate={newTask.dueDate} />\r\n        //             <div>\r\n        //                 <button className=\"button\" onClick={() => { setDueDate(\"ASAP\"); console.log(newTask); proceed(); }}>ASAP</button>\r\n        //                 <button className=\"button\" onClick={() => { setDueDate(newTask.dueDate); console.log(newTask); proceed(); }} >SAVE DATE</button>\r\n        //             </div>\r\n        //         </div>\r\n        //     )\r\n        case ( step === 9 ):\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show flex items-center flex-column' >\r\n                    <h3 className='white tc pb2'>A new Task has been added</h3>\r\n                    <button className=\"button\" id={nextItemID} onClick={ processNextItem } >PROCESS NEXT ITEM</button>\r\n                    <button className=\"button\" id={nextItemID} onClick={() => changeNav(nav)} >VIEW TASK</button>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 pa3 ba b--black-10 show ' >\r\n                    <button className=\"button\" id={nextItemID} onClick={processNextItem} >PROCESS NEXT ITEM</button>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Processor);","import React from 'react';\r\n\r\nexport default function PrevItemButton({ selectAnother, prevID, currentID }){\r\n\r\n    if(currentID !== prevID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(prevID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Prev</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NextItemButton({ selectAnother, nextID, currentID }){\r\n    if(currentID !== nextID){\r\n        return (\r\n            <div className='whiteB w3 h3 flex items-center justify-center' onClick={() => selectAnother(nextID)}>\r\n                <h2 className=' white b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className='ba bw1 b--silver w3 h3 flex items-center justify-center' >\r\n                <h2 className=' gray b f8 fw9 ma0'>Next</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Processor from '../containers/Processor'\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport NewItemButton from '../components/NewItemButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        db: state.items.record.items//state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nfunction ItemDetails({ id, touchFunction, selectAnother, prevID, nextID, db }) {\r\n\r\n\r\n    const InboxItems = db.Inbox\r\n\r\n    const [ readyToProcess, setReadyToProcess ] = useState(false);\r\n\r\n    let item = {};\r\n    let nextItemID = null;\r\n    let indx;\r\n    for (let i=0; i<InboxItems.length; i++){\r\n\r\n        if (InboxItems[i].id === id){\r\n           item = InboxItems[i];\r\n           indx = i;\r\n           if (InboxItems[i+1]) {\r\n               nextItemID = InboxItems[i+1].id;\r\n           } else {\r\n            nextItemID = 0;\r\n           }\r\n           break;\r\n        }    \r\n    }\r\n\r\n    console.log(item);\r\n\r\n    if (item.name) {\r\n        switch(readyToProcess){\r\n        case false:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    {/* <h5 className='white pb2'>Status: {item.status} </h5> */}\r\n                    <div className='h-100 w-100 center br1 pa3 ba b--black-10 flex items-center flex-column show ' >\r\n                        <button onClick={()=> setReadyToProcess(true)} >PROCESS THIS</button>\r\n                    </div>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prevID} currentID={id} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={nextID} currentID={id} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div >\r\n                    <h5 className='white b pb2'>Name: {item.name}</h5>\r\n                    <h5 className='white pb2'>Entry Date: {(new Date(item.entryDate)).toISOString().substr(0, 10)} </h5>\r\n                    <br />\r\n                    <Processor item={item} nextItemID={nextItemID} touchFunction={touchFunction} itemIndex={indx} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemDetails);","import React, { useState, useEffect } from 'react';\r\nimport './Timer.css';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\r\n\r\nfunction Timer({ timeSpent, task, activeTask, activeSince, timeNow }){\r\n\r\n\r\n    if (task.id === parseInt(activeTask.id) ){\r\n        const dateNow = (new Date()).getTime();\r\n        timeSpent = timeSpent + (dateNow - activeSince);\r\n    }\r\n    console.log('time spent = '+timeSpent)\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isUpdated, setIsUpdated] = useState(false);\r\n    \r\n\r\n    // let totalTimeSpent = (seconds*1000)+(minutes*60*1000)+(hours*3600*1000); //Time spent in milliseconds\r\n\r\n\r\n\r\n    // function reset() {\r\n    //     setSeconds(0);\r\n    //     setminutes(0);\r\n    //     sethours(0);\r\n    //     setIsActive(false);\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        setSeconds(secs);\r\n        setminutes(mins);\r\n        sethours(hrs);\r\n        if (task.id !== parseInt(activeTask.id) ){\r\n            setIsUpdated(false);\r\n            setIsActive(false)\r\n        }\r\n    },[ secs, mins, hrs, activeTask.timeSpent, activeTask.id, activeSince, task.id ])\r\n\r\n\r\n    if( (task.id === parseInt(activeTask.id)) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive && (task.id === parseInt(activeTask.id)) ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        \r\n        return () => clearInterval(interval);\r\n        \r\n    }, [ isActive, seconds, minutes, hours, isUpdated, activeTask.id, task.id ]);\r\n\r\n\r\n    switch(task.id){\r\n        case activeTask.id:\r\n            return (\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: \r\n                        <span className='fw3 yellow b'> {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} \r\n                        </span>\r\n                    </h5>\r\n                </div>\r\n            );\r\n        default:\r\n            return (\r\n                <div className=\"\">\r\n                <div className=\"\">\r\n                    <h5 className='fw3 white b'>Time Spent: {hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                    {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h5>\r\n                </div>\r\n                {/* <div className=\"\">\r\n                    <button className='' onClick={toggle}>{isActive ? 'Pause' : 'Start'}</button>\r\n                    <button className='' onClick={reset}>Reset</button>\r\n                </div> */}\r\n                </div>\r\n            );\r\n    }\r\n};\r\n","import React from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, UpdateTaskStatus, SetActiveTask } from '../actions';\r\nimport { DONE, ACTIVE, PAUSED, PENDING } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskControls);\r\n\r\nfunction TaskControls({ task, status, updateTaskStatus, updateExp, changeItemID, setActiveTask, activeSince, activeTask }){\r\n\r\n    const prevTimeSpent = task.timeSpent;\r\n\r\n    function startTimer(){\r\n        setActiveTask(task);\r\n        task.status = ACTIVE;\r\n    }\r\n\r\n    function pauseTask(){\r\n        const dateNow = (new Date()).getTime();\r\n        setActiveTask({});\r\n        task.status = PAUSED;\r\n        task.timeSpent = prevTimeSpent + (dateNow - activeSince);\r\n    }\r\n\r\n    function markAsDone(){\r\n        const dateNow = (new Date()).getTime();\r\n        task.status = DONE;\r\n        task.timeSpent = prevTimeSpent + (dateNow - activeSince);\r\n        //TaskList.splice(position,1);\r\n        updateExp(task.exp);\r\n        changeItemID(task.id);\r\n    }\r\n\r\n    switch(task.status){\r\n        case ACTIVE:\r\n            console.log(activeTask.id === true)\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={pauseTask}>PAUSE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PAUSED:\r\n            return (\r\n                <div className='flex justify-center'>\r\n                    <button className=\"button\" onClick={startTimer}>CONTINUE</button>\r\n                    <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                </div>\r\n            )\r\n        case PENDING:\r\n            console.log(typeof activeTask)\r\n            console.log(activeTask.id)\r\n            if(activeTask.id === undefined) {\r\n                return (\r\n                    <div className='flex justify-center'>\r\n                        <button className=\"button\" onClick={startTimer}>START</button>\r\n                        <button className=\"button\" onClick={markAsDone}>MARK DONE</button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div>\r\n                    </div>)\r\n            }   \r\n        default:\r\n            return <div></div>\r\n    }\r\n    // Different controls are displayed based on if a task is ongoing\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n//import { TaskList } from '../TaskList';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, UpdateTaskStatus, ShipItems } from '../actions';\r\nimport DatePicker from './DatePicker';\r\nimport Timer from './Timer';\r\nimport TaskControls from './TaskControls';\r\nimport { pushChanges  } from '../functions';\r\nimport { UPDATE } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        db: state.items.record.items //state.RetrieveDBReducer.db\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskDetails);\r\n\r\n\r\nfunction TaskDetails({ id , changeItemID, updateExp, status, updateTaskStatus, activeSince, activeTask, db, shipItems }) {\r\n\r\n    const ProjectList = db.Projects;\r\n    const tasks = db.Tasks;\r\n    let task = {};\r\n    let position;\r\n\r\n    for (let i=0; i<tasks.length; i++){\r\n\r\n        if (tasks[i].id === id){\r\n           task = tasks[i];\r\n           position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n    let associatedProject;\r\n    if(task.associatedProjectID === 0){\r\n        associatedProject.name = \"Getting Things Done\";\r\n    } else if (task.associatedProjectID > 0){\r\n        for(let i=0; i<ProjectList.length; i++){\r\n            if(parseInt(task.associatedProjectID) === parseInt(ProjectList[i].id)){\r\n                associatedProject = ProjectList[i];\r\n                console.log('associated project name: ', associatedProject.name)\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // console.log(task)\r\n    // console.log('associated project ID: ', task.associatedProjectID)\r\n    // console.log('associated project name: ', associatedProject.name)\r\n\r\n    const [ name, setName ] = useState(task.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(task.requiredContext);\r\n    const [ outcome, setoutcome ] = useState(task.outcome);\r\n    const [ dueDate, setdueDate ] = useState(task.dueDate);\r\n  //  const [ timeRequired, settimeRequired ] = useState(task.timeRequired);\r\n    const [ note, setnote ] = useState(task.note);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n    //const [ associatedProjectName, setAssociatedProjectName ] = useState(associatedProject.name);\r\n\r\n\r\n    useEffect(() => {\r\n        setName(task.name);\r\n        setrequiredContext(task.requiredContext);\r\n        setoutcome(task.outcome);\r\n        setnote(task.note);\r\n        setdueDate(task.dueDate);\r\n        console.log(\"Last Updated: \", db.lastUpdated)\r\n    }, [task.name, task.requiredContext, task.outcome, task.note, task.dueDate, task.timeSpent, activeSince, activeTask, task.id, db.lastUpdated ])\r\n\r\n\r\n\r\n    function updateDB(change) {\r\n        console.log(\"changes\")\r\n     \r\n        pushChanges(UPDATE, task, \"Tasks\", shipItems);\r\n        // if (oldValue !== newValue){\r\n        //     oldValue = newValue;\r\n        //     console.log(oldValue)\r\n        //     console.log(\"old time: \", lastUpdated);\r\n        //     db.lastUpdated = (new Date()).getTime();\r\n        //     setlastUpdated(db.lastUpdated);\r\n            \r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className='' >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    {/* <h3 className='fw7 b white pb2'>{task.name}</h3>\r\n                    <h4 className='fw1 white'>{task.requiredContext}</h4> */}\r\n\r\n                    <input type='text' onChange={(e)=> {setName(e.target.value);} } onBlur={() => {task.name = name; updateDB();} } \r\n                    value={name} className='bn fw7 b white bg-transparent' />\r\n\r\n                    <h4 className='fw1 white'>{associatedProject.name}</h4>\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Location: </h5>\r\n                    <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } \r\n                    onBlur={() =>{ task.requiredContext = requiredContext; updateDB(); }} \r\n                    value={requiredContext} className='fw1 white bn bg-transparent' />\r\n                </div>\r\n\r\n                <div className='w-100 pl2 pb3'>\r\n                    <h5 className='fw3 white'>Outcome: </h5>\r\n                    {/* <h5 className='fw3 white'>{task.outcome} </h5> */}\r\n                    <textarea rows=\"2\" cols=\"45\" onChange={(e)=> {setoutcome(e.target.value);} } onBlur={() =>{ task.outcome = outcome; updateDB(); }} value={outcome} className='w-80 fw3 white bn bg-transparent' />\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    {/* <h5 className='fw3 white'>Due: {task.dueDate} </h5> */}\r\n                    <h5 className='fw3 white'>Time Required: {task.timeRequired}</h5>\r\n                    <DatePicker item={task} dueDate={dueDate} />\r\n                    {/* <input type='date' defaultValue={dueDate} onChange={(e)=> {setdueDate(e.target.value);} } onBlur={() =>task.dueDate=dueDate} className='fw3 white bn bg-transparent' /> */}\r\n                    {/* <input type='text' onChange={(e)=> {setrequiredContext(e.target.value);} } onBlur={() =>task.outcome=outcome} value={outcome} className='fw3 white bn bg-transparent' /> */}\r\n                </div>\r\n                <div className='w-100 pl2 pb3 flex justify-between'>\r\n                    {/* <h5 className='fw3 white'>Time Spent: {task.timeSpent}</h5> */}\r\n                    <Timer timeSpent={task.timeSpent} task={task} />\r\n                    <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5>\r\n                </div>\r\n                <h5 className='fw3 white'>Status: {task.status}</h5>\r\n                <h5 className='bb b--white pa2 fw3 white b' >NOTE</h5>\r\n                <div className='pa2'>\r\n                    {/* <p className='fw3 white'>{task.note}</p> */}\r\n                    <textarea rows=\"4\" cols=\"45\" onChange={(e)=> {setnote(e.target.value);} } onBlur={ () =>{ updateDB(); task.note = note }} value={note} className='fw3 white bn bg-transparent' />\r\n                </div>\r\n                <TaskControls task={task} position={position} />\r\n                {/* <button className=\"button\" onClick={startTimer}>START</button>\r\n                <button className=\"button\" onClick={markAsDone}>DONE</button> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState} from 'react';\r\nimport List from './List';\r\nimport { MISSION } from '../constants';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp, RestorePreviousState } from '../actions';\r\n// import { TaskList } from '../TaskList';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectDetails);\r\n\r\nfunction ProjectDetails({ project, view, changeItemID, db }) {\r\n    console.log('project: ', project);\r\n\r\n    const TaskList = db.Tasks;\r\n\r\n    function passKey(e) {\r\n        //Takes the events target and checks for title attribute \r\n        //If no title attribute, check parent node for title attribute\r\n        //If not found, repeat step 2\r\n        let targ = e.target;\r\n        checkForID(targ);\r\n        function checkForID (t) {\r\n            if (t.id) {\r\n                changeItemID(t.id);\r\n            } else {\r\n                t = t.parentNode;\r\n                checkForID (t);   \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getTasks(){\r\n        let tasks = [];\r\n        if(project.taskList !== []){\r\n            for(let i=0; i<project.taskList.length; i++){\r\n                for(let j=0; j<TaskList.length; j++){\r\n                    if(project.taskList[i] === TaskList[j].id ){\r\n                        tasks.push(TaskList[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(tasks);\r\n        return tasks;\r\n    }\r\n\r\n    const projectTasks = getTasks();\r\n\r\n    const [ name, setName ] = useState(project.name);\r\n    const [ requiredContext, setrequiredContext ] = useState(project.description);\r\n    const [ outcome, setoutcome ] = useState(project.description);\r\n    const [ dueDate, setdueDate ] = useState(project.dueDate);\r\n    const [ timeRequired, settimeRequired ] = useState(project.timeRequired);\r\n    const [ lastUpdated, setlastUpdated ] = useState(db.lastUpdated);\r\n\r\n    return (\r\n        <div>\r\n            <div className='w-100 pa2 pb3' >\r\n                <h3 className='fw7 b white pb2'>{project.name}</h3>\r\n                <h4 className='fw1 white'>{project.type}</h4>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Description: </h5>\r\n                <h5 className='fw3 white'>{project.description} </h5>\r\n            </div>\r\n            <div className='w-100 pl2 pb3'>\r\n                <h5 className='fw3 white'>Purpose: </h5>\r\n                <h5 className='fw3 white'>{project.purpose} </h5>\r\n            </div>\r\n            <div className='w-100 pl2 pb3 flex justify-between'>\r\n                <h5 className='fw3 white'>Due: {project.dueDate} </h5>\r\n                <h5 className='fw3 white'>Time Required: {project.timeRequired}</h5>\r\n            </div>\r\n            <div className='w-100 pl2 pb3 flex justify-between'>\r\n                <h5 className='fw3 white'>Status: {project.status}</h5>\r\n                <h5 className='fw3 white'>Time Remaining: 12:34:50 </h5>\r\n            </div>\r\n            <h5 className='bb b--white pa2 fw3 white b' >TASKS</h5>\r\n            <div className='pa2'>\r\n                <List content={projectTasks} filter={MISSION} touchFunction={passKey} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, RestorePreviousState } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        previousView: state.values.previousView,\r\n        itemID: state.values.itemID,\r\n        previousItemID: state.values.previousItemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        previousState: state.RestorePreviousStateReducer.previousState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        restorePreviousState: (previousState) => {\r\n            return dispatch(RestorePreviousState(previousState))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BackButton);\r\n\r\n\r\n\r\nfunction BackButton({ restorePreviousState, previousState, changeItemID, onTouch, previousView, previousItemID, id }) {\r\n\r\n    function goBack(){\r\n        //onTouch(previousView)\r\n        changeItemID(id);\r\n        \r\n    }\r\n    return (\r\n        <div className='whiteB w3 h3 flex items-center justify-center' onClick={goBack}>\r\n            <h1 className=' white b f8 fw9 ma0'>&lt;</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { ReferenceList } from '../ReferenceList';\r\nimport { connect } from 'react-redux';\r\nimport { selectView, selectItem, UpdateExp } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.selectViewReducer.view,\r\n        previousView: state.selectViewReducer.previousView,\r\n        itemID: state.selectItemReducer.itemID,\r\n        exp: state.UpdateExpReducer.exp\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReferenceDetails);\r\n\r\n\r\nfunction ReferenceDetails({ id , changeItemID, updateExp }) {\r\n\r\n    const db = ReferenceList;\r\n    let reference = {};\r\n    //let position;\r\n\r\n    for (let i=0; i<db.length; i++){\r\n\r\n        if (db[i].id === id){\r\n           reference = db[i];\r\n           //position = i;\r\n           break;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <div className='w-100 pa2 pb3' >\r\n                    <h3 className='fw7 b white pb2'>{reference.name}</h3>\r\n                    <h5 className='fw3 white'>Status: {reference.status}</h5>\r\n                </div>\r\n                <h5 className='bb b--white pa2 fw3 white b' >Description</h5>\r\n                <div className='pa2'>\r\n                    <p className='fw3 white'>{reference.description}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ShipItems, ChangeNav } from '../actions';\r\nimport trashCan from '../assets/trash1600.png';\r\nimport { INBOX, PROJECTS, REMOVE, TASKS, REFERENCES, SOMEDAY, ADD } from '../constants';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        ID: state.values.itemID,\r\n        db: state.items.record.items\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        shipItems: (items, agent, record) => {\r\n            return dispatch(ShipItems(items, agent, record))\r\n        },\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrashButton);\r\n\r\n\r\nfunction TrashButton({ shipItems, changeNav, db, title, ID }) {\r\n\r\n    const InboxItems = db.Inbox;\r\n    const ProjectList = db.Projects;\r\n    const TaskList = db.Tasks;\r\n    const Trash = db.Trash;\r\n\r\n    \r\n\r\n    let currentlist, indx, currentItem;\r\n\r\n    switch(title) {\r\n        case PROJECTS:\r\n            currentlist = ProjectList;\r\n        break;\r\n        case TASKS:\r\n            currentlist = TaskList;\r\n        break;\r\n        case INBOX:\r\n            currentlist = InboxItems;\r\n        break;\r\n        default:\r\n    }\r\n\r\n    for (let i=0; i<currentlist.length; i++){\r\n\r\n        if (currentlist[i].id === parseInt(ID)){\r\n            currentItem = currentlist[i];\r\n            indx = i;\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function pushChanges(action, item, list){\r\n        let state = {\r\n            action: action,\r\n            list: list,\r\n            item: item,\r\n            pushDate: (new Date()).getTime()\r\n        }\r\n        shipItems(state);\r\n    }\r\n\r\n    function ammendList(action, list, item, itemndx){\r\n        let dbList;\r\n        switch (list) {\r\n            case ProjectList:\r\n                dbList = \"Projects\"\r\n            break;\r\n            case InboxItems:\r\n                dbList = \"Inbox\"\r\n            break;\r\n            case REFERENCES:\r\n                dbList = \"References\"\r\n            break;\r\n            case TaskList:\r\n                dbList = \"Tasks\"\r\n            break;\r\n            case SOMEDAY:\r\n                dbList = \"Someday\"\r\n            break;\r\n            case Trash:\r\n                dbList = \"Trash\"\r\n            break;\r\n            default:\r\n        }\r\n        switch (action) {\r\n            case REMOVE:\r\n                list.splice(itemndx, 1);\r\n                pushChanges(REMOVE, item, dbList);\r\n            break;\r\n            case ADD:\r\n                list.unshift(item);\r\n                pushChanges(ADD, item, dbList);\r\n            break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    //Change Nav to List\r\n    const nav = {\r\n        title: title,\r\n        view: \"LIST\",\r\n        ID: 0\r\n    }\r\n\r\n    function deleteItem() {\r\n        console.log('delete button clicked');\r\n        ammendList(ADD, Trash, currentItem, indx);\r\n        ammendList(REMOVE, currentlist, currentItem, indx);\r\n        changeNav(nav);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img src={trashCan} alt='trash icon' className='h2' onClick={() => {deleteItem()}} />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PROJECT, TASK, INBOX_ITEM, REFERENCE } from '../constants';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport ItemDetails from '../components/ItemDetails';\r\nimport TaskDetails from '../components/TaskDetails';\r\nimport ProjectDetails from '../components/ProjectDetails';\r\nimport BackButton from '../components/BackButton';\r\nimport PrevItemButton from '../components/PrevItemButton';\r\nimport NextItemButton from '../components/NextItemButton';\r\nimport ReferenceDetails from '../components/ReferenceDetails';\r\nimport { selectItem } from '../actions';\r\nimport TrashButton from '../components/TrashButton';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction Details( { db, itemID, touchFunction, updateExp, selectAnother }){\r\n    let itemType, item;\r\n    let prev = itemID;\r\n    let next = itemID;\r\n    const id = parseInt(itemID);\r\n    let content = db.Inbox.concat(db.Projects, db.Tasks)\r\n\r\n    for (let i=0; i<content.length; i++){\r\n\r\n        if (content[i].id === id){\r\n        itemType = content[i].type;\r\n        item = content[i];\r\n\r\n        if((content[i-1]) && content[i-1].type === itemType){\r\n            prev = content[i-1].id;\r\n        }\r\n        if((content[i+1]) && content[i+1].type === itemType){\r\n            next = content[i+1].id;\r\n        }\r\n        break;\r\n        }\r\n    }\r\n\r\n\r\n    switch(itemType) {\r\n        case PROJECT:\r\n            return (\r\n                <div className='w-100 center br1 pa3 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <ProjectDetails project={item} touchFunction={touchFunction} updateExp={updateExp}/>\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        case TASK:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 '>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Task</h2>\r\n                    <TaskDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        case INBOX_ITEM:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h2 className='tc b gold f3'>Inbox Item</h2>\r\n                    <ItemDetails id={parseInt(itemID)} touchFunction={touchFunction} selectAnother={selectAnother} prevID={prev} nextID={next} />\r\n                </div>        \r\n            )\r\n        case REFERENCE:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10'>\r\n                    <div className='flex justify-between items-center'>\r\n                        <BackButton id={0} />\r\n                        <TrashButton />\r\n                    </div>\r\n                    <h1 className='tc b gold'>REFERENCE</h1>\r\n                    <ReferenceDetails id={parseInt(itemID)} />\r\n                    <div className='flex justify-between self-end'>\r\n                        <PrevItemButton selectAnother={selectAnother} prevID={prev} currentID={itemID} />\r\n                        <NextItemButton selectAnother={selectAnother} nextID={next} currentID={itemID} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className='h-100 w-100 center br1 ba b--black-10 pb2'>\r\n                    <BackButton />\r\n                    <h1 className='tc b white'>Error</h1>\r\n                    <p>Item Not Found</p>\r\n                    <NewItemButton touchFunction={touchFunction} />\r\n                </div>        \r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        activeTask: state.SetActiveTaskReducer.activeTask,\r\n        status: state.UpdateTaskStatusReducer.taskStatus,\r\n        activeSince: state.SetActiveTaskReducer.activeSince,\r\n        timeNow: state.SetActiveTaskReducer.timeNow\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateTaskStatus: (status) => {\r\n            return dispatch(UpdateTaskStatus(status))\r\n        },\r\n        setActiveTask: (task) => {\r\n            return dispatch(SetActiveTask(task))\r\n        },\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTaskTimer);\r\n\r\nfunction ActiveTaskTimer({changeItemID, activeSince, activeTask}) {\r\n    const dateNow = (new Date()).getTime();\r\n    const timeSpent = activeTask.timeSpent + (dateNow - activeSince);\r\n\r\n    let s = timeSpent;\r\n    let ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    let secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    let mins = s % 60;\r\n    let hrs = (s - mins) / 60;\r\n\r\n    const [seconds, setSeconds] = useState(secs);\r\n    const [minutes, setminutes] = useState(mins);\r\n    const [hours, sethours] = useState(hrs);\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    if( (parseInt(activeTask.id) !== undefined) && isActive === false){\r\n        setIsActive(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if ( isActive ) {\r\n        interval = setInterval(() => {\r\n            setSeconds(seconds => seconds + 1);\r\n            if(seconds >= 59){\r\n                setminutes(minutes => minutes +1);\r\n                setSeconds(0);\r\n                if(minutes >= 59){\r\n                    sethours(hours => hours +1);\r\n                    setminutes(0);\r\n                }\r\n            }\r\n        }, 1000);\r\n        } else if (!isActive && seconds !== 0) {\r\n        clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [ isActive, seconds, minutes, hours ]);\r\n\r\n    function goToTask(event){\r\n        event.stopPropagation();\r\n        changeItemID(activeTask.id)\r\n    }\r\n\r\n    switch(activeTask.id){\r\n        case undefined:\r\n            return (\r\n                <div></div>\r\n            )\r\n        default:\r\n            return (\r\n                <div className=\"\" onClick={goToTask} >\r\n                    <div className=\" pt3 \">\r\n                        <h2 className=\"pa1 \">CURRENT TASK</h2>\r\n                        <h2 className=\"pa1 red \">{activeTask.name}</h2>\r\n                        <h2 className='pa1 fw3 b red'>{hours.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {minutes.toLocaleString(undefined,{minimumIntegerDigits: 2})}:\r\n                        {seconds.toLocaleString(undefined,{minimumIntegerDigits: 2})} </h2>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}","import React from 'react';\r\nimport ActiveTaskTimer from './ActiveTaskTimer';\r\n//import React, { useState, useEffect } from 'react';\r\n\r\n// import { connect } from 'react-redux';\r\n// import { UpdateTaskStatus, SetActiveTask, selectItem } from '../actions';\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         activeTask: state.SetActiveTaskReducer.activeTask,\r\n//         status: state.UpdateTaskStatusReducer.taskStatus,\r\n//         activeSince: state.SetActiveTaskReducer.activeSince,\r\n//         timeNow: state.SetActiveTaskReducer.timeNow\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateTaskStatus: (status) => {\r\n//             return dispatch(UpdateTaskStatus(status))\r\n//         },\r\n//         setActiveTask: (task) => {\r\n//             return dispatch(SetActiveTask(task))\r\n//         },\r\n//         changeItemID: (id) => {\r\n//             return dispatch(selectItem(id))\r\n//         }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(StatsOverview);\r\n\r\nexport default function StatsOverview({ touchFunction, exp }) {\r\n\r\n    return (\r\n        <article className=\"h-100 w-100 center bg-white pa2 \" title = \"STATS\" onClick={touchFunction}>\r\n            <div className=\"tc w-100 h-100\">\r\n                <h1 className=\"f2 mb0 \">Amen Christ</h1>\r\n                <h3 className=\"f6 pa1 gray \">Engineer</h3>\r\n                <h4 className=\"f6 gray \">Exp: {exp}</h4>\r\n                <ActiveTaskTimer />\r\n            </div>\r\n        </article>  \r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport default function TaskOverview({ touchFunction, tasks }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"TASKS\" onClick={touchFunction}> \r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Tasks</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ tasks.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function ProjectsOverview({ touchFunction, projects }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white ba b--black-10\" title=\"PROJECTS\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">Missions</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">{ projects.length }</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function InboxOverview({ touchFunction , inbox }) {\r\n\r\n    return (\r\n        <article className=\"h-100 center bg-white br1 ba b--black-10\" title=\"INBOX\" onClick={touchFunction}>\r\n            <div className=\"tc\">\r\n                <h1 className=\"f3 mb2\">{ inbox.length }</h1>\r\n                <h2 className=\"f5 fw4 gray mt0\">Inbox</h2>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { NEW_ITEM } from '../constants'\r\n\r\nexport default function NewItemTile({ touchFunction }) {\r\n    return (\r\n        <div className='bg-white h-100 center w-100 flex items-center justify-center' title={NEW_ITEM} onClick={touchFunction}>\r\n            <div className='tc '>\r\n                <h3 className='' >Add New Item</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { TODAY } from '../constants';\r\n\r\nexport default function TodaysMission({ touchFunction }) {\r\n\r\n    return (\r\n        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={TODAY} onClick={touchFunction}>\r\n            <h2 className='tc'>Today's<br />Mission</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport StatsOverview from '../components/StatsOverview';\r\nimport TaskOverview from '../components/TasksOverview';\r\nimport ProjectsOverview from '../components/ProjectsOverview';\r\nimport InboxOverview from '../components/InboxOverview';\r\nimport { ChangeNav } from '../actions';\r\nimport {  CALENDAR, DAILY } from '../constants';\r\nimport './Home.css';\r\nimport NewItemTile from '../components/NewItemTile';\r\nimport TodaysMission from '../components/TodaysMission';\r\nimport { setNavValues  } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.values.view,\r\n        // title: state.values.title,\r\n        itemID: state.values.itemID,\r\n        exp: state.UpdateExpReducer.exp,\r\n        db: state.items.record.items,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeNav: (navObj) => {\r\n            return dispatch(ChangeNav(navObj))\r\n        }\r\n    }\r\n}\r\n\r\nfunction Home(props) {\r\n    \r\n    const { changeItemID, exp, db, changeNav, state } = props;\r\n\r\n    function handleEvent(e) {\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    return (\r\n        <div className='h-100 pa1' >\r\n            <div className='pa1 ph1 h-40 ba' title=\"STATS\">\r\n                <StatsOverview touchFunction={handleEvent} exp={exp} />\r\n            </div>\r\n            <div className=\"flex justify-center h-20 \">\r\n                <div className='w-50 pa1'>\r\n                    <ProjectsOverview touchFunction={handleEvent} projects={db.Projects} />\r\n                </div>\r\n                <div className='w-50 pa1'>\r\n                    <TaskOverview touchFunction={handleEvent} tasks={db.Tasks}/>\r\n                </div>\r\n            </div>\r\n            <div className='flex w-100 h-10 pa1'>\r\n                <NewItemTile touchFunction={handleEvent} />\r\n            </div>\r\n            <div className=\"flex justify-center h-30\">\r\n                <div className='w-50 h-100 pa1'>\r\n                    <div className=' w-100 h-50 pb1'>\r\n                        <TodaysMission touchFunction={handleEvent} gotoItem={changeItemID} />\r\n                    </div>\r\n                    <div className=' w-100 h-50 pt1'>\r\n                        <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={DAILY} onClick={handleEvent}>\r\n                            <h2 className='tc'>Daily<br />Exercises</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=' w-50 h-100'>\r\n                    <div className=' w-100 h-50'>\r\n                        <div className=' h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' title={\"SOMEDAY\"} onClick={handleEvent} >\r\n                                <h4 className='tc'>Someday</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='h-50 pa1'>\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white ' title={'REFERENCES'} onClick={handleEvent}>\r\n                                <h4 className='tc'>References</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='w-100 h-50 flex'>\r\n                        <div className='w-50 h-100 pa1' >\r\n                            <div className='flex items-center justify-center h-100 w-100 center bg-white pa1' title={CALENDAR} onClick={handleEvent}>\r\n                                <h4 className='tc'>Calendar</h4>\r\n                            </div>\r\n                        </div>\r\n                        <div className='w-50 h-100 pa1'>\r\n                            <InboxOverview touchFunction={handleEvent} inbox={db.Inbox}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\n\r\nexport default function Stats() {\r\n    return (\r\n        <div className='h-75 w-90 center bg-white br1 pa3 pa4-ns ba b--black-10'>\r\n            <h1 className='tc'>STATS</h1>\r\n        </div>       \r\n    )\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectItem, UpdateExp, selectTitle,ChangeNav } from '../actions';\r\nimport { PROJECTS, STATS, TASKS, INBOX, TASK, MISSION, DAILY, REFERENCES, TODAY, NEW, SOMEDAY, CALENDAR, DETAILS } from '../constants';\r\nimport List from '../components/List';\r\nimport './Home.css';\r\nimport NewItemButton from '../components/NewItemButton';\r\nimport NewItem from '../components/NewItem';\r\nimport Details from './Details';\r\nimport Home from './Home';\r\nimport Stats from './Stats';\r\nimport { setNavValues } from '../functions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        title: state.values.title,\r\n        view: state.values.view,\r\n        itemID: state.values.itemID,\r\n        previousView: state.values.previousView,\r\n        exp: state.UpdateExpReducer.exp,\r\n        recordState: state.items.record.isFetching,\r\n        db: state.items.record.items,\r\n        record: state.items.record,\r\n        state: state.values\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeItemID: (id) => {\r\n            return dispatch(selectItem(id))\r\n        },\r\n        changeTitle: (title) => {\r\n            return dispatch(selectTitle(title))\r\n        },\r\n        updateExp: (exp) => {\r\n            return dispatch(UpdateExp(exp))\r\n        },\r\n        changeNav: (navObj => {\r\n            return dispatch(ChangeNav(navObj))\r\n        })\r\n    }\r\n}\r\n\r\nfunction Main(props) {\r\n\r\n    const { state, title, view, itemID, changeItemID, previousView, updateExp, exp, db, record, changeNav } = props;\r\n    \r\n    let type;\r\n    switch(previousView) {\r\n        case TASKS:\r\n            type = TASK;\r\n        break;\r\n        case PROJECTS:\r\n            type = MISSION;\r\n        break;\r\n        default:\r\n    } \r\n\r\n    function handleEvent(e){\r\n        setNavValues(e, changeNav, state);\r\n    }\r\n\r\n    const lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY, DAILY, SOMEDAY, CALENDAR ];\r\n\r\n    console.log('Title: ', title)\r\n    console.log('Item ID: ', itemID)\r\n    console.log('View: ', view)\r\n\r\n    if(record.isFetching){\r\n        return <div className=\"f5 fw4 white\">Loading...</div>;\r\n    } else {\r\n\r\n        let content;\r\n        switch(title) {\r\n            case TASKS:\r\n                content = db.Tasks;\r\n            break;\r\n            case PROJECTS:\r\n                content = db.Projects;\r\n            break;\r\n            case INBOX:\r\n                content = db.Inbox;\r\n                break;\r\n            default:\r\n                content = []\r\n        } \r\n\r\n        switch( true ) {\r\n            case view === DETAILS:\r\n                return (\r\n                    <div className='h-100 pa2 '>\r\n                        <div className='h-10'>\r\n                            <h5>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90 pa1'>\r\n                            <Details selectAnother={changeItemID} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            case (title === STATS):\r\n                return (\r\n                    <Stats />\r\n                )\r\n            case (lists.indexOf(title) !== -1) && view === 'LIST' :\r\n                if (parseInt(itemID) !== 0){\r\n                    return (\r\n                        <div className='h-100 pa2 '>\r\n                            <div className='h-10'>\r\n                                <h5>EXP: {exp}</h5>\r\n                            </div>\r\n                            <div className='h-90 pa1'>\r\n                                <Details selectAnother={changeItemID} />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div className='h-100'>\r\n                            <div className='h-10'>\r\n                                <h5>EXP: {exp}</h5>\r\n                            </div>\r\n                            <div className='h-90 pa1'>\r\n                                <div className='h-100 w-100 center pa1'>\r\n                                    <h1 className='tc b gold ma0 pb2'>{title}</h1>\r\n                                    <div className=' h-80 '>\r\n                                        <List content={content} />\r\n                                    </div>\r\n                                    <div className='h-10 flex w-100 content-end pa2'>\r\n                                        <NewItemButton touchFunction={handleEvent} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    )\r\n                }\r\n            case view === NEW:\r\n                return (\r\n                    <div className='h-100 pa2'>\r\n                        <div className=' h-10'>\r\n                            <h5>EXP: {exp}</h5>\r\n                        </div>\r\n                        <div className='h-90'>\r\n                            <NewItem submitFunction={\"\"} view={type} updateExp={updateExp} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <Home />\r\n                );\r\n        }\r\n      }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectView } from './actions';\r\nimport NavBar from './containers/NavBar';\r\nimport './App.css';\r\nimport Main from './containers/Main';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTouch: (title) => {\r\n            return dispatch(selectView(title))\r\n        }\r\n    }\r\n}\r\n\r\nfunction App2(props) {\r\n\r\n    const { onTouch } = props;\r\n\r\n    \r\n    return (\r\n        <div className='app'>\r\n            <div className='home-container'>\r\n                <Main />\r\n            </div>\r\n            <NavBar touchFunction={onTouch} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(App2);\r\n\r\n\r\n//https://cdn.internetmultimediaonline.org/241F21/loveworldlive/ixilrao9.m3u8","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SELECT_VIEW, OVERVIEW, SELECT_ITEM, UPDATE_EXP, TASKS, INBOX, REFERENCES, TODAY,\r\n    RESTORE_PREVIOUS_STATE, UPDATE_TASK_STATUS, SET_ACTIVE_TASK, HOME, SELECT_TITLE, PROJECTS, LIST, NEW_ITEM, NEW, CHANGE_NAV\r\n} from \"./constants\"\r\n\r\nimport { SELECT_RECORD, INVALIDATE_RECORD, REQUEST_ITEMS, RECEIVE_ITEMS, PACK_ITEMS, DELIVER_ITEMS } from './actions';\r\n\r\nconst initialState = {\r\n    title: HOME, \r\n    itemID: 0,\r\n    view: OVERVIEW,\r\n    previousTitle: HOME,\r\n    previousItemID: 0,\r\n    previousView: OVERVIEW,\r\n    previousState: {},\r\n    taskStatus: '',\r\n    agent: '',\r\n    record: {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        receivedAt: 0,\r\n        items: {}\r\n    },\r\n    latestUpdate: {\r\n        items: {},\r\n        isShipping: false,\r\n        deliveredAt: 0\r\n    },\r\n    exp: 0,\r\n    db: { lastUpdated: 0}\r\n}\r\n\r\n// const selectTitleReducer = (state=initialState, action={}) => {\r\n//     switch(action.type){\r\n//         case SELECT_TITLE:\r\n//             let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, DUE_TODAY]\r\n//             let view = OVERVIEW;\r\n//             if (lists.indexOf(action.payload) !== -1) {\r\n//                 view = LIST;\r\n//             }\r\n//             return Object.assign({}, state, {title: action.payload, view: view, previousTitle: state.title, previousState: state});\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n\r\nconst values = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SELECT_TITLE:\r\n            let lists = [ PROJECTS, TASKS, INBOX, REFERENCES, TODAY ]\r\n            let view = OVERVIEW;\r\n            let ID = 0;\r\n            if (lists.indexOf(action.payload) !== -1) {\r\n                view = LIST;\r\n            } \r\n            if (((lists.indexOf(action.payload) !== -1) && state.view === NEW) || (action.payload === NEW_ITEM) ) {\r\n                view = \"NEW\"\r\n            }\r\n            return Object.assign({}, state, {title: action.payload, view: view, itemID:ID, previousTitle: state.title, previousState: state});\r\n        case CHANGE_NAV:\r\n            return Object.assign({}, state, {title: action.payload.title, view: action.payload.view, itemID:action.payload.ID, previousTitle: state.title, previousState: state});\r\n        case SELECT_ITEM:\r\n            return Object.assign({}, state, {itemID: action.payload, previousItemID: state.itemID, previousState: state});\r\n        case SELECT_VIEW:\r\n            return Object.assign({}, state, {view: action.payload, previousView: state.view, previousState: state});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst RestorePreviousStateReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case RESTORE_PREVIOUS_STATE:\r\n            if(state.previousState === {}) {\r\n                break;\r\n            } else {\r\n                return Object.assign({}, state.previousState );\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateExpReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_EXP:\r\n            return Object.assign({}, state, {exp: (state.exp + action.payload)});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst UpdateTaskStatusReducer = (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case UPDATE_TASK_STATUS:\r\n            return Object.assign({}, state, {taskStatus: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialActiveTask = {\r\n    activeTask: {},\r\n    activeSince: null,\r\n    timeNow: (new Date()).getTime()\r\n}\r\n\r\nconst SetActiveTaskReducer = (state=initialActiveTask, action={}) => {\r\n    switch(action.type){\r\n        case SET_ACTIVE_TASK:\r\n            return Object.assign({}, state, {activeTask: action.payload, activeSince: (new Date()).getTime() });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n//let serverLink = \"http://localhost:5000\";// \"https://secret-citadel-16777.herokuapp.com/\"\r\n\r\n\r\n//////////////////////////////////////////////// 17.10.2020 async app upgrade\r\n\r\n/// State shape\r\n\r\n\r\nfunction SelectRecordReducer(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_RECORD:\r\n      return action.payload\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction items(\r\n  state = initialState,\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_RECORD:\r\n      return Object.assign({}, state, { records: {didInvalidate: true} })\r\n    case REQUEST_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: true,\r\n          didInvalidate: false\r\n        }\r\n      })\r\n    case RECEIVE_ITEMS:\r\n      return Object.assign({}, state, {\r\n        record: {\r\n          isFetching: false,\r\n          didInvalidate: false,\r\n          receivedAt: action.receivedAt,\r\n          items: action.items\r\n        }\r\n      })\r\n    case PACK_ITEMS:\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: true,\r\n                deliveredAt: 0\r\n            },\r\n        })\r\n    case DELIVER_ITEMS:\r\n        console.log(\"Special Delivery: \", action.payload)\r\n        return Object.assign({}, state, {\r\n            latestUpdate: {\r\n                items: action.payload,\r\n                isShipping: false,\r\n                deliveredAt: action.deliveredAt\r\n            },\r\n        })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst rootReducer = combineReducers({r\n    values, UpdateExpReducer, RestorePreviousStateReducer, \r\n    UpdateTaskStatusReducer, SetActiveTaskReducer, \r\n    SelectRecordReducer, items\r\n});\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport './tachyonBoost.css';\r\nimport rootReducer from './reducers';\r\nimport { SelectRecord, FetchItems } from './actions';\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\n// store\r\n//   .dispatch(fetchPostsIfNeeded('reactjs'))\r\n//   .then(() => console.log(store.getState()))\r\n\r\nstore.dispatch(SelectRecord('reactjs')) ;\r\nstore.dispatch(FetchItems('reactjs'));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n    <App  />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}